<?xml version="1.0" encoding="utf-8"?>
<topic id="8bd03b78-7d8c-4e05-9ea1-da0ada2ff7e0" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      

      <para>
        According to the specification, the service which your
        application calls may have different kind of replies. For example, when your
        application need customer’s information from the customer management service,
        that service may give you the customer’s info if it have, or tell you that
        customer does not exist. You application may work differently according to the
        reply. To ensure your application to be fully tested, you need to
        simulate both conditions and to see if the application is running as expected.
      </para>
      <autoOutline />
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section>
      <title>Configures the behavior of service simulation</title>
      <content>



        <para>
          This function gives you the capability to simulate the reply
          as what the test objective is. To configure the reply of the simulated service,
          click on <mediaLinkInline>
            <image xlink:href="ServerReplies"/>
          </mediaLinkInline> button from test runner.
        </para>

        <para>
          The user interface for the reply configuration is shown as
          below
        </para>

        <mediaLink>
          <image xlink:href="image016" />
        </mediaLink>
      </content>
      <sections>
        <section address="_Toc515307892">
          <!--h3-->
          <title>Select the service to simulate</title>
          <content>

            <para>
              Everything is similar as the Send request, you have <mediaLinkInline>
                <image xlink:href="image017" />
              </mediaLinkInline> button on the title bar to select the service to simulate.
            </para>

            <para>The interface of selecting service is similar to the organization used to select service to send.</para>

            <para>
              Once a service is selected, Uri Template is shown in Uri Template, you MUST change and apply the
              endpoint settings of your application under test to send request to this Uri.
            </para>

            <para>
              You need also to start the virtual service indicated by
              Service Type. In this example, this service is
              hosted on SOAP Server, and it must be started in order to receive the requests
              from your application.
            </para>

          </content>
        </section>

        <section address="_Toc515307893">
          <!--h3-->
          <title>Reply with Exception</title>
          <content>

            <para>
              With Hummingbird you can simulate different type of replies
              to send to calling application. If you are simulating a SOAP Web service which
              Fault are specified in the WSDL, Hummingbird will propose you automatically the
              type of Fault and provide you the structure.
            </para>

            <para>
              When Fault Contract is specified in WSDL, the check box
              Throws an Exception will appear, and a list of Error Types will be shown too.
            </para>

            <para>
              Simply check Throws an Exception and select an error type
              from the list, you can reply with a specified Fault to your application.
            </para>

          </content>
        </section>
        <section address="_Toc515307894">
          <!--h3-->
          <title>Determine which reply to sent</title>
          <content>

            <para>
              Now you can configure one or more possible replies. For any
              other replies than Default, you need to specify a condition to trigger the
              reply. If no condition is satisfied during the simulation, the Default reply
              will be sent.
            </para>

            <para>
              To edit the condition which determines the reply to send,
              click on the Edit button.
            </para>

            <para>
              The changes of service simulation take effective
              immediately. You don’t need to restart the simulation service or hummingbird
              application.
            </para>

          </content>
        </section>
      </sections>
    </section>
    
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
