<?xml version="1.0" encoding="utf-8"?>
<topic id="cecf9e5f-0cae-41c7-bc45-f65c6a64ca82" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>
        In test methods, on called robustness test. It is aimed to verify if an application or component can function correctly in the presence of invalid inputs or stressful environmental conditions.
        In Hummingbird Service simulation module, you can simulate errors and simulate response time.
      </para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Simulate errors and faults</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>When the error is defined, in the reply configuration window, you can check “Throws an Exception” on the response, that gives you the possibility to send an Error Reply.</para>
      </content>
      <sections>
        <section address="SubSection1">
          <title>Choose Error Type</title>
          <content>
            <para>
              For some web services like SOAP, error message are defined in the service description. For these kind of service, you can choose a type of error to simulate by choosing a type in <literal>Error Types</literal>
            </para>
            <mediaLink>
              <image xlink:href="image016"/>
            </mediaLink>

          </content>
        </section>
        <section address="SubSection2">
          <title>Set Response Time</title>
          <content>
            <para>
              In real production environment, Services, especially for those 3rd party services may have a higher response time. To simulate these kind of situations, you may set a Response Time for the simulated service. To set a specific response time, change the value of <literal>Delay</literal>. The delay is counted as number of Seconds, its default value is 0.
            </para>
          </content>
        </section>
      </sections>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
