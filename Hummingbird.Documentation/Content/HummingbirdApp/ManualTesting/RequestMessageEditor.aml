<?xml version="1.0" encoding="utf-8"?>
<topic id="a58d6d26-1331-4fad-ab62-991d6e0153ba" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">


    <introduction>
      <para>When a service and its operation is selected, now it’s time to edit the request message according to the objectives of the test. </para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Get familiar with the request message editor</title>
      <content>
        <para>To start efficiently, let’s start by getting familiar with the request message editor.</para>
        <para>
          <para>
            <mediaLink>
              <image xlink:href="edit_request_message" />
            </mediaLink>
          </para>
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <mediaLinkInline>
                <image xlink:href="image017" />
              </mediaLinkInline>: With this button, you can choose the service to test.</para>
          </listItem>
          <listItem>
            <para>
              <literal>Service</literal>: This label recalls your current service under test
            </para>
          </listItem>
          <listItem>
            <para>
              <literal>Endpoint</literal>: In this text-box you can specify the endpoint of the service. You may use variables in the endpoint value. Endpoint value will be changed if Test Environment is changed.
            </para>
          </listItem>
          <listItem>
            <para>
              <mediaLinkInline>
                <image xlink:href="reset" />
              </mediaLinkInline>: This button resets the endpoint to its default value. If the default value contains variables, they will be valorized by the values from current selected test environment
            </para>
          </listItem>
          <listItem>
            <para>
              <literal>Environment</literal>: Select the current test environment, changing test environment will change the endpoint of the service, and credentials
            </para>
          </listItem>
          <listItem>
            <para>
              <literal>Options</literal>: Additional options applied when sending the request message. Refers here to know more about Options.
            </para>
          </listItem>
          <listItem>
            <para>
              <literal>History</literal>: Historical request messages</para>
          </listItem>
        </list>
      </content>
    </section>

    <section address="Section2">
      <title>Edit request message</title>
      <content>
        <para>Request message can be edited in two ways:</para>
      </content>
      <sections>
          <section address="SubSection1">
              <title>Using Intelligent Object-Model based editor</title>
              <content>
                  <para>The Object-Model request editor is based on the service description, you don’t need to initialize the structure yourself by reading and reviewing the service definition. The editor did it:</para>
                <list class="bullet">
                  <listItem>
                    <para>
                      <legacyBold>Object initializing</legacyBold>: initialize an object in the request message</para>
                  </listItem>
                  <listItem>
                    <para>
                      <legacyBold>Type recognition</legacyBold>: Message editor recognizes the type of objects and values and checks if the input is correct.</para>
                  </listItem>
                  <listItem>
                    <para>
                      <legacyBold>Active tracing</legacyBold>: when select a node in the Object-Model, the related tag will be highlighted *</para>
                  </listItem>
                  <listItem>
                    <para>
                      <legacyBold>Sub Type recognition</legacyBold>: when initializing abstract objects, the editor finds also all suitable sub types.</para>
                  </listItem>
                </list>
                <para>Refers here to know more about the Object-Model Request Editor</para>
                <para>* This function works actually on XML based request messages (SOAP, XML over HTTP, …) or in the XML view for a Non-XML request.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Using text editor</title>
              <content>
                  <para>As a Geek, you can also edit request message using the test editor. The built-in text editor checks in real-time errors of structure, value and data integrity for you in real time. </para>
                <para>As shown by the following example: when we made mistakes:</para>
                <para>
                  <mediaLink>
                    <image xlink:href="request error" />
                  </mediaLink>
                </para>
                <list class="bullet">
                  <listItem>
                    <para>
                      An error message is shown in the status bar, click on it can set the cursor to the error tag.
                    </para>
                  </listItem>
                  <listItem>
                    <para>
                      The error tag is highlighted
                    </para>
                  </listItem>
                  <listItem>
                    <para>
                      A Red-Dot is shown on the progress bar to show the relative position of the error to the document. Click on the Red Dot can also bring the error tag into view.
                    </para>
                  </listItem>
                </list>
              </content>
          </section>
      </sections>
    </section>
    
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
