<?xml version="1.0" encoding="utf-8"?>
<topic id="49130667-01d2-4c61-a56c-0c6616b0bd25" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>
        Transaction History shows all recent incoming or outgoing message. <literal>Outgoing</literal> messages are sent from Hummingbird to your application under test, while <literal>Incoming</literal> message are received by service simulation of Hummingbird, They are usually sent by application under test.
      </para>
      <para>Unlike other test tools, messages in transaction history are stored permanently. Messages can be used as proof of test at certain moment, and can be reviewed later.</para>
      <para>Please note that messages stored in transaction history uses your memory. To optimize performance of the tool, the number of stored messages are limited: When maximum number of messages are reached, oldest messages will be purged. According to the work load and your machine configuration, you should set a suitable value for stored transaction history.</para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Actions on transaction history</title>
      <content>
      </content>
      <sections>
        <section address="SubSection1">
          <title>Open a message</title>
          <content>
            <para>Double Click a message will open it in Message Viewer, you can review Request and Response text. </para>
          </content>
        </section>
        <section address="SubSection2">
          <title>Rename a message</title>
          <content>
            <para>Rename message gives the possibility to tag the message according to the situation. For example, a request sent to application under test, but the response it not expected. This message can be tagged as Bug with its number.</para>
            <para>
              To rename a message, right click on a message and choose <literal>Rename this message</literal>
            </para>
            <mediaLink>
              <image xlink:href="rename_message" placement="center"/>
            </mediaLink>
          </content>
        </section>
        <section address="SubSection3">
          <title>View message in object editor</title>
          <content>
            <para>
              Large XML and JSON documents are not easy to view, these messages can be reviewed in object mode. To view a message in object editor, right click on a message and choose <literal>Show request as object</literal> or <literal>Show response as object</literal>. Message will be shown in a Object-Model editor.
            </para>
          </content>
        </section>
        <section address="SubSection4">
          <title>Search text in message</title>
          <content>
            <para>
              Click on <mediaLinkInline>
                <image xlink:href="find"/>
              </mediaLinkInline> icon to activate the search function in order to text in Title, Request Message or Response message. Matched message will be highlighted and can be selected via <literal>PREVIOUS</literal> and <literal>NEXT</literal> button in the search panel.
            </para>
          <mediaLink>
            <image xlink:href="search_message"/>
          </mediaLink>
          </content>
        </section>
      </sections>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
