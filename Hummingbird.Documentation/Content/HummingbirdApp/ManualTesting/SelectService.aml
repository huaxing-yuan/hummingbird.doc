<?xml version="1.0" encoding="utf-8"?>
<topic id="c261a1c4-a8f3-4396-a437-342927926842" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">


    <introduction>
      <para>Like in the library, all books are indexed by Genre, Title or Date of publish. So you can quickly find the book you want. Hummingbird shares similar idea, that to organize the services in the same way. In Hummingbird test framework, services are organized in 3 levels:</para>
      <list class="bullet">
        <listItem>
          <para>
            <literal>Application</literal> : Represents an application to test. Or in the context of service simulation, represents an application to simulate.
          </para>
        </listItem>
        <listItem>
          <para><literal>Service Category</literal>: Functionality regroups some services into a category.</para>
        </listItem>
        <listItem>
          <para><literal>Service</literal>: The service to test itself.</para>
        </listItem>
      </list>

    </introduction>

    <section>
      <title>Services are organized</title>
      <content>
        <para>Services are placed in <literal>Applications</literal> and <literal>Service Categories</literal>, so testers can quickly localize the service to test or to simulate. A Tab represents an application, services are listed under its category. </para>
        <para>This helps testers to focus on the functionality of the service itself, and no more need to ask questions about: should I find this service in a list of Soap or Rest. </para>
        <mediaLink>
          <image placement="center" xlink:href="serviceselector"/>
        </mediaLink>
        <para>
          In Hummingbird App, graphically, they are represented as above image. <literal>BackOffice Systems</literal> represents the services used in the Back Office application; <literal>
            Invoice Processing
          </literal> regroups 3 web service that is used in the context of Invoice. You can also found other service from another tabs.
        </para>
        <para>
          When new services definition are imported, the service selector screen will show them in appropriate position.
        </para>
      </content>
    </section>

    <section>
      <title>Search a service</title>
      <content>
        <para>
          When working on a large project with many services to test, and you know perfectly the name of the service, Search function can be used: By typing for example convert in the search box, all matched services will be listed. Now you need a click on the service name to start edit test data.
        </para>
      </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
