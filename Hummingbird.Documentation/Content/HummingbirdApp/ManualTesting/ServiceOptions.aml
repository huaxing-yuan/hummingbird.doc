<?xml version="1.0" encoding="utf-8"?>
<topic id="203facbf-47c0-4fe4-a9a0-0b26647802e1" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Service options gives a way to configure how requests will be sent outside the service definition itself.</para>
      <para>For example, web services are hosted on the server while you need to authenticate yourself before calling. You need to send special token via HTTP headers.</para>
      <para>
        In request editor, you can activate the service option panel by clicking on the <mediaLinkInline>
          <image xlink:href="btn_options" />
        </mediaLinkInline> button.
      </para>
      <para>Service Options panel will be shown on the right side of the window: </para>
      <para>
        <mediaLinkInline>
          <image xlink:href="service_options" />
        </mediaLinkInline>
      </para>
    </introduction>

    <section address="Section1">
      <title>General Options</title>
      <content></content>
      <sections>
        <section address="Authentication">
          <title>Authentication</title>
          <content>
            <para>Here you can choose the authentication method and credentials to use. By default, requests will be sent without authentication: Anonymous. You can choose a different authentication method according to the service configuration (you need to talk with dev or ops team). In the real world, most of the services are using Anonymous and Basic Authentications, over HTTP or HTTPS.</para>
            <para>Hummingbird supports following authentication types:</para>
            <list class="bullet">
              <listItem>
                <para>
                  <literal>Basic authentication</literal>: User name and password sent with the header. When using this type of authentication, you need to specify a credential of that type from Test Settings.</para>
              </listItem>
              <listItem>
                <para>
                  <literal>Digest authentication</literal>: Limited integrity protection for the messages. When using this type of authentication, you need to specify a credential of that type from Test Settings.</para>
              </listItem>
              <listItem>
                <para>
                  <literal>NTLM Authentication</literal>: Authenticate using NTML with your current Windows Identity, if failed automatically switch to Windows Authentication. For security reasons, it is not possible to use another credential (username/password).</para>
              </listItem>
              <listItem>
                <para>
                  <literal>Windows Authentication</literal>: Authenticate using Windows Integrated Authentication with your current Windows Identity. For security reasons, it is not possible to use another credential (username/password)</para>
              </listItem>


            </list>
          </content>
        </section>
        <section address="preemptive">
          <title>Pre-Emptive Authentication</title>
          <content>
            <para>Server may configured using pre-emptive authentication instead of using default authentication scheme. When Pre-emptive is activated, username and password will be sent directly without expecting http 100 continue.</para>
            <para>If server is configured for Basic Authentication with Pre-Emptive, activate this option when sending requests.</para>
          </content>
        </section>
      </sections>
    </section>

    <section>
      <title>SOAP Options</title>
      <content>
        <para>These options are only used by Soap Client for SOAP Web services</para>
      </content>

      <sections>
        <section address="encoding">
          <title>Soap Message Encoding</title>
          <content>
            <para>By default, soap messages are sent with XML. For large responses with usually attachments server may configured as MToM. If the server expected request/response to be sent using MToM (Content-Type: application/xop), please activate this option</para>
          </content>
        </section>
        <section address="messageversion">
          <title>Soap Message Version</title>
          <content>
            <para>Most of web services are Soap 1.1, and you may meet some web service using Soap 1.2 protocol. For these services, make sure that Soap 1.2 is activated.</para>
            <alert class="note">
              <para>When services are imported using Extension Designer, Hummingbird recognizes automatically the soap 1.2 messages from WSDL and will select SOAP 1.2 by default.</para>
            </alert>
          </content>
        </section>        
      </sections>
    </section>

    <section>
      <title>Custom Http Headers</title>
      <content>
        <para>In some cases, the server side expect some special HTTP headers, for example: Cookies, Token, and Session Id. If these headers are required, you can add them here. they will be sent with the request.</para>
      </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
