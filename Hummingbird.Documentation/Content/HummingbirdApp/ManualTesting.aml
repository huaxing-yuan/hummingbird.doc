<?xml version="1.0" encoding="utf-8"?>
<topic id="ab9e58ea-f1c6-4564-ae2a-674b49dbe40e" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <summary>
      <para>Testing is a key step in the software development process to ensure the behavior of the software is correct in prior to release software to end users. While the software may be complex and composed with several components which communicates to each other. So we need tests to ensure <literal>Each component</literal> works as expected and they <literal>Communicate</literal> correctly with each other.</para>
      <para>Each component will be invoked by either the user with user interface, or another piece of software. In the same time, it may invoke other components or software: These components provide data or result that your application do not have, your application needs the result to continue its process. </para>
      <para>Of course, These components may be developed by another team or even another organization, often not available or stable during the component test phrase. Thats why Hummingbird provides the way to simulate the caller of your application, and also the way to simulate other components that your application depends on: it receives data from your application, and provide result as you defined to meet test objective.</para>
      <para>The first functionality is often called <literal>Driver</literal> or <literal>Injector</literal>, and the second functionality is called <literal>Stub</literal> or <literal>Service Simulation</literal>.</para>
      <para>In this section we will discuss how to test your application with the Driver, and how to simulate service you depends on with Service Simulation.</para>
    </summary>

    
    <section address="Section1">
      <title>Test Runner</title>
      <content>

        <para>
          With test runner, hummingbird can be used both as Driver and Stub:
        </para>
        <list class="bullet">
          <listItem>
          <para>
            <legacyBold>Driver</legacyBold>: replaces a component that takes care of the
            control and/or the calling of a component or system. That means you can call a
            web service under test with hummingbird.
          </para>
          </listItem>
          <listItem>
            <para>
            <legacyBold>Stub</legacyBold>, also called <legacyBold>Service Simulation</legacyBold> or <legacyBold>
              Service
              Virtualization
            </legacyBold>, is used to simulate the component or system of which your
            application calls.
          </para>
          </listItem>
        
        </list>

        <para>
          In hummingbird, that are combined in the same user
          interface. To start manual testing, go to the Tab Testing -&gt; Test Runner.
        </para>

        <para>As shown by the image below:</para>
        
        <para>
          <mediaLink>
            <image xlink:href="test_runner" />
          </mediaLink>
        </para>
        
        <para>
          On the left side, the software listed all Virtual Services
          you want to use. For example: The <legacyBold>SOAP Server</legacyBold> is used to simulate all
          SOAP Web Services, described by a WSDL document. And the <legacyBold>HTTP Server</legacyBold> is
          used to simulate all low level HTTP requests or the REST web services.
        </para>

        <para>
          If you need other virtual services, click on link <legacyBold>
            Add/Remove
            Servers
          </legacyBold> to show and activate available virtual servers installed. When a
          virtual server is available, it doesn’t mean the server is running.
        </para>

        <para>
          You can click on the link <legacyBold>Start services</legacyBold> to start
          simulation for the services of all virtual servers, or start and stop
          individual virtual server. When a virtual server is running, a green border
          will be shown on its left side.
        </para>

        <para>
          Another part of the screen is <legacyBold>Messages</legacyBold>, it records
          every incoming and outgoing transactions. Incoming message means virtual server
          has received a request from your application and replied as configured.
          Outgoing message means you are using hummingbird to call the web services
          exposed by your application. You can understand the direction by the
          icon.
        </para>

        <list class="bullet">
          <listItem>
          <para>
            <mediaLinkInline>
              <image xlink:href="image011" />
            </mediaLinkInline>&#160;This icon indicates an outgoing
            message
          </para>
</listItem>
          <listItem>
          <para>
            <mediaLinkInline>
              <image xlink:href="image012" />
            </mediaLinkInline>&#160;This icon indicates an incoming
            message.
          </para>
</listItem>
          <listItem>
          <para>
            <mediaLinkInline>
              <image xlink:href="image013" />
            </mediaLinkInline>&#160;This icon indicates the call is
            performed with an authentication process, such as Basic Authentication that
            uses a Username/Password pair, or a Windows Integrated Authentication.
          </para>
          </listItem>
          <listItem>
          <para>
            <mediaLinkInline>
              <image xlink:href="image014" />
            </mediaLinkInline>&#160;This icon indicates the call is
            performed with a secured transport level, such as HTTPS
          </para>
          </listItem> 
        </list>

        <para>
          The message has a status, shown in different colors,
          indicates a Technical result. Commonly, if the server send the reply with HTTP
          5xx or HTTP 4xx status code, the request is considered as Failed. Other
          technical issues such as Timeout, Firewall, and Connection issue, the status
          will also be tagged as Failed. To understand the status and its meaning, please
          refers to [TODO: Link to Hummingbird.TestFramework.Messaging.MessageStatus]
        </para>

        <para>
          Finally, you have two button, gives you access to the two
          main functionality
        </para>

        <list class="bullet">
          <listItem>
            <para>
              Send Request: Allows to test services: All services is organized
              here.
            </para>
          </listItem>
          <listItem>
            <para>
              Server Replies: Allows to configure the service simulation
              behavior.
            </para>
          </listItem>
        </list>




        
      </content>

    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
