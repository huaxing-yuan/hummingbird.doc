<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hummingbird.TestFramework</name>
    </assembly>
    <members>
        <member name="T:Hummingbird.TestFramework.Automation.ConditionalTestStep">
            <summary>
            <para>Conditional test step evaluate its conditions and according to the result, runs PassedTestStep if the condition meet and runs FailedTestStep if the condition does not meet</para>
            <para>Either PassedTestStep or FailedTestStep can be NULL, in this case Automation engine will simply ignores the TestStep.</para>
            <para>When the condition cannot be evaluated, IsExecuted </para>
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ConditionalTestStep.Condition">
            <summary>
            The condition to evaluate (all conditions should met)
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ConditionalTestStep.ConditionBehavoir">
            <summary>
            Defines the behavior when exception occurs during condition evaluation.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ConditionalTestStep.TrueSteps">
            <summary>
            This test step will be executed when the condition is meet.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ConditionalTestStep.FalseSteps">
            <summary>
            Failed test step will be run when the condition is not meet.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ConditionalTestStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.ConditionalTestStep"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ConditionalTestStep.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ConditionalTestStep.Run">
            <summary>
            Runs this instance. Do not implement StartTime, Duration. Write information in the <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.Information" /> field, it will be shown in the log automatically.
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.CsvDataStorage">
            <summary>
            Writes test or intermediate data to a CSV file
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.DataSource" />
            <remarks>
            The property <see cref="P:Hummingbird.TestFramework.Automation.CsvDataStorage.FileName"/> and <see cref="P:Hummingbird.TestFramework.Automation.CsvDataStorage.Separator"/> support token replacement.
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CsvDataStorage.Save(Hummingbird.TestFramework.Automation.TestCase)">
            <summary>
            This method should be implemented by sub classes by storing data to adapted place: Excel, CSV or SQL Database.
            </summary>
            <param name="testCase"></param>
            <exception cref="T:System.InvalidOperationException">You are using a relative path but the project has not yet saved. Please save the project before using relative path.</exception>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.CsvDataStorage.FileName">
            <summary>
            Gets or sets the File name which data will be written. If <see cref="P:Hummingbird.TestFramework.Automation.DataStorage.HasHeader"/> is set to <see langword="true"/>, the first row of CSV will be headers.
            </summary>
            <value>
            The name of the file.
            </value>
            <remarks>
            If the FileName does not contain a Full Path, the resolver will try to find the filename from path related to the current Automation Project.
            If the file does not exists
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.CsvDataStorage.Separator">
            <summary>
            Gets or sets the separator of the CSV file, the default separator depends on your localization settings. For example, for US based culture 
            </summary>
            <value>
            The separator, it can be a comma (,) a semicolon (;) a pipe (|) or another user defined separator
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CsvDataStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.CsvDataStorage"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.CustomLoadTestCase">
            <summary>
            A custom load test case that users can customize the load as will.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.LoadTestCase" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.CustomLoadTestCase.CustomControlPoints">
            <summary>
            Gets or sets a list of time point and the expected load at that point
            </summary>
            <value>
            The custom loads as a list of <see cref="T:Hummingbird.TestFramework.Automation.MeasurePoint"/>s, for each point the <see cref="P:Hummingbird.TestFramework.Automation.MeasurePoint.Time"/> indicates the control point in second, and <see cref="P:Hummingbird.TestFramework.Automation.MeasurePoint.Value"/> represents a expected load at that point.
            </value>
              
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CustomLoadTestCase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.CustomLoadTestCase"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CustomLoadTestCase.GetLoadGraph">
            <summary>
            Gets the expect load graph measure points. That graph can be shown as a simulation of the loads
            </summary>
            <returns>
            An array of measure points that can be shown in a Cartesian Chart
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CustomLoadTestCase.CheckParameters">
            <summary>
            Checks the validity of test parameters.
            </summary>
            <returns>
              <see langword="true" /> - If all parameters are valid, <see langword="false" /> if at least one parameter has error. <see cref="P:Hummingbird.TestFramework.Automation.AbstractTestItem.DisplayMessage" /> contains the error message.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CustomLoadTestCase.RaiseControlPointsChanged">
            <summary>
            Raises the notification considering that the <see cref="P:Hummingbird.TestFramework.Automation.CustomLoadTestCase.CustomControlPoints"/> has been change.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CustomLoadTestCase.GetEndTime(System.DateTime)">
            <summary>
            Gets the end time of the test depends on the specified start time.
            </summary>
            <param name="startTime">The start time.</param>
            <returns>
            A <see cref="T:System.DateTime" /> object that represents the end of the current test
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CustomLoadTestCase.GetLoad(System.DateTime,System.TimeSpan)">
            <summary>
            Gets the number of iterations should be run at the current time.
            </summary>
            <param name="startTime">The Time where the load test begins. This time is used to determine in which state the current test scenario is running</param>
            <param name="dx">The fragment of time where the current.</param>
            <returns>
            The number of iterations per second should be generated for the fragment of time.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CustomLoadTestCase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.CustomTestStep">
            <summary>
            CustomTestStep is generated by the test framework, when a class inherited from <see cref="T:Hummingbird.TestFramework.Automation.TestStepBase"/> is detected when loading an Extension.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestStepBase" />
            <remarks>
            The Test Framework will wrap any test steps defined in extension with <see cref="T:Hummingbird.TestFramework.Automation.CustomTestStep"/>.
            Users will be able to load and save automation project even the required extension is not loaded.
            Of course, the test step requires extension can not be edited or executed.
            </remarks>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.CustomTestStep.SerializedObject">
            <summary>
            This string holds the serialized test step object.
            </summary>
            <remarks>
            In case where the extension is not installed on the target machine, The test step can not be deserialized.
            The automation project can still be loaded but the underlying test step will be ignored.
            </remarks>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.CustomTestStep.HasSerializationError">
            <summary>
            Indicates that the test step encounters error when deserializing. when this happens, the underlying test step can not be executed.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CustomTestStep.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.CustomTestStep"/> class.
            </summary>
            <param name="testStepType">Type of the underlying test step.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.CustomTestStep.RequiredExtension">
            <summary>
            Gets or sets the required extension.
            </summary>
            <value>
            The required extension definition where this custom test step is defined.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.CustomTestStep.TestStep">
            <summary>
            Gets the underlying test step.
            </summary>
            <value>
            The underlying test step.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CustomTestStep.Run">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CustomTestStep.SetTestCase">
            <summary>
            Sets the test case reference to the underlying test step.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.TableDataGeneratorTestStep">
            <summary>
            A test step that generates variable from a list of possible values.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestStepBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TableDataGeneratorTestStep.Run">
            <summary>
            Runs this instance. Do not implement StartTime, Duration. Write information in the <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.Information" /> field, it will be shown in the log automatically.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TableDataGeneratorTestStep.DataGenerator">
            <summary>
            Gets or sets the data generator used for this test step.
            </summary>
            <value>
            The data generator of type <see cref="T:Hummingbird.TestFramework.Automation.DataGenerator.TableDataGenerator"/>
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TableDataGeneratorTestStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.TableDataGeneratorTestStep" /> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.DataGenerator.AbstractDataGenerator">
            <summary>
            Generates test data for automated tests. For each iteration it generates data and fill the value to Test case variable.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataGenerator.AbstractDataGenerator.Name">
            <summary>
            Gets or sets the name of the current DataGenerator
            </summary>
            <value>
            A <see cref="T:System.String"/> value represents the name of the current DataGenerator.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataGenerator.AbstractDataGenerator.Reset">
            <summary>
            Resets the cursor to 0.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataGenerator.AbstractDataGenerator.IsRandom">
            <summary>
            Gets or sets a value indicating whether to generate data randomly.
            </summary>
            <value>
              <c>true</c> choose a random value for a variable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataGenerator.AbstractDataGenerator.Generate(Hummingbird.TestFramework.Automation.TestCase)">
            <summary>
            Generates data at the current cursor and move the cursor to next position. or generates data at random position when <see cref="P:Hummingbird.TestFramework.Automation.DataGenerator.AbstractDataGenerator.IsRandom"/> is set to <see langword="true"/>
            </summary>
            <returns>An collection of variable and its values.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.DataGenerator.TableDataGenerator">
            <summary>
            Generates test data from a Table, each column represents a variable while each row represents an iteration.
            </summary>
            <remarks>
            <para>The <see cref="T:Hummingbird.TestFramework.Automation.DataGenerator.TableDataGenerator"/> is used in an API Performance test case. For each iteration, it will select a data row and converts it's value into variable. 
            </para>
            <para>DataGenerator uses static cache to store data, the data will be loaded at the first time it will be called. Data is loaded from the file described in <see cref="P:Hummingbird.TestFramework.Automation.DataGenerator.TableDataGenerator.DataSource"/> property.</para>
            </remarks>
            <seealso cref="T:Hummingbird.TestFramework.Automation.DataGenerator.AbstractDataGenerator" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataGenerator.TableDataGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.DataGenerator.TableDataGenerator"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataGenerator.TableDataGenerator.Id">
            <summary>
            Gets or sets the identifier of this <see cref="T:Hummingbird.TestFramework.Automation.DataGenerator.TableDataGenerator"/>
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataGenerator.TableDataGenerator.Generate(Hummingbird.TestFramework.Automation.TestCase)">
            <summary>
            Generates data at the current cursor and move the cursor to next position.
            </summary>
            <returns>
            An collection of variable and its values.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataGenerator.TableDataGenerator.Reset">
            <summary>
            Resets the cursor to 0.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataGenerator.TableDataGenerator.DataSource">
            <summary>
            Gets or sets the data source of this DataGenerator
            </summary>
            <value>
            The data source.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.DataGenerator.VariableDataGenerator">
            <summary>
            Generates data from a given list of possible values.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.DataGenerator.AbstractDataGenerator" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataGenerator.VariableDataGenerator.Variables">
            <summary>
            Gets or sets a list of variables that this data generator will generator. The name of the variable will be replaced by one of the value, the Value of the variable represents a list of possible values.
            </summary>
            <value>
            The variables.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataGenerator.VariableDataGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.DataGenerator.VariableDataGenerator"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataGenerator.VariableDataGenerator.Generate(Hummingbird.TestFramework.Automation.TestCase)">
            <summary>
            Generates data at the current cursor and move the cursor to next position.
            </summary>
            <returns>
            An collection of variable and its values.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataGenerator.VariableDataGenerator.Reset">
            <summary>
            Resets the cursor to 0.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.AbstractSqlTestStep">
            <summary>
            Base class of <see cref="T:Hummingbird.TestFramework.Automation.SqlQueryTestStep"/>
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestStepBase" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.Server">
            <summary>
            Gets or sets the server name (FQN, Host name or IP address)
            </summary>
            <value>
            The server.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.DatabaseName">
            <summary>
            Gets or sets the name of the database.
            </summary>
            <value>
            The name of the database.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.SqlAuthenticationMode">
            <summary>
            Gets or sets the SQL authentication mode.
            </summary>
            <value>
            The SQL authentication mode, <see cref="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.SqlAuthenticationMode"/>
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.UserName">
            <summary>
            Gets or sets the UserName to access to base if User/Password mode is used
            </summary>
            <value>
            The UserName
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.Password">
            <summary>
            Gets or sets the password to access to base if User/Password mode is used. This field is not saved directly when saved to files.
            </summary>
            <value>
            The clear password that is used to authenticate users to the database. the clear password is not stored.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.TestConnectivity(System.String@)">
            <summary>
            Tests the connectivity from the current settings
            </summary>
            <returns><see langword="true"/> if the connectivity is OK, <see langword="false"/> if the connection is failed</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.GetConnectionString">
            <summary>
            Gets the connection string from the current test step settings
            </summary>
            <returns>a <see cref="T:System.String"/> representation of the connection strings.</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.EncPassword">
            <summary>
            Gets or sets the Encrypted password.
            </summary>
            <value>
            The enc password.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.ResultType">
            <summary>
            Gets or sets the <see cref="T:Hummingbird.TestFramework.Automation.SqlResultType"/> of the current Query or Stored Procedure
            </summary>
            <value>
            <see cref="T:Hummingbird.TestFramework.Automation.SqlResultType"/> represents the type of the query result
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.Result">
            <summary>
            Gets or SQL execution result, according to the resultType.
            <para>If <see cref="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.ResultType" /> is set to <see cref="F:Hummingbird.TestFramework.Automation.SqlResultType.Nothing" />, the property will contains the number of rows affected.</para><para>If <see cref="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.ResultType" /> is set to <see cref="F:Hummingbird.TestFramework.Automation.SqlResultType.ScalarValue" />, the property will contains the returned value. </para><para>If <see cref="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.ResultType" /> is set to <see cref="F:Hummingbird.TestFramework.Automation.SqlResultType.Query" />, the property will contains the returned data in an Array </para>
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractSqlTestStep.ResultTable">
            <summary>
            Gets the SQL Query result in DataTable representation.
            </summary>
            <value>
            The result table.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion">
            <summary>
            Base class of all the assertions.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.IsDisabled">
            <summary>
            Gets or sets whether the current test item is disabled.
            </summary>
            <value>
            An <see cref="T:System.Boolean" /> value that represents if the current test item is disabled.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.Id">
            <summary>
            Gets or sets the identifier of the assertion
            </summary>
            <value>
            The identifier is initialized when the assertion is first initialized. it will not be changed.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.Name">
            <summary>
            Gets or sets the name of the assertion
            </summary>
            <value>
            The name of the assertion
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.GenerateName">
            <summary>
            Generates the name of the Assertion.
            </summary>
            <returns>The name of the assertion</returns>
        </member>
        <member name="E:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.PropertyChanged">
            <summary>
            Occurs when some property values has changed. 
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.InternalAssert(Hummingbird.TestFramework.Automation.TestStepBase)">
            <summary>
            Asserts the specified test step.
            </summary>
            <param name="RelatedTestStep">The related test step.</param>
            <returns>
            Boolean indicates if the assertion is passed. <see langword="true" /> if the assertion is passed, <c>False</c> if the assertion is failed.
            </returns>
            <remarks>
            If the assertion is failed, more detailed information may be provided in <see cref="P:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.Information"/> Property</remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.Assert(Hummingbird.TestFramework.Automation.TestStepBase)">
            <summary>
            Asserts the specified test step. The assertion result is stored in the <see cref="P:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.Status" /> property.
            </summary>
            <param name="TestStep">The related test step.</param>
            <returns>If Assertion is succeeded the return value will be <see cref="F:Hummingbird.TestFramework.TestStatus.Passed"/>, otherwise <see cref="F:Hummingbird.TestFramework.TestStatus.Failed"/></returns>
            <remarks>
            If the assertion is failed, more detailed information may be provided in <see cref="P:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.Information" /> Property. This method invokes <see cref="M:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.InternalAssert(Hummingbird.TestFramework.Automation.TestStepBase)" /> method.
            After
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.Status">
            <summary>
            Gets or sets the Status of the current Assertion.
            </summary>
            <value>
            One of the Status. The default value is <see cref="F:Hummingbird.TestFramework.TestStatus.NoRun"/> if the assertion is not yet run.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.Information">
            <summary>
            Gets or sets the information, error message related to the assertion.
            </summary>
            <value>
            The information related to the assertion, It may contains detailed information if the assertion is failed.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.InformationString">
            <summary>
            Gets the information in it's String representation.
            </summary>
            <value>
            The information string.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.OnPropertyChanged(System.String)">
            <summary>
            Notifies the property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A duplication of the current <see cref="T:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion"/> or its inherited types </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Assertions.AbstractValueCompareAssertion">
            <summary>
            A base class of Value compare based Assertions.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.AbstractValueCompareAssertion.UseRegularExpression">
            <summary>
            Gets or sets a value indicating whether to use Regular Expression for result comparing
            </summary>
            <value>
              <c>true</c> to use Regular Expression; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.AbstractValueCompareAssertion.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether the result matching is case sensitive.
            </summary>
            <value>
              <c>true</c> if the match is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.AbstractValueCompareAssertion.MessagePart">
            <summary>
            Gets or sets in which part the assertion will work on.
            </summary>
            <value>
            Search the pattern in the Request or the Response.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.AbstractValueCompareAssertion.ExpectedResult">
            <summary>
            Gets or sets the Expected Result.
            </summary>
            <value>
            The expected result.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.AbstractValueCompareAssertion.Result">
            <summary>
            Gets the result which compared to Expected Result
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Assertions.SoapFaultAssertion">
            <summary>
            Checks if the response is the related test step is a Soap fault / or not.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.SoapFaultAssertion.GenerateName">
            <summary>
            Generates the name of the Assertion.
            </summary>
            <returns>
            The name of the assertion
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.SoapFaultAssertion.InternalAssert(Hummingbird.TestFramework.Automation.TestStepBase)">
            <summary>
            Asserts the specified test step.
            </summary>
            <param name="RelatedTestStep">The related test step.</param>
            <returns>
            Boolean indicates if the assertion is passed. <see langword="true" /> if the assertion is passed, <c>False</c> if the assertion is failed.
            </returns>
            <remarks>
            If the assertion is failed, more detailed information may be provided in <see cref="P:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.Information" /> Property
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.SoapFaultAssertion.IsFault">
            <summary>
            Gets or sets a value indicating whether this instance is fault.
            </summary>
            <value>
              <c>true</c>: When the response is Soap Fault, the assertion passes, otherwise, the assertion fails
              <c>false</c>: When the response is a valid soap response, the assertion passes, otherwise, the assertion fails.
            </value>
            <remarks>
            Whatever the value of <see cref="P:Hummingbird.TestFramework.Automation.Assertions.SoapFaultAssertion.IsFault"/> is, If the response is error other than Soap Fault (Connection issues, Timeout, Server side errors, proxy errors, ... ), the assertion will always fails.
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.SoapFaultAssertion.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Assertions.NotContainsAssertion">
            <summary>
            Checks if a text pattern does not occur in the Request or Response.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.NotContainsAssertion.InternalAssert(Hummingbird.TestFramework.Automation.TestStepBase)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.NotContainsAssertion.GenerateName">
            <summary>
            Generates the name of the Assertion.
            </summary>
            <returns>The name of the assertion.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Assertions.ContainsAssertion">
            <summary>
            Checks if a text occurs within the Request or Response.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.ContainsAssertion.InternalAssert(Hummingbird.TestFramework.Automation.TestStepBase)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.ContainsAssertion.InternalContains(Hummingbird.TestFramework.Automation.TestStepBase,System.String)">
            <summary>
            Internals method to find if the searchPattern is found in the given context. <see cref="T:Hummingbird.TestFramework.Automation.Assertions.NotContainsAssertion" /> use also this method but reverse the test result.
            </summary>
            <param name="RelatedTestStep">The related test step.</param>
            <param name="searchPattern">The search pattern.</param>
            <returns>Bool value indicates if the searchPattern appears in the given object.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.ContainsAssertion.GenerateName">
            <summary>
            Generates the name of the Assertion.
            </summary>
            <returns>The name of the assertion.</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.ContainsAssertion.Pattern">
            <summary>
            Gets or sets the pattern to search in the given Request or Response
            </summary>
            <value>
            The pattern to search.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.ContainsAssertion.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Assertions.PathValidationAssertion">
            <summary>
            Checks if value described by a Property Path is expected.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.PathValidationAssertion.GenerateName">
            <summary>
            Generates the name of the Assertion.
            </summary>
            <returns>
            The name of the assertion
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.PathValidationAssertion.InternalAssert(Hummingbird.TestFramework.Automation.TestStepBase)">
            <summary>
            Asserts the specified test step.
            </summary>
            <param name="RelatedTestStep">The related test step.</param>
            <returns>
            Boolean indicates if the assertion is passed. <see langword="true" /> if the assertion is passed, <c>False</c> if the assertion is failed.
            </returns>
            <remarks>
            If the assertion is failed, more detailed information may be provided in <see cref="P:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.Information" /> Property
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.PathValidationAssertion.PathExpression">
            <summary>
            Gets or sets the Path Expression to match the given Request or Response
            </summary>
            <value>
            The Path Expression to match.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.PathValidationAssertion.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Assertions.XPathValidationAssertion">
            <summary>
            Checks if value described by an XPath is expected.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.XPathValidationAssertion.GenerateName">
            <summary>
            Generates the name of the Assertion.
            </summary>
            <returns>
            The name of the assertion
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.XPathValidationAssertion.InternalAssert(Hummingbird.TestFramework.Automation.TestStepBase)">
            <summary>
            Asserts the specified test step.
            </summary>
            <param name="RelatedTestStep">The related test step.</param>
            <returns>
            Boolean indicates if the assertion is passed. <see langword="true" /> if the assertion is passed, <c>False</c> if the assertion is failed.
            </returns>
            <remarks>
            If the assertion is failed, more detailed information may be provided in <see cref="P:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion.Information" /> Property
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Assertions.XPathValidationAssertion.XPathExpression">
            <summary>
            Gets or sets the XPath Expression to match the given Request or Response
            </summary>
            <value>
            The XPath Expression to match.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Assertions.XPathValidationAssertion.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.AutomationProject">
            <summary>
            The hummingbird test automation project definition.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.DeleteItem(System.Object)">
            <summary>
            Deletes an sub item from the current scope. for Test Case, the item is test Step, For Test Suite, the item is test case, ...
            </summary>
            <param name="item">The item to be deleted.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AutomationProject.FrameworkVersion">
            <summary>
            Gets or sets the <see cref="T:Hummingbird.TestFramework.Version"/> of the Test Framework that this automation project is created.
            </summary>
            <value>
            The framework version.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.AutomationProject"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.AddRequiredExtension">
            <summary>
            Checks the required extension for the current project. this function is called before project saves.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.UpdateId">
            <summary>
            Generates a new Identifier of the current AbstractTestItem and all its sub items.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AutomationProject.HasLoadPath">
            <summary>
            Gets if the Automation Project has a Path.
            </summary>
            <value>
            <c>True</c> if the automation project is loaded from an existing project, or has been saved. <c>False</c> if the project has not yet saved.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AutomationProject.LoadPath">
            <summary>
            Gets or sets the load path.
            </summary>
            <value>
            The load path.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AutomationProject.Profile">
            <summary>
            Gets or sets the test profile.
            </summary>
            <value>
            The profile.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AutomationProject.CreationDate">
            <summary>
            Gets the creation date.
            </summary>
            <value>
            The creation date.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AutomationProject.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>
            The created by.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AutomationProject.LastSavedBy">
            <summary>
            Gets or sets the last saved by.
            </summary>
            <value>
            The last saved by.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AutomationProject.LastSaveDate">
            <summary>
            Gets the last save date.
            </summary>
            <value>
            The last save date.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.CheckRequiredExtension">
            <summary>
            Checks if required extension is installed and loaded.
            </summary>
            <returns>A list of <see cref="T:Hummingbird.TestFramework.Extensibility.ExtensionDefinition"/> where this automation project requires.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.AddRequiredExtension(Hummingbird.TestFramework.Extensibility.ExtensionDefinition)">
            <summary>
            Adds the required extension described by the given extension definition
            </summary>
            <param name="definition">The extension definition.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AutomationProject.RequiredExtensions">
            <summary>
            Gets or sets the required extensions for the current AutomationProject
            </summary>
            <value>
            The required extensions.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.GetTestItem(System.Guid)">
            <summary>
            Gets the <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem"/> object from Id
            </summary>
            <param name="testStepId">The test step identifier.</param>
            <returns>The <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem"/> object where <see cref="P:Hummingbird.TestFramework.Automation.AbstractTestItem.Id"/> equals to <paramref name="testStepId"/>. If no items is found, a null object will be returned.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.CheckLinks(Hummingbird.TestFramework.Automation.AutomationProject)">
            <summary>
            Checks the parent links of the project: Links TestStep to parent TestCase and links TestCase to parent TestSuite
            </summary>
            <param name="project">The <see cref="T:Hummingbird.TestFramework.Automation.AutomationProject"/> object to check.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.CheckLinks">
            <summary>
            Checks the parent links of the project: Links TestStep to parent TestCase and links TestCase to parent TestSuite
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AutomationProject.TestSuites">
            <summary>
            Gets or sets the test suites included in this automation project
            </summary>
            <value>
            The test suites.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.Run">
            <summary>
            Runs all the test suites of the current project.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.Save">
            <summary>
            Saves this instance to a location.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value indicate if the current automation project is saved.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.SaveAs(System.String)">
            <summary>
            Saves the current automation project as other file.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicate if the current automation project is saved.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.Load(System.String)">
            <summary>
            Loads an TestSuite instance from a specified location
            </summary>
            <param name="path">The location of the serialized TestSuite.</param>
            <returns>The <see cref="T:Hummingbird.TestFramework.Automation.AutomationProject"/> object represents an Automation Project</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.LoadAsync(System.String)">
            <summary>
            Loads an TestSuite instance from a specified location in asynchronized mode
            </summary>
            <param name="path">The path.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object represents an Automation Project</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AutomationProject.Abandon">
            <summary>
            Abandons the unsaved changes to this project. 
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AutomationProject.ActiveEnvironment">
            <summary>
            Gets or sets the active environment.
            </summary>
            <value>
            The active environment.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.AbstractTestItem">
            <summary>
            This class is an Abstract Test Item, common for TestSuite, TestCase and TestStep
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.IsDisabled">
            <summary>
            Gets or sets whether the current test item is disabled.
            </summary>
            <value>
            An <see cref="T:System.Boolean" /> value that represents if the current test item is disabled.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this item is extended in its Visual Tree.
            </summary>
            <value>
              <c>true</c> if this instance is extended; otherwise, <c>false</c>.
            </value>
            <remarks>
            This property is only used by the automated test editor, where the item should be extended or collapsed in the tree view. It's value will not affect the test result.
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.UpdateId">
            <summary>
            Generates a new Identifier of the current AbstractTestItem and all its sub items.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.IsSaved">
            <summary>
            Gets a value indicating whether this instance is saved.
            </summary>
            <value>
              <c>true</c> if this instance is saved; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.InitStatus">
            <summary>
            Initializes the status of the Test Case
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.StartTime">
            <summary>
            A DateTime object indicates the time when current steps starts to run. StartTime is set by the test framework when the Run method has been called.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.ElapsedTime">
            <summary>
            A DateTime object indicates the time when current steps finishes. EndTime is set by the test framework after the Checkpoint method has finishes.
            If the test step goes wrong, EndTime will be set when the error occurs.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.Variables">
            <summary>
            Gets or sets the variables in the current test scope (Test Step, Test Case or Test Suite). 
            </summary>
            <value>
            A list of NameValuePair containing the Name and the Value of the variable.
            </value>
            <remarks>
            The evaluation will start from the current scope, if the variable is not found, it will find on its parent scope.
            For example, if a TestCase needs to get the value of an variable, it will try to find in the current TestCase, then parent TestSuite. In no case, the evaluator will find in its Test Steps, another Test Case or another Test Suite.
            Hummingbird Test Framework will replace tokens with the values that represent in Variables, but Context not.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.CustomVariables">
            <summary>
            Gets a list of custom variables defined by the user. These variables will be saved with the project. and will be replaced if necessary.
            CustomVariables are more priority than variables in <see cref="P:Hummingbird.TestFramework.Automation.AbstractTestItem.Variables"/>, if an variable of the same name exists both in CustomVariables and Variables, the value of that in CustomVarialbes will return.
            </summary>
            <value>
            The list of custom variables.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.DeleteItem(System.Object)">
            <summary>
            Deletes an sub item from the current scope. for Test Case, the item is test Step, For Test Suite, the item is test case, ...
            </summary>
            <param name="item">The item to be deleted. it could be one of the <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem"/> or one of the <see cref="T:Hummingbird.TestFramework.Automation.LoadTestCase"/></param>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.StopFlag">
            <summary>
            The flag indicate the Stop is requested by the user. when the flag is true, All test process should stop
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.Id">
            <summary>
            Gets or sets the unique identifier of the TestCase.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.Name">
            <summary> 
            Gets or sets the name of this Test Case
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.Description">
            <summary>
            Gets or sets the Description of the current <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem"/>
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.Context">
            <summary>
            Gets or sets the test case level Context values. The context is dispatched by the automation engine, and is read-only outside of the Test Cases.
            </summary>
            <value>
            The list of NameValuePair containing the context of the TestCase
            </value>
            <remarks>
            TestCase.Context stores TestCase level values generated by the test steps, stored temporary and will be included in the final test report. 
            Automation engine maintains this list and transfer it to every test cases within the TestCase. 
            Each test case can store variables into context and use it in later test steps. Context will be cleaned after the Test Case is finished.
            To store context variables between test case, please use TestSuite level Context: <see cref="P:Hummingbird.TestFramework.Automation.AbstractTestItem.Context"/>
            </remarks>
        </member>
        <member name="E:Hummingbird.TestFramework.Automation.AbstractTestItem.PropertyChanged">
            <summary>
            Occurs when the test case properties has been changed.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.OnPropertyChanged(System.String)">
            <summary>
            Called when property value has changed.
            </summary>
            <param name="PropertyName">Name of the property.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.GetVariable(System.String,System.Boolean)">
            <summary>
            Gets the variable from the given context.
            </summary>
            <param name="name">The name of the variable, case sensitive.</param>
            <param name="isRecursive">if set to <c>true</c> the search of variable will be performed also to its parent items.</param>
            <returns>The Value of the variable specified in name parameter. If the variable is not found, the value is <see langword="null"/>.</returns>
            <remarks>
            When isRecursive is marked as <see langword="true"/>, The search will be performed on current level and all parent levels until the Project.
            The <see cref="P:Hummingbird.TestFramework.Automation.AbstractTestItem.CustomVariables"/> is more priority than <see cref="P:Hummingbird.TestFramework.Automation.AbstractTestItem.Variables"/>
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.GetVariables(System.Boolean)">
            <summary>
            Gets All variables available for the current test scope.
            </summary>
            <param name="isRecursive">if set to <c>true</c> this function will retrieved also the variables specified in the parent item.</param>
            <returns>A List contains all the variables of this test item scope.</returns>
            <remarks>
            When isRecursive is marked as <see langword="true"/>, The search will be performed on current level and all parent levels until the Project.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.Status">
            <summary>
            Status of the current test item (TestSuite, TestCase or TestStep). Automation framework will mark Result = Running when entering the current item.
            If Result has not been changed in Run() and Checkpoint() method, it will be marked as Passed.
            <para>You must assign Errors, Warning if it happens within Run and Checkpoint method.</para>
            </summary>
            <remarks>If after Run() method, the result is already Failed, Automation framework will not call Checkpoint method.</remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.DisplayMessage">
            <summary>
            Gets or sets the information can be shown to the user
            </summary>
            <value>
            The information.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.AbstractTestItem.Progress">
            <summary>
            Gets or sets the progress of the current test item (Test suite or test case)
            </summary>
            <value>
            The progress value between 0 and 100. 100 means the last test item in collection is finished;
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.Stop">
            <summary>
            Stops the test execution
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.MoveUp(Hummingbird.TestFramework.Automation.AbstractTestItem)">
            <summary>
            Moves up a test item in its parent items collection.
            </summary>
            <param name="testItem">The test item.</param>
            <remarks>
            This function is used to move up a sub item in the collection.
            For example, moves up a <see cref="T:Hummingbird.TestFramework.Automation.TestStepBase"/> within the <see cref="P:Hummingbird.TestFramework.Automation.TestCase.Steps"/> of a <see cref="T:Hummingbird.TestFramework.Automation.TestCase"/>.
            Or moves up a <see cref="T:Hummingbird.TestFramework.Automation.TestCase"/> within the <see cref="P:Hummingbird.TestFramework.Automation.TestSuite.TestCases"/> of a <see cref="T:Hummingbird.TestFramework.Automation.TestSuite"/>
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.MoveToTop(Hummingbird.TestFramework.Automation.AbstractTestItem)">
            <summary>
            Moves on top a test item in its parent items collection.
            </summary>
            <param name="testItem">The test item.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.MoveToBottom(Hummingbird.TestFramework.Automation.AbstractTestItem)">
            <summary>
            Moves to bottom a test item in its parent items collections
            </summary>
            <param name="testItem">The test item.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.MoveDown(Hummingbird.TestFramework.Automation.AbstractTestItem)">
            <summary>
            Moves down a test item in its parent items collections
            </summary>
            <param name="testItem">The test item to move down</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.Compare(Hummingbird.TestFramework.Automation.AbstractTestItem,Hummingbird.TestFramework.Automation.AbstractTestItem)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.AbstractTestItem.CompareTo(Hummingbird.TestFramework.Automation.AbstractTestItem)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.CommandLineTestStep">
            <summary>
            Test Step that executes an external program
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestStepBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CommandLineTestStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.CommandLineTestStep"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.CommandLineTestStep.FileName">
            <summary>
            Gets or sets the executable (.exe, .bat) file to launch.
            </summary>
            <value>
            The executable.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.CommandLineTestStep.Arguments">
            <summary>
            Gets or sets the arguments for the command line. If the argument contains space, it must be quoted
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.CommandLineTestStep.ErrorStreamAsFailed">
            <summary>
            Gets or sets a value indicating whether to Fail the test if at least a message is written in Standard Error output
            </summary>
            <value>
              <c>true</c> Set status Failed if at least a message is written in standard error output; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.CommandLineTestStep.Timeout">
            <summary>
            Gets or sets the Timeout where the test step will wait for command line execution. 
            The command line test step will wait until the program ends its execution, if timeout arrived and the program is still running, its process will be killed.
            </summary>
            <value>
            An integer value indicate in Seconds the timeout
            </value>
            <remarks>
            Hummingbird Test Framework will try to close also the programs opened by the target executable from the process tree, but according to the complexity of the environment this behavior cannot be guaranteed. Make sure you are running an executable under control and for a good reason.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.CommandLineTestStep.WorkingDirectory">
            <summary>
            Gets or sets the working directory. If the property is <see langword="null"/> or Empty, the working directory will be set to the same directory of the Project File
            </summary>
            <value>
            The working directory.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CommandLineTestStep.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ConditionBehavoirs">
            <summary>
            Determines actions to do when the error occurs while evaluating condition.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ConditionBehavoirs.Nothing">
            <summary>
            Do nothing and do not mark test step failed.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ConditionBehavoirs.RunFailedTestStep">
            <summary>
            Run the test step defined in FailedTestStep.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ConditionBehavoirs.FailsTestStep">
            <summary>
            Fails the current test step
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.CSharpScriptTestStep">
            <summary>
            A custom C# script test step, which automation test can writes a specific test step using C# language.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestStepBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CSharpScriptTestStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.CSharpScriptTestStep"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.CsvDataSource">
            <summary>
            Provide data from CSV file
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.DataSource" />
            <remarks>
            The property <see cref="P:Hummingbird.TestFramework.Automation.CsvDataSource.FileName"/> and <see cref="P:Hummingbird.TestFramework.Automation.CsvDataSource.Separator"/> support token replacement.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.CsvDataSource.FileName">
            <summary>
            Gets or sets the File name which to import the data. If <see cref="P:Hummingbird.TestFramework.Automation.DataSource.HasHeader"/> is set to <see langword="true"/>, the first row of CSV is considered as headers
            </summary>
            <value>
            The name of the file.
            </value>
            <remarks>
            If the FileName does not contain a Full Path, the resolver will try to find the filename from path related to the current Automation Project.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.CsvDataSource.Separator">
            <summary>
            Gets or sets the separator of the CSV file, the default separator depends on your localization settings. For example, for US based culture 
            </summary>
            <value>
            The separator, it can be a comma (,) a semicolon (;) a pipe (|) or another user defined separator
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CsvDataSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.CsvDataSource"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.CsvDataSource.ImportData(Hummingbird.TestFramework.Automation.TestCase)">
            <summary>
            Imports the data from the Comma-separated value (CSV) File specified in <see cref="P:Hummingbird.TestFramework.Automation.CsvDataSource.FileName"/> property.
            </summary>
            <param name="testCase">The referenced test case.</param>
            <returns>
              <see cref="T:System.Boolean" /> value indicating if the Import is successful.
            </returns>
            <exception cref="T:System.InvalidOperationException">You are using a relative path but the project has not yet saved. When using relative path, the project must have been saved.</exception>
            <remarks>
            The Headers will be persisted but the data will not: It will not be saved with the Test Automation project, every run Hummingbird Test Framework will re-import the data from defined location.
            </remarks>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.DataDrivenTestCase">
            <summary>
            Data Driven Test Case is derived from Test Case. The whole test case will be run multiple times according to the given data source.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestCase" />
            <remarks>
            The <see cref="P:Hummingbird.TestFramework.Automation.DataDrivenTestCase.DataSource"/> provides a data table from a compatible source: an CSV, Excel file, or an Table on the SQL Server.
            When Data driven test is being executed, it will create one or more TestCaseInstance that represents a Test Case and replace variables used in test steps.
            The Data Driven Test case will generate n test cases and their results in the report.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataDrivenTestCase.Progress">
            <summary>
            Gets or sets the progress of the current Data Driven test case.
            </summary>
            <value>
            The progress value between 0 and 100. 100 means the last test item in collection is finished;
            </value>
            <remarks>
            The Progress hides the normal Progress used in the ordinary Test Case object, because N Test cases will be generated and executed according to the test data.
            To access the Progress for the current running Test Case instance, use <code>base.Progress</code>. 
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataDrivenTestCase.DataSource">
            <summary>
            Gets or sets the where to load test data from.
            </summary>
            <value>
            An object of class inherited from <see cref="P:Hummingbird.TestFramework.Automation.DataDrivenTestCase.DataSource"/>
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataDrivenTestCase.DataStorage">
            <summary>
            Gets or sets the data storage where to save received data;
            </summary>
            <value>
            The data storage.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataDrivenTestCase.TestInstances">
            <summary>
            Gets the Test Instance generated by the Data Driven Test Case
            </summary>
            <value>
            The test instance.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataDrivenTestCase.Run(System.Int64,Hummingbird.TestFramework.Configuration.Profile)">
            <summary>
            Runs the current test case.
            </summary>
            <param name="ThreadId">The thread id who calls this function.</param>
            <param name="profile">The profile to be used.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataDrivenTestCase.CreateTestInstances">
            <summary>
            Creates the test instances.
            </summary>
            <returns>Count of test instances created.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataDrivenTestCase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataDrivenTestCase.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.DataGeneratorTestStep">
            <summary>
            A test step that generates variable from a list of possible values.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestStepBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataGeneratorTestStep.Run">
            <summary>
            Runs this instance. Do not implement StartTime, Duration. Write information in the <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.Information" /> field, it will be shown in the log automatically.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataGeneratorTestStep.DataGenerator">
            <summary>
            Gets or sets the data generator used for this test step.
            </summary>
            <value>
            The data generator.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataGeneratorTestStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.DataGeneratorTestStep"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.DataStorage">
            <summary>
            Data Storage is to persist test or intermediate data. For example, Excel, CSV or SQL Database
            </summary>
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.DataStorage"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataStorage.Overwrite">
            <summary>
            Gets or sets a value indicating whether the data should be overwritten 
            </summary>
            <value>
              <c>true</c> during the test, if the data storage contains data, it will be erased before the test; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataStorage.HasHeader">
            <summary>
            Gets or sets if the headers should be written to the data storage if supported 
            </summary>
            <value>
            An <see cref="T:System.Boolean"/> value that represents HasHeader of the current object
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataStorage.SortHeaders">
            <summary>
            Gets or sets a value indicating whether headers should be sorted alphabetically to the data storage.
            </summary>
            <value>
            An <see cref="T:System.Boolean"/> value that represents SortHeaders of the current object. <see langword="true"/>: Headers will be stored in alphabetic order of current culture.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataStorage.Save(Hummingbird.TestFramework.Automation.TestCase)">
            <summary>
            This method should be implemented by sub classes by storing data to adapted place: Excel, CSV or SQL Database.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataStorage.ProcessData">
            <summary>
            Processes the received data and produce a DataTable
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataStorage.DataTable">
            <summary>
            Gets the produced DataTable from the received data to store.
            </summary>
            <value>
            The data table.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataStorage.ReceiveData(System.String,System.Collections.Generic.IEnumerable{Hummingbird.TestFramework.Variable})">
            <summary>
            Receives a collection of data from data sender, such as <see cref="T:Hummingbird.TestFramework.Automation.DataDrivenTestCase" />. Data will be considered as
            </summary>
            <param name="key">The key - name of the test instance</param>
            <param name="data">The data - a list of variables containing Name and its Value</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataStorage.Information">
            <summary>
            Gets or sets the information generated by execution the data storage.
            </summary>
            <value>
            The information.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataStorage.VerifyHeaders(System.Collections.Generic.IEnumerable{Hummingbird.TestFramework.Variable})">
            <summary>
            Verifies the headers from given data and adds headers if some of the headers are not presented.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.DataStorage.Data">
            <summary>
            The data to be written to the data storage
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataStorage.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
            <value>
            The headers.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataStorage.OnPropertyChanged(System.String)">
            <summary>
            Called when property value has changed.
            </summary>
            <param name="PropertyName">Name of the property.</param>
        </member>
        <member name="E:Hummingbird.TestFramework.Automation.DataStorage.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataStorage.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataStorage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.DataSource">
            <summary>
            The base class of the Data Source, this class cannot be instanced.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataSource.HasHeader">
            <summary>
            Gets or sets a value indicating whether the data source has header.
            </summary>
            <value>
              <c>true</c> if the data source has header; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataSource.ImportData(Hummingbird.TestFramework.Automation.TestCase)">
            <summary>
            Import Data from the given data source. After a successful import, the <see cref="P:Hummingbird.TestFramework.Automation.DataSource.Data" /> property will be filled.
            If <see cref="P:Hummingbird.TestFramework.Automation.DataSource.HasHeader" /> is set to True, the <see cref="P:Hummingbird.TestFramework.Automation.DataSource.Headers" /> property will be automatically assigned.
            </summary>
            <param name="testCase">The test case who calling the importData Method</param>
            <returns>an <see cref="T:System.Int32"/> value represents the number of rows imported.</returns>
            <remarks>
            The Headers will be persisted but the data will not: It will not be saved with the Test Automation project, every run Hummingbird Test Framework will re-import the data from defined location.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataSource.MaxRows">
            <summary>
            Gets or sets the maximum rows can be imported
            </summary>
            <value>
            The unsigned integer value represents maximum rows can be fetched by an import. All rows will be imported if the MaxRows is set to 0;
            </value>
            <remarks>
            Technically the Maximum rows will be limited at 2 147 483 647 (0x7FFFFFFFF), which represents the maximum number can be hold in a 32bit integer.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataSource.Data">
            <summary>
            Gets or sets the Data after the ImportData method
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataSource.Headers">
            <summary>
            Gets or Sets the headers. if the file data source contains header (for example, The first row of a CSV the headers), headers will be refilled after the call of ImportData.
            The headers can be used as an variable. For example, the token ${name} will be replace by the value where the header name is "name"
            </summary>
            <value>
            The string array represents the name of the column headers.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataSource.OnPropertyChanged(System.String)">
            <summary>
            Called when property value has changed.
            </summary>
            <param name="PropertyName">Name of the property.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DataSource.DataTable">
            <summary>
            Gets a <see cref="P:Hummingbird.TestFramework.Automation.DataSource.DataTable"/> object which represents the current imported data
            </summary>
            <value>
            a <see cref="P:Hummingbird.TestFramework.Automation.DataSource.DataTable"/> object. When the data table is not used
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataSource.ReadData(Hummingbird.TestFramework.Variable[]@)">
            <summary>
            Fetches the next row from the Data. This function can only be called when <see cref="P:Hummingbird.TestFramework.Automation.DataSource.Headers" /> and <see cref="P:Hummingbird.TestFramework.Automation.DataSource.Data" /> are imported.
            </summary>
            <param name="values">The <see cref="T:Hummingbird.TestFramework.Variable"/> values contains the Name and the Value of the data.</param>
            <returns>
            True if the Data is successfully read, False if there are no more data.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataSource.ResetCursor">
            <summary>
            Resets the current cursor to line 0, This function will be called systematically by the <see cref="T:Hummingbird.TestFramework.Automation.DataDrivenTestCase"/> before the test.
            </summary>
        </member>
        <member name="E:Hummingbird.TestFramework.Automation.DataSource.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataSource.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DataSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ExcelDataSource">
            <summary>
            Provide data from EXCEL (Open XML Format) File.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.DataSource" />
            <remarks>
            The property <see cref="P:Hummingbird.TestFramework.Automation.ExcelDataSource.FileName"/> support token replacement. ExcelDataSource support Open XML format Excel files.
            </remarks> 
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExcelDataSource.FileName">
            <summary>
            Gets or sets the File name which to import the data. If <see cref="P:Hummingbird.TestFramework.Automation.DataSource.HasHeader"/> is set to <see langword="true"/>, the first row of excel data is considered as headers
            </summary>
            <value>
            The name of the file
            </value>
            <remarks>
            If the FileName does not contain a Full Path, the resolver will try to find the filename from path related to the current Automation Project.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExcelDataSource.RangeType">
            <summary>
            Gets or sets RangeType. When using <see cref="F:Hummingbird.TestFramework.Automation.SpreadsheetRangeType.NamedRange"/> or <see cref="F:Hummingbird.TestFramework.Automation.SpreadsheetRangeType.Table"/>, <see cref="P:Hummingbird.TestFramework.Automation.ExcelDataSource.SheetName"/> will be ignored.
            </summary>
            <value>
            An <see cref="T:Hummingbird.TestFramework.Automation.SpreadsheetRangeType"/> value that represents RangeType of the current object.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExcelDataSource.RangeName">
            <summary>
            Gets or sets RangeName according to the value of <see cref="P:Hummingbird.TestFramework.Automation.ExcelDataSource.RangeType"/>
            </summary>
            <value>
            An <see cref="T:System.String"/> value that represents RangeName of the current object
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExcelDataSource.SheetName">
            <summary>
            Gets or sets Name of the Sheet in a SpreadSheet document.
            </summary>
            <value>
            An <see cref="T:System.String"/> value that represents SheetName of the current object
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ExcelDataSource.ImportData(Hummingbird.TestFramework.Automation.TestCase)">
            <summary>
            Import Data from the given data source. After a successful import, the <see cref="P:Hummingbird.TestFramework.Automation.DataSource.Data" /> property will be filled.
            If <see cref="P:Hummingbird.TestFramework.Automation.DataSource.HasHeader" /> is set to True, the <see cref="P:Hummingbird.TestFramework.Automation.DataSource.Headers" /> property will be automatically assigned.
            </summary>
            <param name="testCase">The test case who calling the importData Method</param>
            <returns>
            an <see cref="T:System.Int32" /> value represents the number of rows imported.
            </returns>
            <remarks>
            The Headers will be persisted but the data will not: It will not be saved with the Test Automation project, every run Hummingbird Test Framework will re-import the data from defined location.
            </remarks>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ExcelDataStorage">
            <summary>
            Exports data to Excel WorkSheet
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.DataStorage" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ExcelDataStorage.Save(Hummingbird.TestFramework.Automation.TestCase)">
            <summary>
            This method should be implemented by sub classes by storing data to adapted place: Excel, CSV or SQL Database.
            </summary>
            <param name="testCase"></param>
            <exception cref="T:System.InvalidOperationException">You are using a relative path but the project has not yet saved. Please save the project before using relative path.</exception>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExcelDataStorage.FileName">
            <summary>
            Gets or sets the name of the Excel file where the data will be stored.
            </summary>
            <value>
            The name of the file, either relative path or absolute or UNC path
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExcelDataStorage.SheetName">
            <summary>
            Gets or sets the Worksheet name where the data will be written.
            </summary>
            <value>
            The name of the sheet.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExcelDataStorage.ExistingFileBehavior">
            <summary>
            Gets or sets the behavior to handling DataStorage when the target file exists.
            </summary>
            <value>
            The existing file behavior.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ExistingFileBehavior">
            <summary>
            The behavior or the data storage while handling a file to write but that file does alrealy exist.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ExistingFileBehavior.Overwrite">
            <summary>
            Overwrite the data of the given worksheet but keeps data in other part of an spreedsheet.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ExistingFileBehavior.Replace">
            <summary>
            The existing will be deleted and be replaced by the current one.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ExtractPropertyPair">
            <summary>
            Extract Property pair indicates where to find the value and transfer the value to a variable
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ExtractPropertyPair.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A clone of the current <see cref="T:Hummingbird.TestFramework.Automation.ExtractPropertyPair"/> instance.</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PropertyName">
            <summary>
            <para>Gets or sets the Name of the property from the selected Test Step.</para>
            <list>
            <item>If <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PropertyName"/> is <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.RequestText"/> or <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.ResponseText"/>, you must Select <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PathType"/> and assign <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.Path"/> with either <see cref="F:Hummingbird.TestFramework.Automation.PropertyPathTypes.XPath"/> or <see cref="F:Hummingbird.TestFramework.Automation.PropertyPathTypes.JsonPath"/></item>
            <item>If <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PropertyName"/> is <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.RequestObject"/> or <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.ResponseObject"/>, The  <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PathType"/> will be set to <see cref="F:Hummingbird.TestFramework.Automation.PropertyPathTypes.ObjectPath"/>, you must assign <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.Path"/> with an ObjectPath</item>
            <item>Otherwise <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PathType"/> and <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.Path"/> should be used.</item>
            </list>
            </summary>
            <value>
            The source property.
            </value>
        </member>
        <member name="E:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PropertyChanged">
            <summary>
            Occurs when the property value has changed.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PathType">
            <summary>
            <para>Gets or sets the Type of PropertyPath.</para>
            <list>
            <item>If the <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PropertyName"/> is <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.RequestText"/> or <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.ResponseText"/>, you must Select <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PathType"/> and assign <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.Path"/> with either <see cref="F:Hummingbird.TestFramework.Automation.PropertyPathTypes.XPath"/> or <see cref="F:Hummingbird.TestFramework.Automation.PropertyPathTypes.JsonPath"/></item>
            <item>If the <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PropertyName"/> is <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.RequestObject"/> or <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.ResponseObject"/>, The  <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PathType"/> will be set to <see cref="F:Hummingbird.TestFramework.Automation.PropertyPathTypes.ObjectPath"/>, you must assign <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.Path"/> with an ObjectPath</item>
            <item>Otherwise <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PathType"/> and <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.Path"/> should be used.</item>
            </list>
            </summary>
            <value>
            The type of the path.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.Path">
            <summary>
            <para>Gets or sets the expression indicated by <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PathType"/> how to retrieve value from the <see cref="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.PropertyName"/></para>
            <list type="bullet">
            <item><para>XPath</para></item>
            <item><para>ObjectPath</para></item>
            <item><para>JsonPath</para></item>
            </list>
            </summary>
            <value>
            The property path.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.VariableName">
            <summary>
            Gets or sets the name of the variable to assign the value. If the variable of that value does not exist, it will be created automatically.
            </summary>
            <value>
            The name of the variable.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExtractPropertyPair.CurrentValue">
            <summary>
            Gets or sets the Value obtained from the current pair. the value is shown for information.
            </summary>
            <value>
            An <see cref="T:System.String"/> value that represents CurrentValue of the current object
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ExtractPropertyTestStep">
            <summary>
            Extract Property Test Step is used to extract values from Request or Response
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestStepBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ExtractPropertyTestStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.ExtractPropertyTestStep"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExtractPropertyTestStep.VariableLevel">
            <summary>
            Gets or sets the level of variable generated from the current test step.
            </summary>
            <value>
            The variable level.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExtractPropertyTestStep.SourceStepId">
            <summary>
            Gets or sets the unique identifier of the Test Step where the property should be retrieved.
            </summary>
            <value>
            The step identifier.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ExtractPropertyTestStep.ExtractPropertyPairs">
            <summary>
            Gets the extract property pairs which retrieves a value from indicated location and assign the value to a variable.
            </summary>
            <value>
            The extract property pairs.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ExtractPropertyTestStep.Run">
            <summary>
            Runs this instance. Do not implement StartTime, Duration. Write information in the <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.Information" /> field, it will be shown in the log automatically.
            </summary>
            <returns>
            A Message object contains the Request/Response, or <see langword="null" /> if the test step does not send or receive messages
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ExtractPropertyTestStep.Evaluate(Hummingbird.TestFramework.Automation.ExtractPropertyPair,Hummingbird.TestFramework.Automation.AbstractTestItem,System.Boolean@)">
            <summary>
            Evaluates the specified <see cref="T:Hummingbird.TestFramework.Automation.ExtractPropertyPair" /> with the given <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem" />
            </summary>
            <param name="pair">The <see cref="T:Hummingbird.TestFramework.Automation.ExtractPropertyPair" /> object specifies how to extract data.</param>
            <param name="item">The <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem" /> object specifies where to extract data</param>
            <param name="hasError">if set to <c>true</c> the evaluation is failed.</param>
            <returns>The extracted value from the given condition. If <paramref name="hasError"/> is true, the error message</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.FunctionalConditions.AbstractCondition">
            <summary>
            The abstract class of all Functional conditions.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.AbstractCondition.Evaluate(System.Int64,Hummingbird.TestFramework.Automation.TestStepBase,System.Collections.Generic.List{Hummingbird.TestFramework.Variable},Hummingbird.TestFramework.Configuration.Profile)">
            <summary>
            Evaluates if the condition is the specified thread identifier.
            </summary>
            <param name="threadId">The thread ID who wants to evaluate the current functional condition.</param>
            <param name="testStep">The test step of which this condition belongs</param>
            <param name="context">The context.</param>
            <param name="profile">The profile.</param>
            <returns>
            True of the evaluation is passed, False if the evaluation fails
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.FunctionalConditions.AbstractExpression">
            <summary>
            Base class of the Expressions that used in <see cref="T:Hummingbird.TestFramework.Automation.FunctionalConditions.MessageQueueCondition"/>. Users can use a <see cref="T:Hummingbird.TestFramework.Automation.FunctionalConditions.SimpleExpression"/> to describe a simple expression filter, or to use <see cref="T:Hummingbird.TestFramework.Automation.FunctionalConditions.ComplexExpression"/> to do more composed complex expressions
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.AbstractExpression.Evaluate(System.Int64,Hummingbird.TestFramework.Messaging.Message)">
            <summary>
            Evaluates the Assertion.
            </summary>
            <param name="ThreadId">The ID of the current thread.</param>
            <param name="message">The <see cref="T:Hummingbird.TestFramework.Messaging.Message"/> object containing the Request and Response information.</param>
            <returns><see langword="true"/>, If a condition is satisfied, otherwise <see langword="false"/> </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.AbstractExpression.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="indentLevel">The indent level.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.FunctionalConditions.ComplexExpression">
            <summary>
            The complex expression holds 2 <see cref="T:Hummingbird.TestFramework.Automation.FunctionalConditions.AbstractExpression"/> and a <see cref="T:Hummingbird.TestFramework.Automation.Operators.LogicalOperator"/>
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.FunctionalConditions.AbstractExpression" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.ComplexExpression.Left">
            <summary>
            Gets or sets the expression on the left side of the logical operator
            </summary>
            <value>
            The left side expression
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.ComplexExpression.Operator">
            <summary>
            Gets or sets the operator describes the logical relation of the <see cref="P:Hummingbird.TestFramework.Automation.FunctionalConditions.ComplexExpression.Left"/> and <see cref="P:Hummingbird.TestFramework.Automation.FunctionalConditions.ComplexExpression.Right"/> side expresions
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.ComplexExpression.Right">
            <summary>
            Gets or sets the expression on the right side of the logical operator
            </summary>
            <value>
            The right side expression
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.ComplexExpression.Evaluate(System.Int64,Hummingbird.TestFramework.Messaging.Message)">
            <summary>
            Evaluates the Assertion.
            </summary>
            <param name="ThreadId">The ID of the current thread.</param>
            <param name="message">The <see cref="T:Hummingbird.TestFramework.Messaging.Message" /> object containing the Request and Response information.</param>
            <returns>
              <see langword="true" />, If a condition is satisfied, otherwise <see langword="false" />
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.ComplexExpression.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="indentLevel">The indent level.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.ComplexExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.FunctionalConditions.MessageQueueCondition">
            <summary>
            Verifies if a given message is present in the <see cref="T:Hummingbird.TestFramework.Messaging.MessageQueue"/>
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.FunctionalConditions.AbstractCondition" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.MessageQueueCondition.Operator">
            <summary>
            Gets or sets the conditional operator, including <see cref="F:Hummingbird.TestFramework.Automation.Operators.ConditionalOperator.Exists"/> or <see cref="F:Hummingbird.TestFramework.Automation.Operators.ConditionalOperator.NotExsits"/>
            </summary>
            <value>
            The <see cref="T:Hummingbird.TestFramework.Automation.Operators.ConditionalOperator"/> object
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.MessageQueueCondition.Expression">
            <summary>
            Gets or sets an expression served as filter. 
            </summary>
            <value>
            The filter.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.MessageQueueCondition.Evaluate(System.Int64,Hummingbird.TestFramework.Automation.TestStepBase,System.Collections.Generic.List{Hummingbird.TestFramework.Variable},Hummingbird.TestFramework.Configuration.Profile)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.MessageQueueCondition.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.FunctionalConditions.MessagePart">
            <summary>
            Defines the part of <see cref="T:Hummingbird.TestFramework.Messaging.Message"/> is used to retrieve information for condition evaluation. the usage of this class is not the same as <see cref="T:Hummingbird.TestFramework.Messaging.MessagePart"/>
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.FunctionalConditions.MessagePart.Status">
            <summary>
            Retrieves value from <see cref="P:Hummingbird.TestFramework.Messaging.Message.Status"/> for condition evaluation.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.FunctionalConditions.MessagePart.Direction">
            <summary>
            Retrieves value from  <see cref="P:Hummingbird.TestFramework.Messaging.Message.Direction"/> for condition evaluation.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.FunctionalConditions.MessagePart.Title">
            <summary>
            Retrieves value from  <see cref="P:Hummingbird.TestFramework.Messaging.Message.Title"/> for condition evaluation.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.FunctionalConditions.MessagePart.RequestText">
            <summary>
            Retrieves value from  <see cref="P:Hummingbird.TestFramework.Messaging.Message.RequestText"/> for condition evaluation.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.FunctionalConditions.MessagePart.ResponseText">
            <summary>
            Retrieves value from  <see cref="P:Hummingbird.TestFramework.Messaging.Message.ResponseText"/> for condition evaluation.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.SimpleExpression.MessagePart">
            <summary>
            Gets or sets in which part of the <see cref="T:Hummingbird.TestFramework.Messaging.Message"/> where the value should be extracted.
            </summary>
            <value>
            The message part.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.SimpleExpression.Operator">
            <summary>
            Gets or sets the <see cref="T:Hummingbird.TestFramework.Automation.Operators.RelationalOperator"/>
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.SimpleExpression.Value">
            <summary>
            Gets or sets the expected value.
            </summary>
            <value>
            The expected value.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.SimpleExpression.Evaluate(System.Int64,Hummingbird.TestFramework.Messaging.Message)">
            <summary>
            Evaluates the Assertion.
            </summary>
            <param name="ThreadId">The ID of the current thread.</param>
            <param name="message">The <see cref="T:Hummingbird.TestFramework.Messaging.Message" /> object containing the Request and Response information.</param>
            <returns></returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.SimpleExpression.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="indentLevel">The indent level.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.SimpleExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.FunctionalConditions.TestStepResultCondition">
            <summary>
            Verifies the status of a given test step
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.FunctionalConditions.AbstractCondition" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.TestStepResultCondition.StepId">
            <summary>
            Gets or sets the identifier of the test step
            </summary>
            <value>
            A <see cref="T:System.Guid"/> value represents a test step.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.TestStepResultCondition.ExpectedStatus">
            <summary>
            Gets or sets the expected status of the given test step
            </summary>
            <value>
            a <see cref="T:Hummingbird.TestFramework.TestStatus"/> object represents the expected status of the given test step
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.TestStepResultCondition.Evaluate(System.Int64,Hummingbird.TestFramework.Automation.TestStepBase,System.Collections.Generic.List{Hummingbird.TestFramework.Variable},Hummingbird.TestFramework.Configuration.Profile)">
            <inheritdoc/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.FunctionalConditions.VariableValueCondition">
            <summary>
            Verifies if a variable's value is expected.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.FunctionalConditions.AbstractCondition" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.VariableValueCondition.Name">
            <summary>
            Gets or sets the name of the variable
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.VariableValueCondition.Operator">
            <summary>
            Gets or sets the relational operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.VariableValueCondition.ExpectedValue">
            <summary>
            Gets or sets the value of the variable to compare
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.FunctionalConditions.VariableValueCondition.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether the variable value compare is case sensitive.
            </summary>
            <value>
              <c>true</c> if this instance is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.VariableValueCondition.Evaluate(System.Int64,Hummingbird.TestFramework.Automation.TestStepBase,System.Collections.Generic.List{Hummingbird.TestFramework.Variable},Hummingbird.TestFramework.Configuration.Profile)">
            <summary>
            Evaluates if the condition is the specified thread identifier.
            </summary>
            <param name="threadId">The thread ID who wants to evaluate the current functional condition.</param>
            <param name="testStep">The test step of which this condition belongs</param>
            <param name="context">The context.</param>
            <param name="profile">The profile.</param>
            <returns>
            True of the evaluation is passed, False if the evaluation fails
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.FunctionalConditions.VariableValueCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.LoadTestLogLevels">
            <summary>
            The enumeration value indicates the level of log details in a performance test report.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.LoadTestLogLevels.ErrorMessages">
            <summary>
            Error messages should be logged
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.LoadTestLogLevels.AllMessages">
            <summary>
            All messages should be logged, including successful and failed transactions.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.LoadTestLogLevels.None">
            <summary>
            Do not log detailed messages during performance test.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.OnErrorBehavior">
            <summary>
            The behavior of the failed Test Step or Test Case
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.OnErrorBehavior.ResumeNext">
            <summary>
            The current Test Step or Test Case will be marked as Failed, but the Automation Engine will continue to execute the following Test Step or Test Case
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.OnErrorBehavior.StopCurrentTest">
            <summary>
            The current Test Step will be marked as Failed, All Test Steps after the current step will be ignored. Automation engine will continue to execute the following test case.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.OnErrorBehavior.StopTestSuite">
            <summary>
            Stop the execution. All non-executed test cases will be ignored.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.DotNetScriptTestStepBase">
            <summary>
            Base class of C# Script Test Step and VB.NET Script Test Step.
            </summary>
            <remarks>
            This test step does not support variable token replacement.
            </remarks>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.DotNetScriptTestStepBase.vbProvider">
            <summary>
            The Visual Basic CodeDomProvider provider
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.DotNetScriptTestStepBase.csProvider">
            <summary>
            The C# CodeDomProvider
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DotNetScriptTestStepBase.DotNetLanguage">
            <summary>
            Gets or sets the language used, default values is "C#".
            </summary>
            <value>
            The .Net language.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DotNetScriptTestStepBase.GetCodeDomProvider(System.String,System.CodeDom.Compiler.CompilerParameters@)">
            <summary>
            Gets the .Net Compiler for given language.
            </summary>
            <param name="language">The .NET Language: C# or VB</param>
            <param name="parameters">The compilerParameters parameters.</param>
            <returns>A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"/> object that contains the Code document object provider, it is either a C# provider or a VB.NET provider</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.DotNetScriptTestStepBase.Script">
            <summary>
            Gets or sets the C# Script to run
            </summary>
            <value>
            The script to run. The script can use all the features of Test Framework.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DotNetScriptTestStepBase.Run">
            <summary>
            Runs this instance.
            </summary>
            <exception cref="T:System.Exception">There is no entry point defined to your test step, The class must derives from Hummingbird.TestFramework.Automation.ScriptTestStepBase</exception>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DotNetScriptTestStepBase.Compile(System.String,System.Collections.Generic.List{System.CodeDom.Compiler.CompilerError}@)">
            <summary>
            Compiles the specified code.
            </summary>
            <param name="code">The code.</param>
            <param name="errors">The errors.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicates if the compilation is passed. <see langword="true"/>: compilation is passed, otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.DotNetScriptTestStepBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.PropertyPathTypes">
            <summary>
            Type of the path indicates how to retrieve data from a TestStep
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.PropertyPathTypes.PropertyName">
            <summary>
            Gets the value directly from the Property by given name, if the property is not string, the <see cref="M:System.Object.ToString"/> will be called.
            </summary>
            <remarks> To avoid ambiguous for numeric values, the value will be converted to international standard format regardless the current culture settings.
            For example. The DateTime will be in ISO936 DateTime format, the decimal point will always be a point.
            </remarks>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.PropertyPathTypes.XPath">
            <summary>
            This option is available only if The Property is <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.RequestText"/> or <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.ResponseText"/>, considering the value is an XML document.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.PropertyPathTypes.ObjectPath">
            <summary>
            This options is available only if the Property is <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.RequestObject"/> or <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.ResponseObject"/>, object path can be generated via standard ObjectEditor
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.PropertyPathTypes.JsonPath">
            <summary>
            This option is available only if The Property is <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.RequestText"/> or <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.ResponseText"/>, considering the value is an JSON document.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.PerformanceThreshold">
            <summary>
            Indicates a threshold in order to check if an automated test meets the quality requirement
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.PerformanceThreshold.ThresholdType">
            <summary>
            Gets or sets the Type of the quality gate.
            </summary>
            <value>
            The type of the quality gate.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.PerformanceThreshold.Value">
            <summary>
            Gets or sets the threshold of the indicated quality gate.
            </summary>
            <value>
            The threshold value. For time based values, the unit is second.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.PerformanceThreshold.ServiceId">
            <summary>
            Gets or sets the Service ID if the Quality Gate is service based.
            </summary>
            <value>
            The service identifier. if the quality gate is iteration based, this property will be ignored.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.PerformanceThreshold.ServiceName">
            <summary>
            Gets the name of the service from <see cref="P:Hummingbird.TestFramework.Automation.PerformanceThreshold.ServiceId"/>
            </summary>
            <value>
            The name of the service.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.PerformanceThreshold.TestStatus">
            <summary>
            Gets or sets TestStatus.
            </summary>
            <value>
            An <see cref="P:Hummingbird.TestFramework.Automation.PerformanceThreshold.TestStatus"/> value that represents TestStatus of the current object
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.PerformanceThreshold.OnPropertyChanged(System.String)">
            <summary>
            Called when property value has changed.
            </summary>
            <param name="PropertyName">Name of the property.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.PerformanceThreshold.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.PerformanceThreshold.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="E:Hummingbird.TestFramework.Automation.PerformanceThreshold.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.TestStepGroup">
            <summary>
            This class represents a group of test steps that can be included in various type of test steps, including <see cref="T:Hummingbird.TestFramework.Automation.ConditionalTestStep"/>
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestStepGroup.DeleteItem(System.Object)">
            <summary>
            Deletes an sub item from the current scope. for Test Case, the item is test Step, For Test Suite, the item is test case, ...
            </summary>
            <param name="item">The item to be deleted. it could be one of the <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem" /> or one of the <see cref="T:Hummingbird.TestFramework.Automation.LoadTestCase" /></param>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepGroup.Steps">
            <summary>
            Gets or sets the test steps (<see cref="T:Hummingbird.TestFramework.Automation.TestStepBase"/>) included in this TestStepGroup
            </summary>
            <value>
            The steps.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepGroup.Parent">
            <summary>
            Gets the parent of this TestStepGroup;
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestStepGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.TestStepGroup"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ThresholdTypes">
            <summary>
            The types of quality gates for an automated test.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ThresholdTypes.ServiceAverageResponseTime">
            <summary>
            The average response time of an individual service. Accepted threshold is a double value in number of seconds.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ThresholdTypes.ServicePassrate">
            <summary>
            The pass-rate of an individual service. Accepted threshold is a double value between 0 to 100.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ThresholdTypes.ServiceMaxResponseTime">
            <summary>
            The maximum response time of an individual service during the test.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ThresholdTypes.IterationAverageCycleTime">
            <summary>
            The average cycle time in number of seconds for the execution of an iteration (all test steps).
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ThresholdTypes.IterationPassrate">
            <summary>
            The pass-rate of iterations. Accepted threshold is a double value between 0 to 100
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ThresholdTypes.IterationMaxCycleTime">
            <summary>
            The maximum cycle time in number of seconds for the execution of an iteration (all test steps).
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport">
            <summary>
            This class represents the schema of the Report generated by the Automated Test. 
            </summary>
            <remarks>
            The report shows the test result and additional information for a whole <see cref="T:Hummingbird.TestFramework.Automation.AutomationProject"/>.
            Reports can be saved in XML format and be viewed by Hummingbird Report Viewer.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.DateGenerated">
            <summary>
            Gets or sets the date when the report is generated.
            </summary>
            <value>
            The date generated - it is set automatically
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.LoadFrom(Hummingbird.TestFramework.Automation.AutomationProject)">
            <summary>
            Generates a Test Report from an <see cref="T:Hummingbird.TestFramework.Automation.AutomationProject"/>
            </summary>
            <param name="project">The automation project to use for report generation</param>
            <returns>A functional test report object, It can be serialized in XML format.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.LoadFromAsync(Hummingbird.TestFramework.Automation.AutomationProject)">
            <summary>
            Generates a Test Report from an <see cref="T:Hummingbird.TestFramework.Automation.AutomationProject"/> asynchronously
            </summary>
            <param name="project">The automation project to use for report generation</param>
            <returns>A functional test report object, It can be serialized in XML format.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.Export(System.String)">
            <summary>
            Saves the current instance to the file.
            </summary>
            <param name="filename">The filename to save (including the extension .APR)</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.ExportJUnit(System.String)">
            <summary>
            Exports the test report compatible with Apache Ant JUnit report
            </summary>
            <param name="filename">The filename of the report name to be generated, Default name is TEST-Report.xml</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.ExportNUnit(System.String)">
            <summary>
            Exports the test report compatible with NUnit-3 test result
            </summary>
            <param name="filename">The filename of the report name to be generated, Default name is TEST-Report.xml</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.GetProperties(Hummingbird.TestFramework.Automation.Report.ReportItem)">
            <summary>
            Gets the properties of a ReportItem. Proprieties are filled with <see cref="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Variables" />
            </summary>
            <param name="item">The item.</param>
            <returns>A list of properties used in JUnit report</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.Import(System.String)">
            <summary>
            Imports a Automated Test Report from a file (*.APR).
            </summary>
            <param name="filename">The filename.</param>
            <returns>An <see cref="T:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport"/> object represents a test report from the given filename.</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.TestSuites">
            <summary>
            Gets the total number of test suites.
            </summary>
            <value>
            The test suites.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.TestsPassed">
            <summary>
            Gets the total number of test cases passed.
            </summary>
            <value>
            The <see cref="T:System.Int32"/> value represents the number of test cases passed.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.TotalTests">
            <summary>
            Gets the total number of test cases and test instances from the current test
            </summary>
            <value>
            The total tests.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.TestsWarning">
            <summary>
            Gets the total number of test cases executed and the status is Warning.
            </summary>
            <value>
            The <see cref="T:System.Int32"/> value represents the number of test cases where its status is Warning.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.TestsFailed">
            <summary>
            Gets the total number of test cases failed.
            </summary>
            <value>
            The <see cref="T:System.Int32"/> value represents the number of test cases failed.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.AutomatedTestReport.Passrate">
            <summary>
            Gets the string representation of Pass rate (Passed test / Total tests).
            </summary>
            <value>
            The pass rate string representation, for example 50%
            </value>
            <remarks>
            This property hides <see cref="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Passrate"/> who is based on sub-level items. This property special for project is based on Test Cases.
            </remarks>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite">
            <summary>
            JUnit Report testsuite element.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite.properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite.testcase">
            <summary>
            Gets or sets the testcase.
            </summary>
            <value>
            The testcase element of the JUnit XML report
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite.systemout">
            <summary>
            Gets or sets the systemout.
            </summary>
            <value>
            The systemout.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite.systemerr">
            <summary>
            Gets or sets the system-err element.
            </summary>
            <value>
            The system-err of the JUnit element.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite.timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
            <value>
            The timestamp.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite.hostname">
            <summary>
            Gets or sets the hostname.
            </summary>
            <value>
            The hostname.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite.tests">
            <summary>
            Gets or sets the tests.
            </summary>
            <value>
            The tests.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite.failures">
            <summary>
            Gets or sets the failures.
            </summary>
            <value>
            The failures.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite.errors">
            <summary>
            Gets or sets the errors.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite.time">
            <summary>
            Gets or sets the time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteProperty">
            <summary>
            The testsuite element in JUnit XML Report
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteProperty.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteProperty.value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcase">
            <summary>
            Get of sets the testcase element of JUnit XML Report
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcase.Item">
            <summary>
            Gets or sets the sub element of the testcase, JUnit XML Report
            The element can be either <see cref="T:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcaseError"/> or <see cref="T:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcaseFailure"/>
            </summary>
            <value>
            The item.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcase.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcase.classname">
            <summary>
            Gets or sets the classname.
            </summary>
            <value>
            The classname.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcase.time">
            <summary>
            Gets or sets the time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcaseError">
            <summary>
            error element inside the testcase element
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcaseError.message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcaseError.type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcaseError.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcaseFailure">
            <summary>
            failure element inside a testcase element
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcaseFailure.message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcaseFailure.type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuiteTestcaseFailure.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.JUnit.testsuites">
            <summary>
            testsuites element of a JUnit XML report. this element is the root element of a JUnit XML Report.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.Report.JUnit.testsuites.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.Report.JUnit.testsuites"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuites.testsuite">
            <summary>
            Gets or sets the testsuite.
            </summary>
            <value>
            The testsuite.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.JUnit.testsuitesTestsuite">
            <summary>
            testsuite element inside the testsuites element.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.Report.JUnit.testsuite" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuitesTestsuite.package">
            <summary>
            Gets or sets the package.
            </summary>
            <value>
            The package.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.JUnit.testsuitesTestsuite.id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.LoadTestReportItem">
            <summary>
            An report item for Load Test case (including Basic load test, stress test, spike test and other kind of tests.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.Report.ReportItem" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.LoadTestReportItem.LoadGraph">
            <summary>
            Gets or sets the theoretical load graph according to test parameters.
            </summary>
            <value>
            The load graph.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.LoadTestReportItem.ActualLoadGraph">
            <summary>
            Gets or sets the actual load graph according to test results;
            </summary>
            <value>
            The actual load graph.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.LoadTestReportItem.CPUUsage">
            <summary>
            Gets or sets the cpu usage during the test
            </summary>
            <value>
            The cpu usage.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.LoadTestReportItem.MemoryUsage">
            <summary>
            Gets or sets the memory usage during the test
            </summary>
            <value>
            The memory usage.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.LoadTestReportItem.IterationPassRate">
            <summary>
            Gets or sets the iteration pass rate during the last execution
            </summary>
            <value>
            The iteration pass rate.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.LoadTestReportItem.IterationExecutionTime">
            <summary>
            Gets or sets the iteration execution time during the last execution.
            </summary>
            <value>
            The iteration cycle time.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.LoadTestReportItem.ServiceNames">
            <summary>
            Gets or sets the service Id to Name mapping
            </summary>
            <value>
            An dictionary contain Key as ServiceMetadataId and Value as the name.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.LoadTestReportItem.ServicePassrate">
            <summary>
            Gets or sets the pass rate operation by operation during the last execution. Only request operations are measured.
            </summary>
            <value>
            The service pass rate operation by operation
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.LoadTestReportItem.ServiceResponseTime">
            <summary>
            Gets or sets the service response time.
            </summary>
            <value>
            The service response time.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.LoadTestReportItem.RawMessages">
            <summary>
            Gets or sets the raw messages that is used for calculation.
            </summary>
            <value>
            The raw messages.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.LoadTestReportItem.RawIterationCycleTime">
            <summary>
            Gets or sets the raw cycle time for every iterations executed.
            </summary>
            <value>
            The raw iteration cycle time.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.MessageReportItem">
            <summary>
            The report item based on the Messaging System to provided original data for performance test report
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.MessageReportItem.MetadataId">
            <summary>
            Gets or sets the service identifier, that correspond to <see cref="P:Hummingbird.TestFramework.Identifier.Id"/>
            </summary>
            <value>
            The service identifier.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.MessageReportItem.Timestamp">
            <summary>
            Gets or sets the time stamp when this message has been counted.
            </summary>
            <value>
            The time stamp in <see cref="T:System.DateTime"/> format
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.MessageReportItem.IsError">
            <summary>
            Gets or sets a value indicating whether this request contains error, calculated from <see cref="P:Hummingbird.TestFramework.Messaging.Message.Status"/>
            </summary>
            <value>
              <c>true</c> if this instance is error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.MessageReportItem.ResponseTime">
            <summary>
            Gets or sets the response time in number of seconds of the request
            </summary>
            <value>
            The response time in <see cref="T:System.Double"/> format, in number of seconds.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.MessageReportItem.Iteration">
            <summary>
            Gets or sets the iteration number where this message has been sent.
            </summary>
            <value>
            The iteration number.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.NUnit.resultType">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.environment">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.cultureinfo">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.testsuite">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.name">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.total">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.errors">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.failures">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.inconclusive">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.notrun">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.ignored">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.skipped">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.invalid">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.date">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultType.time">
            <remarks/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.NUnit.environmentType">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.environmentType.nunitversion">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.environmentType.clrversion">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.environmentType.osversion">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.environmentType.platform">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.environmentType.cwd">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.environmentType.machinename">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.environmentType.user">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.environmentType.userdomain">
            <remarks/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.NUnit.testcaseType">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testcaseType.categories">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testcaseType.properties">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testcaseType.Item">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testcaseType.name">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testcaseType.description">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testcaseType.success">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testcaseType.time">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testcaseType.executed">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testcaseType.asserts">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testcaseType.result">
            <remarks/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.NUnit.categoryType">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.categoryType.name">
            <remarks/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.NUnit.propertyType">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.propertyType.name">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.propertyType.value">
            <remarks/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.NUnit.failureType">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.failureType.message">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.failureType.stacktrace">
            <remarks/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.NUnit.reasonType">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.reasonType.message">
            <remarks/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.NUnit.resultsType">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.resultsType.Items">
            <remarks/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType.categories">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType.properties">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType.Item">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType.results">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType.type">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType.name">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType.description">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType.success">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType.time">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType.executed">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType.asserts">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.testsuiteType.result">
            <remarks/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.NUnit.cultureinfoType">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.cultureinfoType.currentculture">
            <remarks/>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.NUnit.cultureinfoType.currentuiculture">
            <remarks/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.ReportItem">
            <summary>
            An Item of an functional report
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Id">
            <summary>
            Gets or sets The ID represents the ID of <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem"/>
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Name">
            <summary>
            Gets or sets the Name represents the Name of <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem"/>
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Passrate">
            <summary>
            Gets the pass rate (percentage of passed items v.s all items
            </summary>
            <value>
            The pass rate between 0 and 1;
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.ItemType">
            <summary>
            Gets or sets the type of the current ReportItem.
            </summary>
            <value>
            The type of the item.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Status">
            <summary>
            Gets or sets the Status represents the final <see cref="T:Hummingbird.TestFramework.TestStatus"/> of an <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem"/>
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.StartTime">
            <summary>
            Gets or sets the Date when the current <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem"/> starts to run
            </summary>
            <value>
            The start date.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Items">
            <summary>
            Gets or sets the sub items of the current <see cref="T:Hummingbird.TestFramework.Automation.Report.ReportItem"/>
            </summary>
            <value>
            The list of sub items.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Tag">
            <summary>
            Gets or sets the Tag of the ReportItem, it can be anything
            </summary>
            <value>
            The Tag.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Variables">
            <summary>
            Gets or sets the variables.
            </summary>
            <value>
            The variables.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.DisplayMessage">
            <summary>
            Gets or sets the display message.
            </summary>
            <value>
            The display message.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Information">
            <summary>
            Gets or sets the information.
            </summary>
            <value>
            The information.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.RequestText">
            <summary>
            Gets or sets the request text.
            </summary>
            <value>
            The request text.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.ResponseText">
            <summary>
            Gets or sets the response text.
            </summary>
            <value>
            The response text.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.Duration">
            <summary>
            Gets the duration for executing the current item
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.DurationTicks">
            <summary>
            Gets or sets the duration in ticks
            </summary>
            <value>
            The duration ticks.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.Report.ReportItem.HostName">
            <summary>
            Gets or sets the host name where is test has been executed.
            This value is reserved to be compatible with xUnit framework, but not yet used in Hummingbird Test Framework
            </summary>
            <value>
            The name of the host.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Report.ReportItemType">
            <summary>
            The Type of the automation report node
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Report.ReportItemType.TestSuite">
            <summary>
            Represents the result Test Suite
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Report.ReportItemType.TestCase">
            <summary>
            Represents the result of a TestCase
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Report.ReportItemType.TestInstance">
            <summary>
            Represents the result of a Test Instance within a <see cref="F:Hummingbird.TestFramework.Automation.Report.ReportItemType.DataDrivenTestCase"/>
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Report.ReportItemType.TestStep">
            <summary>
            Represents the result of a Test Step
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Report.ReportItemType.Other">
            <summary>
            Represents other things than above.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Report.ReportItemType.Assertion">
            <summary>
            Represents an Assertion
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Report.ReportItemType.DataDrivenTestCase">
            <summary>
            Represents a DataDrivenTestCase
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Report.ReportItemType.LoadTestCase">
            <summary>
            Represents a Load test case
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ScriptTestStepBase">
            <summary>
            This abstract class defines the class and signature should be used in C# script test step or VB.NET script test step.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ScriptTestStepBase.Execute(Hummingbird.TestFramework.Automation.TestStepBase)">
            <summary>
            Executes the specified test step.
            </summary>
            <param name="testStep">The test step object.</param>
            <returns>An <see cref="T:Hummingbird.TestFramework.TestStatus"/> enumeration represents the result of the execution.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.SpreadsheetRangeType">
            <summary>
            Type of the Range
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.SpreadsheetRangeType.NamedRange">
            <summary>
            Named Range, specifies a name that refers to the range of cells.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.SpreadsheetRangeType.Table">
            <summary>
            Table, specifies the name of a Table
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.SpreadsheetRangeType.Cells">
            <summary>
            Range, specifies the range between of two cells. for example: "A1:C3" returns all 9 cells from A1 to C3.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.SqlResultType">
            <summary>
            Type of the SQL Query execution
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.SqlResultType.Nothing">
            <summary>
            The SQL Query returns nothing.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.SqlResultType.ScalarValue">
            <summary>
            The SQL Query returns a scalar value. for example the Identifier of the inserted rows or the number of deleted lines.
            If the query returns a data table, this method returns only the first column of the first row.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.SqlResultType.Query">
            <summary>
            The SQL Query returns a Data table and stored in a <see cref="T:System.String"/> in CSV Format. For example the Select SQL command
            </summary>
            <remarks>
            Test Framework uses your current settings of CSVSeperator from <see cref="P:Hummingbird.TestFramework.Configuration.Settings.CSVSeparator"/>, DateTime, Decimal and other numeric values are represented as the current culture/language settings.
            </remarks>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.SqlQueryTestStep">
            <summary>
            Runs an SQL Query. This test step is available only in professional version.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.AbstractSqlTestStep" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.SqlQueryTestStep.Query">
            <summary>
            Gets or sets the SQL Query that will be executed.
            </summary>
            <value>
            The query.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.SqlQueryTestStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.SqlQueryTestStep"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.SqlQueryTestStep.Run">
            <summary>
            Runs this instance.
            </summary>
            <returns>Nothing</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.StartWindowsServiceTestStep">
            <summary>
            This test step starts a windows service on the target machine.
            </summary>
            <remarks>
            This action uses Windows Management Instrument interface to control service start or stop.
            To ensure the test framework can start or stop the windows service, the running account must have sufficient right.
            The action can not start or stop services protected by the operating system.
            Use this action to start or stop the application under test, do not start or stop services provided by operating system itself.
            </remarks>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestStepBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.StartWindowsServiceTestStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.StartWindowsServiceTestStep"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StartWindowsServiceTestStep.ServiceName">
            <summary>
            Gets or sets the name of the windows service.
            </summary>
            <value>
            The name of the service.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StartWindowsServiceTestStep.MachineName">
            <summary>
            Gets or sets the name of the machine.
            </summary>
            <value>
            The name of the machine where to start or stop the service.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StartWindowsServiceTestStep.Action">
            <summary>
            Gets or sets the action to proceed, either Start or Stop
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StartWindowsServiceTestStep.Timeout">
            <summary>
            Gets or sets the Timeout in seconds to wait for the service to start or to stop.
            </summary>
            <value>
            The timeout
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StartWindowsServiceTestStep.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StartWindowsServiceTestStep.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StartWindowsServiceTestStep.EncPassword">
            <summary>
            Gets or sets the enc password.
            </summary>
            <value>
            The enc password.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.StartWindowsServiceTestStep.Run">
            <summary>
            Runs this instance.
            </summary>
            <exception cref="T:System.Exception">
            Timeout reached but the service is not in Running state
            or
            Timeout reached but the service is not in Stopped state
            </exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep">
            <summary>
            Test step that start's a Service simulation server such as HTTP Server or SOAP Server
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestStepBase" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep.ServiceStrongName">
            <summary>
            Gets or sets the unique identifier of the service stub.
            </summary>
            <value>
            The service stub identifier.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep.Action">
            <summary>
            Gets or sets the Action to control the current Service Simulation test step
            </summary>
            <value>
            <see cref="F:Hummingbird.TestFramework.ServiceControlActions.Start"/> or <see cref="F:Hummingbird.TestFramework.ServiceControlActions.Stop"/>
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep.UseDefaultParameters">
            <summary>
            Gets or sets a value indicating whether use the default parameters from test profile, For example the service ports.
            If the automation has no profile associated, then the current test profile will be used.
            </summary>
            <value>
              <c>true</c> if parameters from Profile will be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep.Parameters">
            <summary>
            Gets or sets the parameters used for the service.
            </summary>
            <value>
            The parameters to be used for the test. if <see cref="P:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep.UseDefaultParameters"/> is set to False, these parameters will be used.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep.ServiceName">
            <summary>
            Gets or sets the display name of the selected service stub.
            </summary>
            <value>
            The display name.
            </value>
            <remarks>
            When automation test is running on another machine without installed the virtualized server stub (for example 3rd party services), this name can help tester to prepare better the prerequisites.
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep.Run">
            <summary>
            Runs this test step to Start an service simulation
            </summary>
            <returns>Nothing (null object)</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep.RestoreParameters">
            <summary>
            Restores the parameters if <see cref="P:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep.UseDefaultParameters"/> is set to <see langword="true"/> after the service stopped.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.TestStepBase">
            <summary>
            Base class of Test Step in Automation context
            <para>When automation framework runs a test case, it calls Run() method and then calls Checkpoint() method to verify if the action is correct.</para>
            <para>When running test action in Run and Checkpoint, assign test result in TestResult property and leave detailed informations in Details property</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestStepBase.UpdateId">
            <summary>
            Generates a new Identifier of the current AbstractTestItem and all its sub items.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestStepBase.DeleteItem(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestStepBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.TestStepBase"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.Project">
            <summary>
            Gets the <see cref="T:Hummingbird.TestFramework.Automation.AutomationProject"/> object where this Test Step depends on.
            </summary>
            <value>
            The project object
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.Information">
            <summary>
            Detailed information for diagnostic, debug. 
            Do not call Information.Clear when running the test step, it will be automatically done within the base class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.InformationString">
            <summary>
            Gets the string representation of <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.Information"/>
            </summary>
            <value>
            The information string.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestStepBase.Run(System.Int64,Hummingbird.TestFramework.Automation.TestCase,System.Collections.Generic.List{Hummingbird.TestFramework.Variable},Hummingbird.TestFramework.Configuration.Profile)">
            <summary>
            Run current Test step, within the current TestCase.
            </summary>
            <param name="threadId">ThreadId is identify which thread runs the current Test Case / Test Step. This Id is used to isolate transactions and variables between different Test instance, if test cases are running in a multi-thread context</param>
            <param name="testCase">Reference to the current TestCase where the</param>
            <param name="context">The context.</param>
            <param name="profile">The profile for the current test step. </param>
            <returns>
            An Message object containing the current request, response and errors
            </returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.Assertions">
            <summary>
            Gets or sets the assertions related to the current test step
            </summary>
            <value>
            The assertions.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestStepBase.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when the deserialization is done.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.TestCase">
            <summary>
            Gets the referenced test case for this test step
            </summary>
            <value>
            The test case which this TestStep belongs to, the value is provided during text execution
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestStepBase.Run">
            <summary>
            Runs this instance. Do not implement StartTime, Duration. Write information in the <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.Information" /> field, it will be shown in the log automatically.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.RelatedMessage">
            <summary>
            Gets or sets a <see cref="T:Hummingbird.TestFramework.Messaging.Message"/> object related to the current test step.
            </summary>
            <value>
            The message can only be assigned within the Test Step, by the Run() function
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.RequestText">
            <summary>
            Gets the Request Text from the related message, if the related message is null or empty, the return value is null.
            </summary>
            <value>
            The request text.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.ResponseText">
            <summary>
            Gets the response text from the related message, if the related message is null the return value is null
            </summary>
            <value>
            The response text.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.RequestObject">
            <summary>
            Gets the request object.
            </summary>
            <value>
            The request object.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.ResponseObject">
            <summary>
            Gets the response object.
            </summary>
            <value>
            The response object.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.OnErrorBehavior">
            <summary>
            Gets or sets the behavior of Automation Engine when the current test case fails
            </summary>
            <value>
            The onErrorBehavior. see <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.OnErrorBehavior"/>
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.ThreadId">
            <summary>
            Gets the thread identifier.
            </summary>
            <value>
            The thread identifier.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestStepBase.Profile">
            <summary>
            Gets the profile.
            </summary>
            <value>
            The profile.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestStepBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestStepBase.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Operators.ConditionalOperator">
            <summary>
            A list of conditional operators.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.ConditionalOperator.Exists">
            <summary>
            An object exists 
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.ConditionalOperator.NotExsits">
            <summary>
            An object does not exist.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Operators.LogicalOperator">
            <summary>
            The logical operators for complex conditions
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.LogicalOperator.And">
            <summary>
            And operator, the left and right conditions must be True to get overall result True, otherwise, False
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.LogicalOperator.Or">
            <summary>
            Or operator, either left or right conditions be true to get overall result True, otherwise, False
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.LogicalOperator.Xor">
            <summary>
            Xor operator, left and right conditions must have different results to get overall result True, otherwise, False.
            this operator is equals to left != right
            
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.LogicalOperator.Nand">
            <summary>
            Negative-AND operator, the result is negative to AND operator
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.LogicalOperator.Nor">
            <summary>
            Negative-OR operator, the result is negative to OR operator
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.LogicalOperator.Xnor">
            <summary>
            Negative-XOR operator, the result is negative to XOR operator. this operator is equals to left = right
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.Operators.RelationalOperator">
            <summary>
            A set of relational operators which can be used to evaluate conditions
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.EqualsTo">
            <summary>
            A is equals To B
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.NotEqualsTo">
            <summary>
            A is not equals to B
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.GreaterThan">
            <summary>
            A is exclusively greater than B (A>B)
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.LessThan">
            <summary>
            A is exclusively less than B (A&lt;B)
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.GreaterEquals">
            <summary>
            A is greater than or equals to B (A>=B)
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.LessEquals">
            <summary>
            A is less than or equals to B (A&lt;=B)
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.StartsWith">
            <summary>
            The text A starts with text B
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.EndsWith">
            <summary>
            The text A ends with text B
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.Contains">
            <summary>
            The text A contains the text B (B is a part of A)
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.NotContains">
            <summary>
            The text A does not contain the text B (B is not a part of A)
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.NotStartsWith">
            <summary>
            The text A does not start with text B
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.NotEndsWith">
            <summary>
            The text A does not ends with text B
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ResponseConditions.ComplexResponseCondition">
            <summary>
            The complex response condition calculates two conditions with specified operator
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.ResponseConditions.ResponseCondition" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ResponseConditions.ComplexResponseCondition.Condition1">
            <summary>
            Gets or sets the condition1.
            </summary>
            <value>
            The condition1.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ResponseConditions.ComplexResponseCondition.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>
            The operator.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ResponseConditions.ComplexResponseCondition.Condition2">
            <summary>
            Gets or sets the condition2.
            </summary>
            <value>
            The condition2.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ResponseConditions.ComplexResponseCondition.Evaluate(System.Object,System.Type)">
            <summary>
            Evaluate the condition by using the object provided as below.
            </summary>
            <param name="obj">the object received (not forcelly used then evaluating)</param>
            <param name="objectType">Type of the object.</param>
            <returns>
            True if the evaluation is positive, and False if the evaluation is negative.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ResponseConditions.ComplexResponseCondition.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="level">The level.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ResponseConditions.ResponseCondition">
            <summary>
            The condition to determine how service simulation replies.
            </summary>
            <remarks>
            As an server stub, we may configure multiple responses, in order to decide which responses is selected and returned to the caller, TestFramework will use this condition.
            This class describes how the service simulation reacts to a request. If the evaluate method returns True, then the current reply to be chosen and be sent to client.
            If all the conditions are evaluated as <see langword="false"/>, then the server will reply with Default Response
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ResponseConditions.ResponseCondition.Evaluate(System.Object,System.Type)">
            <summary>
            Evaluate the condition by using the object provided as below.
            </summary>
            <param name="obj">the object received (not forcedly used then evaluating)</param>
            <param name="objectType">Type of the object.</param>
            <returns>
            True if the evaluation is positive, and False if the evaluation is negative.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ResponseConditions.ResponseCondition.ToString(System.Int32)">
            <summary>
            show the friendly message of this condition
            </summary>
            <param name="level">the indent level</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ResponseConditions.ResponseCondition.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ResponseConditions.SimpleResponseCondition">
            <summary>
            A single condition which evaluates an attribute of an object, identified by it's Path.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ResponseConditions.SimpleResponseCondition.Path">
            <summary>
            Object Path of the property to evaluate
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ResponseConditions.SimpleResponseCondition.Operator">
            <summary>
            The operator of evaluation: Equals, NotEquals, ...
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ResponseConditions.SimpleResponseCondition.Value">
            <summary>
            The compare value to be evaluated
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.ResponseConditions.SimpleResponseCondition.CaseSensitive">
            <summary>
            Gets or Sets if the case is also compared.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ResponseConditions.SimpleResponseCondition.Evaluate(System.Object,System.Type)">
            <inheritdoc/>
            <remarks>
            When evaluating with relational operators like <see cref="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.GreaterThan"/> or <see cref="F:Hummingbird.TestFramework.Automation.Operators.RelationalOperator.LessThan"/>, 
            The evaluation mechanism will try to compare at first with numeric values. The any of the expected value or retrieved value is not numeric, an ordinal string comparison will be performed.
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ResponseConditions.SimpleResponseCondition.ToString(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.SendRequestTestStep">
            <summary>
            A test step that sends a request using a specific service. the request and UriTemplate can contain variables.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestStepBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.SendRequestTestStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.SendRequestTestStep"/> class.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.SendRequestTestStep.SuccessStatus">
            <summary>
            A list of status indicate the test is successful
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.SendRequestTestStep.FailedStatus">
            <summary>
            A list of status indicate the test is failed
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.SendRequestTestStep.RequestMetadataId">
            <summary>
            The Identifier of the AbstractMetadata. With the AbstractMetadata, we can find it's service description and send the request via this service.
            The identifier of the service can not be changed.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.SendRequestTestStep.RequestServiceName">
            <summary>
            Gets or sets the name of the request service. The backup solution to find service description if <see cref="P:Hummingbird.TestFramework.Automation.SendRequestTestStep.RequestMetadataId"/> is changed.
            </summary>
            <value>
            The name of the request service.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.SendRequestTestStep.RequestMetadataDisplayName">
            <summary>
            Gets the display name of the request metadata.
            </summary>
            <value>
            The display name of the request metadata.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.SendRequestTestStep.Request">
            <summary>
            The request data in deserializable format.
            If the request serializer can not deserialize text, the request will be stored in XML format.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.SendRequestTestStep.DisplayRequest">
            <summary>
            The request data serialized in original  format (XML, JSON, SOAP, ...).
            <para>This request will be parsed with variables. The parse uses variables in 2 level:</para>
            <para>Level 1: Within the same Thread, the framework will use the variable within the thread</para>
            <para>Level 2: Within global variables stored in you profile</para>
            </summary>
            <value>
            The request data serialized in original format.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.SendRequestTestStep.UriTemplate">
            <summary>
            The UriTemplate of the request to be sent. If the UriTemplate is NullOrEmpty, then the default UriTemplate in AbstractMetadata will be used.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.SendRequestTestStep.ParsedUriTemplate">
            <summary>
            Gets the parsed URI template.
            </summary>
            <value>
            The parsed URI template.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.SendRequestTestStep.RequestOptions">
            <summary>
            Gets or sets the request options.
            </summary>
            <value>
            The request options.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.SendRequestTestStep.Run">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.SendRequestTestStep.Checkpoint(Hummingbird.TestFramework.Messaging.Message)">
            <inheritdoc/>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.TestCase">
            <summary>
            The TestCase contains a Name, and a series of Test Steps.
            These steps will be executed one by one.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestCase.UpdateId">
            <summary>
            Generates a new Identifier of the current AbstractTestItem and all its sub items.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestCase.Steps">
            <summary>
            Gets or sets a list of Test Steps. The test steps will be executed
            </summary>
            <value>
            The steps.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestCase.TestStepCount">
            <summary>
            Gets the count of test steps
            </summary>
            <value>
            The test step count.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestCase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.TestCase"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestCase.TestSuite">
            <summary>
            Gets or sets the referenced test suite.
            </summary>
            <value>
            The referenced test suite.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestCase.IsInstance">
            <summary>
            Gets or sets a value indicating whether this TestCase is TestInstance.
            </summary>
            <value>
              <c>true</c> if this instance is instance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestCase.Run(System.Int64,Hummingbird.TestFramework.Configuration.Profile)">
            <summary>
            Runs the current test case.
            </summary>
            <param name="ThreadId">The thread id who calls this function.</param>
            <param name="profile">The profile to be used.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestCase.OnErrorBehavior">
            <summary>
            Gets or sets the behavior of Automation Engine when the current test case fails
            </summary>
            <value>
            The onErrorBehavior. see <see cref="P:Hummingbird.TestFramework.Automation.TestCase.OnErrorBehavior"/>
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestCase.DeleteItem(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestCase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestCase.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.UpdateSimulationDataTestStep">
            <summary>
            This test step updates
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestStepBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.UpdateSimulationDataTestStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.UpdateSimulationDataTestStep"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.UpdateSimulationDataTestStep.Run">
            <summary>
            Runs this instance. Do not implement StartTime, Duration. Write information in the <see cref="P:Hummingbird.TestFramework.Automation.TestStepBase.Information" /> field, it will be shown in the log automatically.
            </summary>
            <returns>
            A Message object contains the Request/Response, or <see langword="null" /> if the test step does not send or receive messages
            </returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.UpdateSimulationDataTestStep.Responses">
            <summary>
            Gets or sets the responses to update. The Saved Responses is related to the Service indicated by the <see cref="P:Hummingbird.TestFramework.Automation.UpdateSimulationDataTestStep.ServiceMetadataId"/>
            </summary>
            <value>
            The responses.
            </value>
            <remarks>
            It is possible to update multiple Responses about the same service, it is not possible to update data for different services.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.UpdateSimulationDataTestStep.ServiceMetadataId">
            <summary>
            Gets or sets the service ID of the services to 
            </summary>
            <value>
            The service identifier.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.UpdateSimulationDataTestStep.Clean">
            <summary>
            Gets or sets a value indicating whether to clean the replies this <see cref="T:Hummingbird.TestFramework.Automation.UpdateSimulationDataTestStep" /> is clean.
            </summary>
            <value>
            <c>true</c> if remove existing replies of the same service; otherwise, <c>false</c>, the reply will be added to existing profile.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ValueMapping">
            <summary>
            Map data from an given Object and Property Path to another one
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.ValueMapping.MappingData(System.Object,System.String,System.Object,System.String)">
            <summary>
            Mappings the data.
            </summary>
            <param name="inObj">The object where the value should taken.</param>
            <param name="inPath">The path of inObj to get the value</param>
            <param name="outObj">The object where the value should be applied.</param>
            <param name="outPath">The path of outObj to set the value</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.VariableLevels">
            <summary>
            Sets the level of the variables, it can be Global, TestSuite or TestCase
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.VariableLevels.TestCase">
            <summary>
            The variable is in the Test Case scope, they are not accessible when current test case is finished.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.VariableLevels.TestSuite">
            <summary>
            The variable is available in the Test Suite scope, they are not accessible from another Test Suite.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.VariableLevels.Project">
            <summary>
            The variable is available within the current automation project.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.VBScriptTestStep">
            <summary>
            A custom C# script test step, which automation test can writes a specific test step using C# language.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestStepBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.VBScriptTestStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.CSharpScriptTestStep"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.IPerformanceCounters">
            <summary>
            The interface that can get information about the running performance test scenario
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetMeasureInterval">
            <summary>
            Gets the measure interval in milliseconds of the executing load test
            </summary>
            <returns>measurement interval in milliseconds</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetIterationsFinished">
            <summary>
            Gets number of total Iterations finished, including passed and failed iterations.
            </summary>
            <returns><see cref="T:System.Int32"/> value represents the total number of iterations finished.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetIterationsFailed">
            <summary>
            Gets number of total Iterations failed.
            </summary>
            <returns><see cref="T:System.Int32"/> value represents the total number of iterations failed.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetIterationsRunning">
            <summary>
            Gets the number of the iterations started but bot yet finished. to improve the performance when the queued cycle is larger than the maximum number, Load generator will not generate loads. 
            </summary>
            <returns>An <see cref="T:System.Int32"/> number represents the number of iteration thread filled in the queue.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetIterationsIgnored">
            <summary>
            Gets the number of the iterations ignored due to cumulation of the running threads.
            </summary>
            <returns>An <see cref="T:System.Int32"/> number represents the number of iterations has been ignored due to limitation of the thread count.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetActualIterationPassrate">
            <summary>
            Gets the average pass rate of Iterations.
            </summary>
            <returns>A <see cref="T:System.Double"/> value represents the average pass-rate of executed iterations.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetCurrentExpectedLoad">
            <summary>
            Gets the current load (Iterations/second) of the current running performance test scenario.
            </summary>
            <returns>A <see cref="T:System.Double"/> value represents the current load in numbers of iterations per second.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetCurrentActualLoad">
            <summary>
            Gets the current actual load (Iterations/second) of the current running performance test scenario. This indicator will ignore any iteration ignored by the limitation by max number of threads.
            </summary>
            <returns>A <see cref="T:System.Double"/> value represents the current actual load in numbers of iterations per second.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetCPUUsage">
            <summary>
            Gets the CPU usage.
            </summary>
            <returns>A list of <see cref="T:Hummingbird.TestFramework.Automation.MeasurePoint"/> represents the average CPU Usage during the test.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetMemoryUsage">
            <summary>
            Gets the memory usage.
            </summary>
            <returns>A list of <see cref="T:Hummingbird.TestFramework.Automation.MeasurePoint"/> represents the average Memory Usage during the test.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetIterationPassrate">
            <summary>
            Gets the iteration pass rate.
            </summary>
            <returns>A list of <see cref="T:Hummingbird.TestFramework.Automation.MeasurePoint"/> represents the pass rate of the iterations during the test.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetIterationCycleTime">
            <summary>
            Gets the iteration cycle time.
            </summary>
            <returns>A list of <see cref="T:Hummingbird.TestFramework.Automation.MeasurePoint"/> represents the cycle time of the iterations during the test.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetServicePassrate">
            <summary>
            Gets the service pass rate.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> represents the measurement of pass rate per service. where the Key is type of <see cref="T:System.Guid"/> represents the Identifier of the Service, and the Value represents the measurement of the pass rate of that service  </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetServiceResponseTime">
            <summary>
            Gets the service response time.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> represents the measurement of response type per service. where the Key is type of <see cref="T:System.Guid"/> represents the Identifier of the Service, and the Value represents the measurement of the response time of that service  </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetScenarioStatus">
            <summary>
            Gets the execution status of the actual performance test scenario
            </summary>
            <returns>A <see cref="T:Hummingbird.TestFramework.Automation.ScenarioStatus"/> enumeration represents the status of actual performance test scenario</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.IPerformanceCounters.GetProgress">
            <summary>
            Gets the progress of execution.
            </summary>
            <returns>The progress of execution, from 0 to 100.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.LoadTestCase">
            <summary>
            The base load test scenario.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.ExpectedLoad">
            <summary>
            Gets or sets the expected number of iterations per second during the performance testing
            </summary>
            <value>
            An <see cref="T:System.Double"/> value that represents ExpectedLoad of the current object
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.RampUpTime">
            <summary>
            Gets or sets the time of ramp up in seconds that passes from 0 to expected load.
            </summary>
            <value>
            An <see cref="T:System.Double"/> value that represents RampUpTime of the current object
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetLoadGraph">
            <summary>
            Gets the expect load graph measure points. That graph can be shown as a simulation of the loads
            </summary>
            <returns>An array of measure points that can be shown in a Cartesian Chart</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.CheckParameters">
            <summary>
            Checks the validity of test parameters.
            </summary>
            <returns><see langword="true"/> - If all parameters are valid, <see langword="false"/> if at least one parameter has error. <see cref="P:Hummingbird.TestFramework.Automation.AbstractTestItem.DisplayMessage"/> contains the error message. </returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.Delay">
            <summary>
            Gets or sets the delay to start the test execution.
            </summary>
            <value>
            Delay is used to start test execution later if one or more <see cref="T:Hummingbird.TestFramework.Automation.LoadTestCase"/> will be run simultaneously in the save <see cref="T:Hummingbird.TestFramework.Automation.TestSuite"/>.
            If there are only one LoadTestCase within in a TestSuite, or the Test is running independently, Delay will be ignored.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.Duration">
            <summary>
            Gets or sets the duration in number of the second where this test scenario will last.
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.ScenarioStatus">
            <summary>
            Gets the status of the current performance test scenario
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetLoad(System.DateTime,System.TimeSpan)">
            <summary>
            Gets the number of iterations should be run at the current time.
            </summary>
            <param name="startTime">The Time where the load test begins. This time is used to determine in which state the current test scenario is running</param>
            <param name="dx">The fragment of time where the current.</param>
            <returns>
            The number of iterations per second should be generated for the fragment of time.
            </returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase._iterationsLaunched">
            <summary>
            Gets or sets the total iterations have been launched during the test at the moment X
            </summary>
            <value>
            The total iterations launched, this value will be increased during the time;
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase._iterationsExpected">
            <summary>
            Gets or sets the total iterations expected at the moment X
            </summary>
            <value>
            The total iterations expected at the moment X.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase._iterationsIgnored">
            <summary>
            Gets or sets the cycles ignored.
            </summary>
            <value>
            The cycles ignored.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.Run(System.Int64,Hummingbird.TestFramework.Configuration.Profile)">
            <summary>
            Runs this performance test scenario
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetEndTime(System.DateTime)">
            <summary>
            Gets the end time of the test depends on the specified start time.
            </summary>
            <param name="startTime">The start time.</param>
            <returns>A <see cref="T:System.DateTime"/> object that represents the end of the current test</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.InitStatus">
            <summary>
            Initializes the status of the Test Case
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.CPUUsage">
            <summary>
            Gets or sets the cpu usage measurement of the last execution
            </summary>
            <value>
            The cpu usage measurement.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.MemoryUsage">
            <summary>
            Gets or sets the memory usag measurement during the last execution
            </summary>
            <value>
            The memory usage.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.IterationPassRate">
            <summary>
            Gets or sets the iteration pass rate during the last execution
            </summary>
            <value>
            The iteration pass rate.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.IterationExecutionTime">
            <summary>
            Gets or sets the iteration execution time during the last execution.
            </summary>
            <value>
            The iteration cycle time. where <see cref="P:Hummingbird.TestFramework.Automation.MeasurePoint.Time"/> is aligned to second, and <see cref="P:Hummingbird.TestFramework.Automation.MeasurePoint.Value"/> is average execution time in that second.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.ServicePassrate">
            <summary>
            Gets or sets the pass rate operation by operation during the last execution. Only request operations are measured.
            </summary>
            <value>
            The service pass rate operation by operation
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.ServiceResponseTime">
            <summary>
            Gets or sets the service response time.
            </summary>
            <value>
            The service response time.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.LoadTestCase._currentExpectedLoad">
            <summary>
            local variable to hold the current expected load as number of iterations per second.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.LoadTestCase._currentActualLoad">
            <summary>
            local variable to hold the current actual load as number of iterations per second.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.UpdateId">
            <summary>
            Updates the identifier.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.LoadTestCase"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.EvaluateThresholds">
            <summary>
            Evaluates the performance thresholds.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.EvaluateThreshold(Hummingbird.TestFramework.Automation.PerformanceThreshold)">
            <summary>
            Evaluates the performance threshold from the given definition.
            </summary>
            <param name="g">The performance threshold to be evaluated.</param>
            <returns>True indicate if the performance threshold is passed, otherwise, False</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetIterationsFinished">
            <summary>
            Gets number of total Iterations finished.
            </summary>
            <returns>
              <see cref="T:System.Int32" /> value represents the total number of iterations finished.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetIterationsFailed">
            <summary>
            Gets number of total Iterations failed.
            </summary>
            <returns>
              <see cref="T:System.Int32" /> value represents the total number of iterations failed.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetActualIterationPassrate">
            <summary>
            Gets the average pass rate of Iterations.
            </summary>
            <returns>
            A <see cref="T:System.Double" /> value represents the average pass-rate of executed iterations.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetCurrentExpectedLoad">
            <summary>
            Gets the current load (Iterations/second) of the current running performance test scenario.
            </summary>
            <returns>
            A <see cref="T:System.Double" /> value represents the current load in numbers of iterations per second.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetCPUUsage">
            <summary>
            Gets the CPU usage.
            </summary>
            <returns>
            A list of <see cref="T:Hummingbird.TestFramework.Automation.MeasurePoint" /> represents the average CPU Usage during the test.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetMemoryUsage">
            <summary>
            Gets the memory usage.
            </summary>
            <returns>
            A list of <see cref="T:Hummingbird.TestFramework.Automation.MeasurePoint" /> represents the average Memory Usage during the test.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetIterationPassrate">
            <summary>
            Gets the iteration pass rate.
            </summary>
            <returns>
            A list of <see cref="T:Hummingbird.TestFramework.Automation.MeasurePoint" /> represents the pass rate of the iterations during the test.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetIterationCycleTime">
            <summary>
            Gets the iteration cycle time.
            </summary>
            <returns>
            A list of <see cref="T:Hummingbird.TestFramework.Automation.MeasurePoint" /> represents the cycle time of the iterations during the test.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetServicePassrate">
            <summary>
            Gets the service pass rate.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> represents the measurement of pass rate per service. where the Key is type of <see cref="T:System.Guid" /> represents the Identifier of the Service, and the Value represents the measurement of the pass rate of that service
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetServiceResponseTime">
            <summary>
            Gets the service response time.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> represents the measurement of response type per service. where the Key is type of <see cref="T:System.Guid" /> represents the Identifier of the Service, and the Value represents the measurement of the response time of that service
            </returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.MaxMesurePoints">
            <summary>
            Gets or sets the number of measure points to calculate performance counters;
            </summary>
            <value>
            The measure points.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetScenarioStatus">
            <summary>
            Gets the execution status of the actual performance test scenario
            </summary>
            <returns>
            A <see cref="P:Hummingbird.TestFramework.Automation.LoadTestCase.ScenarioStatus" /> enumeration represents the status of actual performance test scenario
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetIterationsRunning">
            <summary>
            Gets the number of the iterations started but bot yet finished. to improve the performance when the queued cycle is larger than the maximum number, Load generator will not generate loads.
            </summary>
            <returns>
            An <see cref="T:System.Int32" /> number represents the number of iteration thread filled in the queue.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetIterationsIgnored">
            <summary>
            Gets the number of the iterations ignored due to cumulation of the running threads.
            </summary>
            <returns>
            An <see cref="T:System.Int32" /> number represents the number of iterations has been ignored due to limitation of the thread count.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetCurrentActualLoad">
            <summary>
            Gets the current actual load (Iterations/second) of the current running performance test scenario. This indicator will ignore any iteration ignored by the limitation by max number of threads.
            </summary>
            <returns>
            A <see cref="T:System.Double" /> value represents the current actual load in numbers of iterations per second.
            </returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.ActualLoadGraph">
            <summary>
            Gets or sets the actual load graph for the last execution, it can be compared to theoretic load.
            </summary>
            <value>
            The actual load.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.ServiceNames">
            <summary>
            Gets or sets the service names dictionary
            </summary>
            <value>
            The service names dictionary where the Key is the ServiceId, the Value is the service friendly name.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetProgress">
            <summary>
            Gets the progress of execution.
            </summary>
            <returns>
            The progress of execution, from 0 to 100.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.GetMeasureInterval">
            <summary>
            Gets the measure interval in milliseconds of the executing load test
            </summary>
            <returns>measurement interval in milliseconds</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestCase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.LoadTestLogLevel">
            <summary>
            Gets or sets the level of log details in a performance test report
            </summary>
            <value>
            The load test log level.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.LoadTestCase.PerformanceThresholds">
            <summary>
            Gets or sets the performance thresholds of the current load test
            </summary>
            <value>
            The List represents zero or more performance thresholds.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.LoadTestSuite">
            <summary>
            The test suite that holds one or several test cases.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.TestSuite" />
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.LoadTestSuite.Run(System.Int64,Hummingbird.TestFramework.Configuration.Profile)">
            <summary>
            Runs the current TestSuite.
            </summary>
            <param name="ThreadId">The thread identifier.</param>
            <param name="profile">The profile of which this test suite runs with</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.MeasurePoint">
            <summary>
            MeasurePoint is a point to show the measurement at a moment of time.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.MeasurePoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.MeasurePoint"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.MeasurePoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.MeasurePoint"/> class.
            </summary>
            <param name="time">The time point.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.MeasurePoint.Time">
            <summary>
            Gets or sets the measure time, when the value is measured.
            </summary>
            <value>
            The measure time.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.MeasurePoint.Value">
            <summary>
            Gets or sets the value measured at the time
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.MeasurePoint.Compare(Hummingbird.TestFramework.Automation.MeasurePoint,Hummingbird.TestFramework.Automation.MeasurePoint)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.MeasurePoint.CompareTo(Hummingbird.TestFramework.Automation.MeasurePoint)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.MeasurePoint.Equals(Hummingbird.TestFramework.Automation.MeasurePoint)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.ScenarioStatus">
            <summary>
            The current state of the performance test scenarios
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ScenarioStatus.NotStarted">
            <summary>
            Default status, the scenario is not started.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ScenarioStatus.RampUp">
            <summary>
            The scenario is under ramp-up state from 0 to expected load
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ScenarioStatus.UnderLoad">
            <summary>
            The under load
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ScenarioStatus.RampUpToPeak">
            <summary>
            The test is from ramp up period from Expected Load to Peak Load.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ScenarioStatus.UnderPeakLoad">
            <summary>
            The test is under Peak Load
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ScenarioStatus.Finishing">
            <summary>
            The test is finished but waiting for the last thread to finish.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ScenarioStatus.Stop">
            <summary>
            The test is stopped.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ScenarioStatus.Abandoned">
            <summary>
            The test abandoned.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.ScenarioStatus.FatalError">
            <summary>
            A fatal error has occurred and the test cannot be executed.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.SpikeTestCase">
            <summary>
            
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.LoadTestCase" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.SpikeTestCase.ExpectedSpikeLoad">
            <summary>
            Gets or sets the expected peak load. The peak load must greater or equals to <see cref="P:Hummingbird.TestFramework.Automation.LoadTestCase.ExpectedLoad"/>
            </summary>
            <value>
            The expected peak load.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.SpikeTestCase.NumberOfSpikes">
            <summary>
            Gets or sets number of peak loads during the test. Performance test engine will generate this number of peak loads during the test.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> value that represents the number of peak loads
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.SpikeTestCase.SpikeDuration">
            <summary>
            Gets or sets the duration of peak load.
            </summary>
            <value>
            The duration of the peak.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.SpikeTestCase.GetLoadGraph">
            <summary>
            Gets the expect load graph measure points. That graph can be shown as a simulation of the loads
            </summary>
            <returns>
            An array of measure points that can be shown in a Cartesian Chart
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.SpikeTestCase.GetLoad(System.DateTime,System.TimeSpan)">
            <summary>
            Gets the number of iterations should be run at the current time.
            </summary>
            <param name="startTime">The Time where the load test begins. This time is used to determine in which state the current test scenario is running</param>
            <param name="dx">The fragment of time where the current.</param>
            <returns>
            The number of iterations per second should be generated for the fragment of time.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.SpikeTestCase.GetEndTime(System.DateTime)">
            <summary>
            Gets the end time of the test depends on the specified start time.
            </summary>
            <param name="startTime">The start time.</param>
            <returns>
            A <see cref="T:System.DateTime" /> object that represents the end of the current test
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.SpikeTestCase.CheckParameters">
            <summary>
            Checks the validity of test parameters.
            </summary>
            <returns>
              <see langword="true" /> - If all parameters are valid, <see langword="false" /> if at least one parameter has error. <see cref="P:Hummingbird.TestFramework.Automation.AbstractTestItem.DisplayMessage" /> contains the error message.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.SpikeTestCase.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.StressTestCase">
            <summary>
            A performance test model that takes the test in 2 stages: Normal Load and Peek Load.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Automation.LoadTestCase" />
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StressTestCase.ExpectedPeakLoad">
            <summary>
            Gets or sets the expected peak load. The peak load must greater or equals to <see cref="P:Hummingbird.TestFramework.Automation.LoadTestCase.ExpectedLoad"/>
            </summary>
            <value>
            The expected peak load.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StressTestCase.RampUpToPeakTime">
            <summary>
            Gets or sets the time in seconds that ramps up from expected load to peak load.
            </summary>
            <value>
            The time in number of seconds that ramps up from expected load to peak load.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.StressTestCase.PeakDuration">
            <summary>
            Gets or sets the duration of the test under peak load.
            </summary>
            <value>
            The duration of the peak.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.StressTestCase.CheckParameters">
            <summary>
            Checks the validity of test parameters.
            </summary>
            <returns>
              <see langword="true" /> - If all parameters are valid, <see langword="false" /> if at least one parameter has error. <see cref="P:Hummingbird.TestFramework.Automation.AbstractTestItem.DisplayMessage" /> contains the error message.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.StressTestCase.GetLoadGraph">
            <summary>
            Gets the expect load graph measure points. That graph can be shown as a simulation of the loads
            </summary>
            <returns>
            An array of measure points that can be shown in a Cartesian Chart
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.StressTestCase.GetLoad(System.DateTime,System.TimeSpan)">
            <summary>
            Gets the number of iterations should be run at the current time.
            </summary>
            <param name="startTime">The Time where the load test begins. This time is used to determine in which state the current test scenario is running</param>
            <param name="dx">The fragment of time where the current.</param>
            <returns>
            The number of iterations per second should be generated for the fragment of time.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.StressTestCase.GetEndTime(System.DateTime)">
            <summary>
            Gets the end time of the test depends on the specified start time.
            </summary>
            <param name="startTime">The start time.</param>
            <returns>
            A <see cref="T:System.DateTime" /> object that represents the end of the current test
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.StressTestCase.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.SqlAuthenticationMode">
            <summary>
            Mode of authentication to connect to a SQL Database
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.SqlAuthenticationMode.Windows">
            <summary>
            Windows authentication mode, with this mode Test Framework use currently user's windows identity to connect to database.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.SqlAuthenticationMode.Server">
            <summary>
            Server authentication mode, with this mode Test Framework provides credential (User/Password) of a local SQL Server database
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Automation.SqlAuthenticationMode.Mixed">
            <summary>
            Mixed authentication mode, Test Framework authenticates user with windows identity in addition with a local SQL server account
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Automation.TestSuite">
            <summary>
            A test suite contains one or more automated test cases
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestSuite.UpdateId">
            <summary>
            Generates a new Identifier of the current AbstractTestItem and all its sub items.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestSuite.TestCases">
            <summary>
            Gets or sets a list of TestCases.
            </summary>
            <value>
            The tests.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestSuite.Project">
            <summary>
            Gets the Automation Project object which containing this TestSuite.
            </summary>
            <value>
            The project.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Automation.TestSuite.TestCaseCount">
            <summary>
            Gets the count of test cases
            </summary>
            <value>
            The test case count.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestSuite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Automation.TestSuite"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestSuite.Run(System.Int64,Hummingbird.TestFramework.Configuration.Profile)">
            <summary>
            Runs the current TestSuite.
            </summary>
            <param name="ThreadId">The thread identifier.</param>
            <param name="profile">The profile of which this test suite runs with</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestSuite.DeleteItem(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestSuite.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Automation.TestSuite.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.CodeGenerator.MemoryLogger">
            <summary>
            The code generation logger which logs into the memory.
            </summary>
            <seealso cref="T:Microsoft.Build.Framework.ILogger" />
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.MemoryLogger.Messages">
            <summary>
            The message raised by the build process.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.MemoryLogger.Verbosity">
            <inheritdoc/>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.MemoryLogger.Parameters">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.MemoryLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.MemoryLogger.Shutdown">
            <inheritdoc/>
        </member>
        <member name="F:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.CodeFiles">
            <summary>
            The code files. DictionaryKey = filename, Value = code file content;
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.SchemasClassMapping">
            <summary>
            The schema class mapping: Key = SchemasReferenceId, Value = Full class name;
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.Operations">
            <summary>
            The operations, Key = OperationId, Value = OperationCode
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.GenerateClassFromSchemas(System.String,Microsoft.OpenApi.Models.OpenApiSchema,System.Boolean)">
            <summary>
            Generates the class from schema.
            </summary>
            <param name="className">The class name.</param>
            <param name="schema">The <see cref="T:Microsoft.OpenApi.Models.OpenApiSchema" />.</param>
            <param name="HasNamespace">if set to <c>true</c> generated class will be encapsulated in the namespace, otherwise the code contains only Class itself.</param>
            <returns>
            A <see cref="T:System.String" /> value represent the source code of generated class
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.GenerateProperty(System.String,Microsoft.OpenApi.Models.OpenApiSchema)">
            <summary>
            Generates the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="schema">The <see cref="T:Microsoft.OpenApi.Models.OpenApiSchema" />.</param>
            <returns>
            The code block represents the definition of a public property.
            </returns>
            <remarks>
            data types are referred here: https://swagger.io/specification/#dataTypes
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.GetArrayPropertyType(Microsoft.OpenApi.Models.OpenApiSchema,System.String)">
            <summary>
            Gets the type of the array property.
            </summary>
            <param name="schema">The <see cref="T:Microsoft.OpenApi.Models.OpenApiSchema" />.</param>
            <param name="name">The name.</param>
            <returns>
            The type definition of an Array property, for example, string[]
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.GetObjectPropertyType(Microsoft.OpenApi.Models.OpenApiSchema)">
            <summary>
            Gets the type of the object property.
            </summary>
            <param name="schema">The <see cref="T:Microsoft.OpenApi.Models.OpenApiSchema" />.</param>
            <returns>A <see cref="T:System.String"/> represents the <see cref="T:System.Type"/> of the property.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.GetIntegerPropertyType(Microsoft.OpenApi.Models.OpenApiSchema)">
            <summary>
            Gets the type of the integer property from <see cref="T:Microsoft.OpenApi.Models.OpenApiSchema"/>
            </summary>
            <param name="schema">The <see cref="T:Microsoft.OpenApi.Models.OpenApiSchema"/>.</param>
            <returns>The type of an integer such as long or int</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.GetStringPropertyType(Microsoft.OpenApi.Models.OpenApiSchema,System.String)">
            <summary>
            Gets the type of the string property from <see cref="T:Microsoft.OpenApi.Models.OpenApiSchema" />
            </summary>
            <param name="schema">The <see cref="T:Microsoft.OpenApi.Models.OpenApiSchema" />.</param>
            <param name="name">The name of the property in case the schema does not have a name</param>
            <returns>
            The type of an string based values such as long or int
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.GenerateAllResponseClasses(System.Collections.Generic.KeyValuePair{Microsoft.OpenApi.Models.OperationType,Microsoft.OpenApi.Models.OpenApiOperation},System.Collections.Generic.List{Hummingbird.TestFramework.LogMessage},System.Collections.Generic.List{System.String}@)">
            <summary>
            Generates the response classes, the first class will be used as response and all others will be tagged as alternative.
            </summary>
            <param name="operation">The operation object.</param>
            <param name="errors">The errors will be filled in this list.</param>
            <param name="responseTypes">The response types.</param>
            <returns>A <see cref="T:System.String"/> represents a list of C# source code, for Classes generated for responses.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.GenerateOperationId(System.Collections.Generic.KeyValuePair{Microsoft.OpenApi.Models.OperationType,Microsoft.OpenApi.Models.OpenApiOperation})">
            <summary>
            Generates the operationId for an operation, as the operationId
            </summary>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.GenerateRequestProperties(Microsoft.OpenApi.Models.OpenApiOperation)">
            <summary>
            Generates the properties of the Class that will be used in a OpenAPIRequest from <see cref="T:Microsoft.OpenApi.Models.OpenApiOperation" />
            </summary>
            <param name="operation">The <see cref="T:Microsoft.OpenApi.Models.OpenApiOperation" /> object</param>
            <returns>
            A code block represents a list of Properties with Tags.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.GetTypeFromSchemas(Microsoft.OpenApi.Models.OpenApiSchema,System.String)">
            <summary>
            Gets the type from <see cref="T:Microsoft.OpenApi.Models.OpenApiSchema" />
            </summary>
            <param name="schema">The <see cref="T:Microsoft.OpenApi.Models.OpenApiSchema" />.</param>
            <param name="name">The name.</param>
            <returns>A <see cref="T:System.String"/> representation of the Type generated from an OpenApiSchema.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceAnalyzer.UnnamedProperty(Microsoft.OpenApi.Models.OpenApiSchema)">
            <summary>
            Generates the property from on in-line <see cref="T:Microsoft.OpenApi.Models.OpenApiSchema" />. The in-line OpenApiSchema are not reusable.
            A new class will be generated in the given namespace, these new classes will be attached into CodeFiles;
            </summary>
            <param name="schema">The <see cref="T:Microsoft.OpenApi.Models.OpenApiSchema" />.</param>
            <returns>The full name of the generated class.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceOptions">
            <summary>
            Options to apply for code generation from OpenAPI V2 and V3 definition.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceOptions.TargetNamespace">
            <summary>
            Gets or sets the target namespace of the code generated. 
            </summary>
            <value>
            The target namespace, it must be a valid C# Namespace identifier default value is Hummingbird.WsExtension.Temp
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceOptions.Username">
            <summary>
            Gets or sets the saved username to get the service description
            </summary>
            <value>
            The saved username.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OpenApiServiceOptions.Password">
            <summary>
            Gets or sets the saved password to get the service description
            </summary>
            <value>
            The saved password.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.CodeGenerator.OperationCode">
            <summary>
            The Source code of an Operation that is generated from an OpenAPI definition
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OperationCode.RequestMetadata">
            <summary>
            Gets or sets the code block of a <see cref="T:Hummingbird.TestFramework.Services.HttpRequestMetadata"/> object generated from OpenAPI Specification
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OperationCode.RequestClass">
            <summary>
            Gets the source code that represents the class of request object.
            </summary>
            <value>
            The request class.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OperationCode.ResponseClass">
            <summary>
            Gets the source code that represents all possible response object.
            </summary>
            <value>
            The response class.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OperationCode.Path">
            <summary>
            Gets the Path of the operation that is specified in OpenAPI Specification.
            </summary>
            <value>
            The path, <see cref="!:https://swagger.io/docs/specification/paths-and-operations/">https://swagger.io/docs/specification/paths-and-operations/</see>
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OperationCode.OperationId">
            <summary>
            Gets the operation identifier.
            </summary>
            <value>
            The operation identifier, <see cref="!:https://swagger.io/docs/specification/paths-and-operations/">https://swagger.io/docs/specification/paths-and-operations/</see>
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OperationCode.Description">
            <summary>
            Gets the description of the current operation
            </summary>
            <value>
            The description
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OperationCode.Tags">
            <summary>
            Gets the tags of the OpenAPI operation
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OperationCode.TagsString">
            <summary>
            Gets the tags as string array representation.
            </summary>
            <value>
            The tags string.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OperationCode.Method">
            <summary>
            Gets or sets the Http method used for the current operation
            </summary>
            <value>
            The http method.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.OperationCode.ResponseMetadata">
            <summary>
            Gets or sets the code block of a <see cref="T:Hummingbird.TestFramework.Services.HttpResponseMetadata"/> object generated from OpenAPI Specification
            </summary>
            <value>
            The response metadata.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.CodeGenerator.ProjectGenerator">
            <summary>
            Generates a VisualStudio Solution from a given ExtensionProject object
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.ProjectGenerator.GenerateProject(Hummingbird.TestFramework.ExtensionProject.Project,System.String,System.String@)">
            <summary>
            Generates a Visual Studio C# project from the extension project object
            </summary>
            <param name="project">The Extension Project.</param>
            <param name="outputPath">The output Path.</param>
            <param name="filename">The filename of the project file (*.csproj)</param>
            <returns>A list of <see cref="T:Hummingbird.TestFramework.LogMessage"/> represents information and error messages during project generation.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.ProjectGenerator.BuildProject(Hummingbird.TestFramework.ExtensionProject.Project,Microsoft.Build.Framework.ILogger)">
            <summary>
            Builds the C# Project from the given .csproj file
            </summary>
            <param name="project">The project file (*.csproj), this should be the file generated by GenerateProject method</param>
            <param name="logger">The logger where the build event will be reported</param>
            <returns>A <see cref="T:System.Boolean"/> value, indicate if the extension project is built correctly.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.ProjectGenerator.GenerateProxies(Hummingbird.TestFramework.ExtensionProject.Project,System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String})">
            <summary>
            Generates the proxy classes and server stubs of a given ExtensionProject.
            </summary>
            <param name="project">The project.</param>
            <param name="outputPath">The output path.</param>
            <param name="soapClientServices">The SOAP client services.</param>
            <param name="soapServerServices">The SOAP server services.</param>
            <param name="httpClientServices">The HTTP client services.</param>
            <param name="httpServerServices">The HTTP server services.</param>
            <param name="projectFiles">The project files.</param>
            <returns>A list of <see cref="T:Hummingbird.TestFramework.LogMessage"/> showing the logs during the proxy class generation.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.CodeGenerator.WindowEnterPassword">
            <summary>
            Interaction logic for WindowEnterPassword.xaml
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.WindowEnterPassword.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.CodeGenerator.WsdlServiceOptions">
            <summary>
            Options to apply for code generation from WSDL definition.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.WsdlServiceOptions.IsDispatchByBody">
            <summary>
            Indicate when used as ServerStub, the service is dispatched by body element.
            It's value is False.
            </summary>
            <remarks>
            This flag must be true if all operation has no SoapAction defined in WSDL.
            When set to True, the code generator will add "DispatchByBodyBehavior" to the generated interface.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.WsdlServiceOptions.ServiceConfigurations">
            <summary>
            Gets or sets the endpoints definition for generating the code
            </summary>
            <value>
            The endpoints definition, the list can be empty to use default values.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.WsdlServiceOptions.TargetNamespace">
            <summary>
            Gets or sets the target namespace of the code generated. 
            </summary>
            <value>
            The target namespace, it must be a valid C# Namespace identifier default value is Hummingbird.WsExtension.Temp
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.WsdlServiceOptions.UseXmlSerializer">
            <summary>
            Gets or sets a value indicating whether to use XmlSerlizer before send Web service requets.
            </summary>
            <value>
              <c>true</c> if use XML serializer; otherwise, <c>false</c> use DataContractSerliazer.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.WsdlServiceOptions.IsOrdered">
            <summary>
            Gets a value indicating whether XML tags' order is important.
            </summary>
            <value>
              <c>true</c> if XML Tags must be ordered; otherwise, <c>false</c>.
            </value>
            <remarks>
            In XML documents structures are defined in xsd:Sequence. Some service may accept structures unordered, some not. Use unordered structure lets your requests and response more compatible with other service test softwares.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.WsdlServiceOptions.Username">
            <summary>
            Gets or sets the saved username to get the service description
            </summary>
            <value>
            The saved username.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.CodeGenerator.WsdlServiceOptions.Password">
            <summary>
            Gets or sets the saved password to get the service description
            </summary>
            <value>
            The saved password.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.CodeGenerator.WsdlServiceAnalyzer">
            <summary>
            Generates C# code, project and assemblies for Hummingbird Test Framework.
            This class provides methods to generate client and/or server proxies to test your 
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.WsdlServiceAnalyzer.ImportMetadataSection(System.Collections.Generic.List{System.String},System.ServiceModel.Description.MetadataSet,System.String)">
            <summary>
            Import MetadataSection object into a MetadataSet.
            This function will analyse WSDL and XSD files to include other WSDL or XML Schemas refered in the original Web Service Definition. 
            To ensure the MetadataSet contains all set of metadata files (WSDL, XSD)
            </summary>
            <param name="includedFiles">A list of files already included, to avoid importing files already imported</param>
            <param name="metaDocs">The metadataSet containing the included files</param>
            <param name="path">The path of the metadata file should be included, either WSDL or XSD is included. The path can be Local Path, UNC or Uri</param>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.WsdlServiceAnalyzer.GenerateWCFProxy(System.String,Hummingbird.TestFramework.CodeGenerator.WsdlServiceOptions,System.String@,System.Reflection.Assembly@,System.Byte[]@,System.ServiceModel.Description.ServiceEndpointCollection@)">
            <summary>
            Generates the WCF Proxy code in C# for given WSDL file and its associated Assembly for runtime analyzing with reflection
            </summary>
            <param name="path">The path of the WSDL file: UNC Path, Local Path and Uri are accepted).</param>
            <param name="options">The options for the service</param>
            <param name="CSharpCode">The generated C# proxy code.</param>
            <param name="CompiledAssembly">The compiled assembly.</param>
            <param name="assemblyContent">Binary of the assembly.</param>
            <param name="endpoints">The endpoints can be used as UriTemplate.</param>
            <returns>A list of <see cref="T:Hummingbird.TestFramework.LogMessage"/> represents information and error messages created during the WCF Proxy code generation.</returns>
            <exception cref="T:System.Exception">There were errors during code compilation.</exception>
        </member>
        <member name="M:Hummingbird.TestFramework.CodeGenerator.WsdlServiceAnalyzer.GenerateServiceStub(System.Reflection.Assembly,Hummingbird.TestFramework.CodeGenerator.WsdlServiceOptions,Hummingbird.TestFramework.Variable[]@)">
            <summary>
            Generates the service stub from given proxy assembly.
            This function implements service stub defined in interface and generates code for each service.
            </summary>
            <param name="assembly">The proxy assembly generated from GenerateProxy method.</param>
            <param name="options">The WSDL service options (only TargetNamespace is used.</param>
            <param name="CSharpCode">The generated code (if multiple service is defined, multiple file will be generated.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Configuration.CustomParameter">
            <summary>
            Parameters introduced and managed by Users
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.CustomParameter.StrongName">
            <summary>
            Gets or sets the strong name of the component uses the parameter.
            </summary>
            <value>
             the strong name of the component.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.CustomParameter.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.CustomParameter.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Configuration.ProfileInformation">
            <summary>
            Gets the information about an imported profile, without the need of deserializing a profile from XML. This information is saved in <see cref="T:Hummingbird.TestFramework.Configuration.Settings"/>
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.ProfileInformation.Name">
            <summary>
            Gets or sets Name.
            </summary>
            <value>
            An <see cref="T:System.String"/> value that represents Name of the current object
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.ProfileInformation.Description">
            <summary>
            Gets or sets Description.
            </summary>
            <value>
            An <see cref="T:System.String"/> value that represents Description of the current object
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.ProfileInformation.LastUpdatedTime">
            <summary>
            Gets or sets LastUpdatedTime.
            </summary>
            <value>
            An <see cref="T:System.DateTime"/> value that represents LastUpdatedTime of the current object
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.ProfileInformation.IsDefault">
            <summary>
            Gets a value indicating whether the current profile is Default Profile
            </summary>
            <value>
              <c>true</c> if this instance is default profile; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.ProfileInformation.IsActive">
            <summary>
            Gets a value indicating whether the current profile is Active Profile
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Hummingbird.TestFramework.Configuration.ProfileInformation.PropertyChanged">
            <summary>
            Occurs when Property value changed
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Configuration.Credential">
            <summary>
            Credential used to pass authentication if the service requires to provide login and password.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Credential.Anonymous">
            <summary>
            Gets the static Anonymous Credential
            </summary>
            <value>
            The anonymous.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Credential.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Configuration.Credential"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Credential.AuthenticationMode">
            <summary>
            Gets or sets the authentication mode. Only These values are valid: Basic, Digest, UserName
            </summary>
            <value>
            The authentication mode.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Credential.Username">
            <summary>
            User name to be used in Basic or Digest Authentication
            </summary>
            <remarks>
            When used as Credential for <see cref="F:Hummingbird.TestFramework.Services.AuthenticationModes.Bearer"/>, the Password is the Token to use. Username will be ignored.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Credential.Password">
            <summary>
            Unencrypted password. Used directly in application but will not be serialized in the profile XML File.
            </summary>
            <remarks>
            When used as Credential for <see cref="F:Hummingbird.TestFramework.Services.AuthenticationModes.Bearer"/>, the Password is the Token to use. Username will be ignored.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Credential.EncPassword">
            <summary>
            Base64 encoded password, this password is used to save in the Profile XML file, and is encrypted.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Configuration.TestEnvironment">
            <summary>
            Defines a Test Environment
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.TestEnvironment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Configuration.TestEnvironment"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.TestEnvironment.SystemVariables">
            <summary>
            variables created by used server and clients, values can be changed but these variables can not be deleted.
            </summary>
            <remarks>
            User defined variables are more priority than these SystemVariables, if the variable of the same name exists both in <see cref="P:Hummingbird.TestFramework.Configuration.TestEnvironment.EnvironmentVariables"/> and <see cref="P:Hummingbird.TestFramework.Configuration.TestEnvironment.SystemVariables"/>, the one in EnvironmentVariables will be taken account.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.TestEnvironment.Profile">
            <summary>
            Gets or sets the profile where this Test Environment depends on.
            </summary>
            <value>
            The profile is assigned when a test environment is created or loaded.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.TestEnvironment.EnvironmentVariables">
            <summary>
            Variables created manually, can be used anywhere. To use these variables in automated test, please ensure that the TestEnvironment is embedded in the automation project.
            </summary>
            <remarks>
            These user defined variables are more priority than the SystemVariables, if the variable of the same name exists both in <see cref="P:Hummingbird.TestFramework.Configuration.TestEnvironment.EnvironmentVariables"/> and <see cref="P:Hummingbird.TestFramework.Configuration.TestEnvironment.SystemVariables"/>, the one in EnvironmentVariables will be taken account.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.TestEnvironment.Credentials">
            <summary>
            Credentials used in Basic and Digest authentication
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.TestEnvironment.Name">
            <summary>
            Name of the test environment.
            </summary>
        </member>
        <member name="E:Hummingbird.TestFramework.Configuration.TestEnvironment.PropertyChanged">
            <summary>
            Occurs when the property if the test environment is changed.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.TestEnvironment.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.TestEnvironment.DisplayName">
            <summary>
            DisplayName of the current environment
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.TestEnvironment.IsDefault">
            <summary>
            Indicate if this test environment is Default environment. Default environment cannot be removed.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.TestEnvironment.IsActive">
            <summary>
            Indicate if this test environment is active environment.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.TestEnvironment.RaisePropertyChanged">
            <summary>
            Internal use, raise a property changed event to let all subscribers to refresh the display name of the current test environment.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Configuration.Theme">
            <summary>
            The Theme used by the Hummingbird Test Manager
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Light_Blue">
            <summary>
            The light blue
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Light_Brown">
            <summary>
            The light brown
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Light_Green">
            <summary>
            The light green
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Light_Indigo">
            <summary>
            The light indigo
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Light_Maroon">
            <summary>
            The light maroon
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Light_Purple">
            <summary>
            The light purple
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Dark_Blue">
            <summary>
            The dark blue
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Dark_Purple">
            <summary>
            The dark purple
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Dark_Orange">
            <summary>
            The dark orange
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Dark_Green">
            <summary>
            The dark green
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Mixed_Blue">
            <summary>
            The blue theme with black header
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Mixed_Green">
            <summary>
            The green theme with black header
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Mixed_Gold">
            <summary>
            The gold/brown theme with black header
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Mixed_Purple">
            <summary>
            The purple theme with black header
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Theme.Custom">
            <summary>
            The custom theme
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Configuration.FontSize">
            <summary>
            FontSize
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.FontSize.Normal">
            <summary>
            Normal font size
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.FontSize.Large">
            <summary>
            Large font size
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.FontSize.ExtraLarge">
            <summary>
            Extra large font size
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Configuration.History">
            <summary>
            The history of using the software, these data will be stored:
            <para>-> Requests edited and sent.</para>
            <para>-> Transactions and counters</para>
            
            <para>For local usage (without connected to ALM Service, the history is stored locally on user's roaming data). Only one instance of the history will be stored.</para>
            <para>if connected to ALM service, the history is stored on ALM.</para>
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.Instance">
            <summary>
            Gets the instance of History.
            </summary>
            <value>
            The instance of History.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.SavedRequests">
            <summary>
            Gets or sets the saved requests.
            </summary>
            <value>
            The saved requests.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.Messages">
            <summary>
            Gets or sets the messages (transactions of test).
            </summary>
            <value>
            The messages (transactions of test).
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.History.Load">
            <summary>
            Loads this instance.
            </summary>
            <returns>an <see cref="T:Hummingbird.TestFramework.Configuration.History"/> object loaded from application data.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.History.Save">
            <summary>
            Saves the history to user's Application Data folder
            </summary>
            <remarks>
            The daily usage stores the detailed usage for the last 31 days, all usage prior to 31 days will be removed. The Overall statistics are kept forever unless user decides to reset them.
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.History.AddSavedRequest(Hummingbird.TestFramework.Configuration.SavedRequest)">
            <summary>
            Adds the saved request.
            </summary>
            <param name="request">The request to add.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.History.RemoveSavedRequest(Hummingbird.TestFramework.Configuration.SavedRequest)">
            <summary>
            Removes the saved request.
            </summary>
            <param name="request">The request to be removed.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.History.ClearSavedRequest(Hummingbird.TestFramework.Configuration.SavedRequest,System.Boolean)">
            <summary>
            Clears the saved request.
            </summary>
            <param name="request">The request instance, all requests of the same type will be cleared.</param>
            <param name="keepFavorite">if set to <c>true</c> your favorite requests will be kept. otherwise all requests will be removed.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.History.GetSavedRequests(System.Guid)">
            <summary>
            Gets the saved requests from Metadata
            </summary>
            <param name="metadataId">The metadata identifier.</param>
            <returns>A list of <see cref="T:Hummingbird.TestFramework.Configuration.SavedRequest"/> loaded from test profile for a given Service Metadata Id</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.OutgoingSuccess">
            <summary>
            Gets or sets the number of outgoing messages with success, This is a Overall counter.
            </summary>
            <value>
            the number of outgoing messages with success.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.OutgoingFailed">
            <summary>
            Gets or sets the number of outgoing which failed, This is a Overall counter.
            </summary>
            <value>
             the number of outgoing which failed.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.IncomingSuccess">
            <summary>
            Gets or sets the number of incoming messages which successfully processed, This is a Overall counter.
            </summary>
            <value>
            A numeric value.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.IncomingFailed">
            <summary>
            Gets or sets the number of incoming messaged which are failed to process, This is a Overall counter.
            </summary>
            <value>
            The incoming failed.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.AutomatedTestPassed">
            <summary>
            Gets or sets the number of automated test executed and passed, This is a Overall counter.
            </summary>
            <value>
            The automated test success.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.AutomatedTestWarning">
            <summary>
            Gets or sets the number of automated test executed with warning.
            </summary>
            <value>
            The automated test warning.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.AutomatedTestFailed">
            <summary>
            Gets or sets the number of automated test executed but failed, This is a Overall counter.
            </summary>
            <value>
            The automated test failed.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.AutomatedTestCreated">
            <summary>
            Gets or sets the number of automated test are created or modified, This is a Overall counter.
            </summary>
            <value>
            The automated test created.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.LifeTime">
            <summary>
            The global statistic is calculated from this datetime;
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.DailyUsageStatistics">
            <summary>
            The dictionary contains all usages within the days.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.UsageStatistic">
            <summary>
            Gets the UsageStatstic object for current date. Usage Statistic of the software, including requests sent, message received and automated test executed. 
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.AutomatedTestExecuted">
            <summary>
            Gets the automated test executed.
            </summary>
            <value>
            The automated test executed.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.IncomingAll">
            <summary>
            Gets the incoming message count .
            </summary>
            <value>
            The incoming all.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.History.OutgoingAll">
            <summary>
            Gets the outgoing message count
            </summary>
            <value>
            The outgoing all.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.History.ClearCounters">
            <summary>
            Clears the statistic counters.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Configuration.SavedRequest">
            <summary>
            Once a request is sent, the configuration of the request will be automatically saved in your history.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedRequest.ClientName">
            <summary>
            Name of the AbstractClient type used to send this request.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedRequest.MetadataId">
            <summary>
            Metadata Id of the request.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedRequest.Value">
            <summary>
             Serialized Object. Use the Metadata defined serializer.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedRequest.IsSavedByUser">
            <summary>
            Indicate if the current SavedRequest is saved automatically or intendedly saved by the user.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedRequest.Name">
            <summary>
            Name of the saved request.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedRequest.UriTemplate">
            <summary>
            UriTemplate of the current request.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedRequest.RequestOptions">
            <summary>
            Gets or sets the request options.
            </summary>
            <value>
            The request options.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.SavedRequest.Equals(Hummingbird.TestFramework.Configuration.SavedRequest)">
            <summary>
            If the SavedRequest is for the same request (same client and same metadataId)
            </summary>
            <param name="other">Another saved request.</param>
            <returns>True if the saved request is for the same service. False if they are not for the same service.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Configuration.SavedResponse">
            <summary>
            Saved Response structure.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedResponse.ServerName">
            <summary>
            Gets or sets the name of the server.
            </summary>
            <value>
            The name of the server.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedResponse.ResponseName">
            <summary>
            Gets or sets the name of the response.
            </summary>
            <value>
            The name of the response.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedResponse.MetadataId">
            <summary>
            Gets or sets the metadata identifier.
            </summary>
            <value>
            The metadata identifier.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedResponse.ResponseCondition">
            <summary>
            Gets or sets the response condition.
            </summary>
            <value>
            The response condition.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedResponse.ThrowsException">
            <summary>
            Gets or sets a value indicating whether to throw exception.
            </summary>
            <value>
              <c>true</c> throws exception; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedResponse.ErrorType">
            <summary>
            When the property <see cref="P:Hummingbird.TestFramework.Configuration.SavedResponse.ThrowsException"/> is set to True, ErrorType contains <see cref="P:System.Type.AssemblyQualifiedName"/> of the Object Type.
            </summary>
            <remarks>
            <para>When used with HTTP Server, ErrorType can contains HTTP Status and/or Response Structure.</para>
            <para>When used with SOAP Server, ErrorType will be the equivalent Details type of the SOAP Fault defined in WSDL, See <a href="https://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383507">W3C specification for details</a></para>
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedResponse.Value">
            <summary>
            Gets or sets the value of test object (in serialized format using its proper serialize).
            </summary>
            <value>
            value of test object (a request or a response).
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedResponse.HttpStatusCode">
            <summary>
            Gets or sets the HTTP status.
            </summary>
            <value>
            The HTTP status.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.SavedResponse.Equals(Hummingbird.TestFramework.Configuration.SavedResponse)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.SavedResponse.ReplyDelay">
            <summary>
            Gets or sets the reply delay in number of Seconds, when the service simulation replies.
            </summary>
            <value>
            An <see cref="T:System.UInt32"/> number represents the number to time to wait before the service simulation replies to the invoker.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.SavedResponse.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.SavedResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Configuration.SavedResponse"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Configuration.Profile">
            <summary>
            This class stores the test profiles such as:
            Variables and configured server replies. user can save and load settings from different copy either from a file or from ALM.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A Profile object represents a deep copy of the current instance</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.IsProfileLoading">
            <summary>
            A Flag indicating whether the profile is currently in loading process
            </summary>
            <value>
              <c>true</c> if this instance of profile is loading; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.DeleteProfile(System.String)">
            <summary>
            Deletes the profile.
            </summary>
            <param name="name">The name of the profile to be deleted.</param>
            <returns>The <see cref="T:Hummingbird.TestFramework.Configuration.Profile"/> which has been deleted. If "Default" profile is requested for deleting, a <see langword="null"/> object will be returned because default profile is not allowed to be deleted.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.Duplicate(System.String,System.String)">
            <summary>
            Duplicates the specified <see cref="T:Hummingbird.TestFramework.Configuration.Profile"/>.
            </summary>
            <param name="name">The name of the Profile to be duplicated.</param>
            <param name="newName">The name of the new Profile.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.Name">
            <summary>
            Gets or sets the name of the current profile;
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.DefaultProfile">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.ImportFrom(System.String)">
            <summary>
            Imports a <see cref="T:Hummingbird.TestFramework.Configuration.Profile" /> from given location (Full Local or UNC Path)
            </summary>
            <param name="location">The location.</param>
            <returns>A <see cref="T:Hummingbird.TestFramework.Configuration.Profile"/> object loaded from the given location</returns>
        </member>
        <member name="E:Hummingbird.TestFramework.Configuration.Profile.SettingsChanged">
            <summary>
            Occurs when [settings changed].
            </summary>
        </member>
        <member name="E:Hummingbird.TestFramework.Configuration.Profile.PropertyChanged">
            <summary>
            Occurs when The property value has been changed
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.NotifySettingsChanged">
            <summary>
            Notifies the settings changed.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.SavedResponses">
            <summary>
            Gets or sets the saved responses.
            </summary>
            <value>
            The saved responses.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.ServiceParameters">
            <summary>
            Gets or sets the service parameters.
            </summary>
            <value>
            The service parameters.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.EnabledServers">
            <summary>
            Gets or sets the enabled servers.
            </summary>
            <value>
            The enabled servers.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Configuration.Profile"/> class. used for automation engine only.
            </summary>
            <remarks>
            This constructor is for automated test only, to execute the text with a given profile specified in the automation project.
            For manual tests, Test framework used only use <see cref="P:Hummingbird.TestFramework.Configuration.Profile.DefaultProfile"/> to get the current instance.
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.GetCredential(System.String)">
            <summary>
            Get the credential from active test environment with Name
            </summary>
            <param name="name">Name of the credential</param>
            <returns>A Credential object which contains user name and password. if the token is not found, a Null object will be returned.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.GetProfile(System.String)">
            <summary>
            Gets the Profile from it's name
            </summary>
            <param name="name">The name of the profile. (Warning: it is not the filename)</param>
            <returns>The <see cref="T:Hummingbird.TestFramework.Configuration.Profile"/> from a given name. </returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.ActiveProfile">
            <summary>
            Gets the Active profile used by Manual Testing
            </summary>
            <value>
            The active profile object. if the active profile is never set, The <see cref="P:Hummingbird.TestFramework.Configuration.Profile.DefaultProfile"/> will be returned.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.GetSavedResponses(System.Guid)">
            <summary>
            Gets the saved responses.
            </summary>
            <param name="metadataId">The metadata identifier.</param>
            <returns>A list of <see cref="T:Hummingbird.TestFramework.Configuration.SavedResponse"/> object. the return value will never be <see langword="null"/></returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.LoadServiceParameters(System.Guid,System.Collections.Generic.Dictionary{System.String,Hummingbird.TestFramework.Services.Parameter})">
            <summary>
            Loads the service parameters.
            </summary>
            <param name="serviceStrongName">Strong Name of the service.</param>
            <param name="parameters">The parameters list.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.SaveServiceParameter(System.Guid,System.String,System.String)">
            <summary>
            Saves the service parameter.
            </summary>
            <param name="servicename">The strong name of the service.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.ActiveEnvironment">
            <summary>
            Gets the active test environment.
            </summary>
            <value>
            The active test environment.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.DefaultEnvironment">
            <summary>
            Gets the default test environment.
            </summary>
            <value>
            The default test environment.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.SetActiveEnvironment(System.String)">
            <summary>
            Sets the active environment.
            </summary>
            <param name="name">The name of the test environment.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.SetActiveEnvironment(Hummingbird.TestFramework.Configuration.TestEnvironment)">
            <summary>
            Sets the active test environment.
            </summary>
            <param name="env">The test environment</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.Environments">
            <summary>
            ALL Test environments used.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.SystemVariables">
            <summary>
            The Name of all system variables. This list contains only Names, the values are stored in each environment;
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.Credentials">
            <summary>
            This list stores Authentication Tokens used for each environment. The details of each token is environment specific.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.EnvironmentVariables">
            <summary>
            The Name of all environment variables. This list contains only Names, the values are stored in each environment;
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Profile.IsInMemoryProfile">
            <summary>
            Gets or sets a value indicating whether this instance is an in memory profile. In memory profiles are not saved independently from the file system but is used to embedded with other object such as Automation Project and Performance Test Project.
            </summary>
            <value>
              <c>true</c> if this instance is in memory profile; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Configuration.Profile._loadFrom">
            <summary>
            this private string holds the original location where the profile is loaded.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.Save(System.String)">
            <summary>
            Saves the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Profile.Sync">
            <summary>
            Synchronizes the environment variables, system variables and credential between environments.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Configuration.Settings">
            <summary>
            This class saves general settings such as language, theme, log level and log path
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.Instance">
            <summary>
            Single instance of Settings object.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.LogLevel">
            <summary>
            Level of logs to show or be written.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.MaxMessages">
            <summary>
            Maximum number of messages stored and show in Manual Test Runner.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.LogPath">
            <summary>
            Full path of the log file (with out file name). if the path does not exist, Test framework will try to create one.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.FontSize">
            <summary>
            Font-size of the UI
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.Theme">
            <summary>
            Theme of the User Interface
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.CustomThemes">
            <summary>
            XML content of the custom themes
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.PreferedLanguage">
            <summary>
            Language code of preferred UI language. if the value is AUTO, then default OS culture settings will be applied. if the OS culture settings are not supported, the culture will be EN-US.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.CustomParameters">
            <summary>
            Saves the custom parameters and its values requested by the components. StrongName is a GUID value represents such components
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Settings.GetCustomParameter(System.Guid,System.String)">
            <summary>
            returns the value of the parameter in string, if the parameter does not found, returns null
            </summary>
            <param name="StrongName"><see cref="T:System.Guid"/>, the strong name of the components.</param>
            <param name="Name">The name of the parameter.</param>
            <returns>The value of the given parameter. If the parameter name does not exist, the returned value will be null.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Settings.SetCustomParameter(System.Guid,System.String,System.String)">
            <summary>
            Sets the custom parameter.
            </summary>
            <param name="StrongName">the StrongName of the parameter owner.</param>
            <param name="Name">The parameter name.</param>
            <param name="Value">The parameter value.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Settings.Save">
            <summary>
            Persists the settings to disk drive.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Configuration.Settings.Save(System.String)">
            <summary>
            Saves the current settings instance to a specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.MaxSavedRequestsPerService">
            <summary>
            Maximum requests history saved for a service.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.ShowResult">
            <summary>
            Show request result in the WindowsRequest, if false, close the Window.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.ActiveTestEnvironment">
            <summary>
            The name of Active Test Environment 
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.CSVSeparator">
            <summary>
            The separator used to read/write CSV files. By default, the value is aligned with system when settings file is first initialized.
            </summary>
            <remarks>
            In some countries/regions, the separator used in Comma-separated values (CSV) files are not comma (,) but semicolon (;) or pipeline (|).
            You may want to check this settings to make file generated by Hummingbird is compatible with other applications running in your organization, and vice-versa.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.IsFirstRun">
            <summary>
            Gets a value indicating whether the application is launched for the first time.
            </summary>
            <value>
              <c>true</c> if the application is launched for the first time; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.DisabledExtensions">
            <summary>
            Gets the Guid of Disabled extensions. Disabled extensions will not be loaded during application startup.
            </summary>
            <value>
            A List of Guid represents all disabled extensions.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.ActiveProfile">
            <summary>
            Gets or sets the active profile used for Manual testing
            </summary>
            <value>
            The name of the active profile.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.Profiles">
            <summary>
            Gets or sets the profiles used in Hummingbird.
            </summary>
            <value>
            The <see cref="P:Hummingbird.TestFramework.Variable.Name" /> represents the Name of the Profile, the <see cref="P:Hummingbird.TestFramework.Variable.Value" /> represents its location on the disk
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.Settings.MaxConsoleOutputCache">
            <summary>
            Gets or sets the maximum console output can be hold in the automation runner. Default value is 100KB (102400 bytes)
            </summary>
            <value>
            The maximum number in bytes of the console output can be displayed in automated test runner.
            The value must greater than 1024.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Configuration.UsageStatistic">
            <summary>
            Usage Statistic of a given day.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.UsageStatistic.OutgoingSuccess">
            <summary>
            Gets or sets the number of outgoing messages with success.
            </summary>
            <value>
            the number of outgoing messages with success.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.UsageStatistic.OutgoingFailed">
            <summary>
            Gets or sets the number of outgoing which failed.
            </summary>
            <value>
             the number of outgoing which failed.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.UsageStatistic.IncomingSuccess">
            <summary>
            Gets or sets the number of incoming messages which successfully processed.
            </summary>
            <value>
            A numeric value.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.UsageStatistic.IncomingFailed">
            <summary>
            Gets or sets the number of incoming messaged which are failed to process.
            </summary>
            <value>
            The incoming failed.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.UsageStatistic.AutomatedTestPassed">
            <summary>
            Gets or sets the number of automated test executed and passed.
            </summary>
            <value>
            The automated test success.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.UsageStatistic.AutomatedTestWarning">
            <summary>
            Gets or sets the number of automated test executed with warning.
            </summary>
            <value>
            The automated test warning.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.UsageStatistic.AutomatedTestFailed">
            <summary>
            Gets or sets the number of automated test executed but failed.
            </summary>
            <value>
            The automated test failed.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.UsageStatistic.AutomatedTestCreated">
            <summary>
            Gets or sets the number of automated test are created or modified.
            </summary>
            <value>
            The automated test created.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.UsageStatistic.AutomatedTestExecuted">
            <summary>
            Gets the automated test executed.
            </summary>
            <value>
            The automated test executed.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.UsageStatistic.IncomingAll">
            <summary>
            Gets the incoming message count .
            </summary>
            <value>
            The incoming all.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Configuration.UsageStatistic.OutgoingAll">
            <summary>
            Gets the outgoing message count
            </summary>
            <value>
            The outgoing all.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.ConsoleMessage">
            <summary>
            This class is to receive console message that is collected from the console output using <see cref="M:Hummingbird.TestFramework.Utilities.WriteError(System.String,System.Boolean)" /> or <see cref="M:Hummingbird.TestFramework.Utilities.WriteLog(System.String)"/>/>
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ConsoleMessage.ConsoleMessages">
            <summary>
            Gets the console messages in list of lines
            </summary>
            <value>
            The console messages.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.ConsoleMessage.AddLine(System.String)">
            <summary>
            Adds a line to the messages.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="E:Hummingbird.TestFramework.ConsoleMessage.LogWritten">
            <summary>
            Occurs when log has been written to the console.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.EditorTypeAttribute">
            <summary>
            The type of the Editor which the attached object is associated to.
            </summary>
            <remarks>
            When editing the object which tagged with this attribute, the associated editor will be used by Hummingbird Test Framework
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Hummingbird.TestFramework.EditorTypeAttribute.Type">
            <summary>
            Type of the editor which provide GUI to edit an test object.
            </summary>
            <value>
            The type, must be an sub class of <see cref="T:Hummingbird.UI.ModernContent"/>. This type must have a constructor contains two arguments.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.EditorTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.EditorTypeAttribute" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Extensibility.CustomMessageViewer">
            <summary>
            <para><see cref="T:Hummingbird.TestFramework.Extensibility.CustomMessageViewer"/> is an User interface to represent a <see cref="T:Hummingbird.TestFramework.Messaging.Message"/>.
            With this extension, the whole <see cref="T:Hummingbird.TestFramework.Messaging.Message"/> is passed. You can have total control of how to show the messages</para>
            <para>The difference between <see cref="T:Hummingbird.TestFramework.Extensibility.CustomMessageViewer"/> and <see cref="T:Hummingbird.TestFramework.Extensibility.CustomObjectViewer"/> is that: CustomObjectViewer works on the Type of <see cref="P:Hummingbird.TestFramework.Messaging.Message.RequestObject"/> or <see cref="P:Hummingbird.TestFramework.Messaging.Message.ResponseObject"/>, 
            But <see cref="T:Hummingbird.TestFramework.Extensibility.CustomMessageViewer"/> works on the service itself, and it is based on <see cref="P:Hummingbird.TestFramework.Identifier.Id"/></para>
            </summary>
            <seealso cref="T:Hummingbird.UI.ModernContent" />
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.CustomMessageViewer.ParseMessage(Hummingbird.TestFramework.Messaging.Message)">
            <summary>
            Fill the custom message viewer with the data provided 
            </summary>
            <param name="message">The <see cref="T:Hummingbird.TestFramework.Messaging.Message"/> containing the Request, Response, or the Tag</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Extensibility.CustomObjectViewer">
            <summary>
            <para><see cref="T:Hummingbird.TestFramework.Extensibility.CustomObjectViewer"/> gives the ability to show an object in a custom viewer, istead of showing them in Text format.
            For example, binary data, http streams are hard to understand by the developer and tester.</para>
            <para>
            <see cref="T:Hummingbird.TestFramework.Extensibility.CustomObjectViewer"/> can be bind to some types of object, when the message are being viewing by the default message viewer, 
            if the object type matches either <see cref="P:Hummingbird.TestFramework.Messaging.Message.RequestObject"/> or <see cref="P:Hummingbird.TestFramework.Messaging.Message.ResponseObject"/>,
            Test Framework will use this custom object viewer to show it.
            </para>
            </summary>
            <remarks>
            When create a custom view extension, you should define a <see cref="T:System.Type"/> of object that can be edited by the custom view extension.
            To do this, Add a <see cref="T:Hummingbird.TestFramework.Extensibility.ObjectTypeAttribute"/> to the class that inherits <see cref="T:Hummingbird.TestFramework.Extensibility.CustomObjectViewer"/>, and specify the object type to <see cref="P:Hummingbird.TestFramework.Extensibility.ObjectTypeAttribute.ObjectTypes"/>.
            The Test Framework will load it and will show it if <see cref="P:Hummingbird.TestFramework.Messaging.Message.RequestObject"/> or <see cref="P:Hummingbird.TestFramework.Messaging.Message.ResponseObject"/> matches the given type.
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.CustomObjectViewer.ParseObject(System.Object)">
            <summary>
            This function will be called when a fit table object is viewing and the type of the object is registered as "custom view".
            the object will be passed and the CustomViewExtension must show the object in a visual way.
            </summary>
            <param name="o">the object will be passed to this CustomViewExtension, the type of the object will be the same as specified on <see cref="P:Hummingbird.TestFramework.Extensibility.ObjectTypeAttribute.ObjectTypes"/></param>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.CustomObjectViewer.IsExtensionVisible(System.Object)">
            <summary>
            According to the value of the object o, determine if this view is visible.
            </summary>
            <param name="o">the object will be passed to this CustomViewExtension</param>
            <returns>True if the extension should be shown, False if the extension should not be shown.</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.CustomObjectViewer.ExtensionName">
            <summary>
            The name of this extension, This text will be displayed on the Tab item. Do not give a name to long.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Extensibility.CustomToolAttribute">
            <summary>
            This attribute can be tagged on a class inherits <see cref="T:Hummingbird.UI.ModernContent"/>. Hummingbird Application will see that class as a custom tool and will be shown in the main menu.
            </summary>
            <remarks>
            <para>Hummingbird application includes some tools such as base64 encoding, xPath validation and regular expression. The Integrated tools can be extended by using this attribute, tagged on a ModernContent class.</para>
            <para>The ModernContent class will port the user interface and functionality of the tool, while the properties of this attribute determines how the tool will be displayed in a <see cref="T:Hummingbird.UI.ModernTile"/> element</para>
            <para>You can also set an image used in the Tile, in this case, you should also tag an <see cref="T:Hummingbird.TestFramework.ImageSourceAttribute"/> on the class.</para>
            <para>Please note that resources will be loaded by Hummingbird. When using relative Uri, the resource will be searched in the Hummingbird Application assembly.</para>
            <para>For more information and example, please follow the community project on <a href="https://github.com/huaxing-yuan/hummingbird.customtools">Community Custom Tools</a></para>
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.CustomToolAttribute.Name">
            <summary>
            Gets or sets the Name of the of the current custom tool.
            </summary>
            <value>
            The name of the of the current custom tool
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.CustomToolAttribute.Key">
            <summary>
            Gets or sets the key of the Custom Tool, which will be used in the main menu.
            </summary>
            <value>
            The key of the custom tool.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.CustomToolAttribute.UseGradientColor">
            <summary>
            Gets or sets a value indicating whether to use gradient color for the ModernTile.
            </summary>
            <value>
              <c>true</c> if use gradient colors defined in <see cref="P:Hummingbird.TestFramework.Extensibility.CustomToolAttribute.StartColor"/> and <see cref="P:Hummingbird.TestFramework.Extensibility.CustomToolAttribute.EndColor"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.CustomToolAttribute.StartColor">
            <summary>
            Gets or sets the start point of the Background color of the Tile. 
            </summary>
            <value>
            The string that represents a color, either in format #AARRGGBB or #RRGGBB or a valid HTML Color code.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.CustomToolAttribute.EndColor">
            <summary>
            Gets or sets the end point of the Background color of the Tile. 
            </summary>
            <value>
            The string that represents a color, either in format #AARRGGBB or #RRGGBB or a valid HTML Color code.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Extensibility.EditorMode">
            <summary>
            The Mode to edit the object, used by <see cref="T:Hummingbird.TestFramework.Extensibility.ObjectEditorBase"/> and it's derived classes.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Extensibility.EditorMode.ManualMode">
            <summary>
            The default value is Manual Mode, the editor should be optimized to let user easily edit test objects and provide schema propositions.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Extensibility.EditorMode.Automation">
            <summary>
            The automation mode is to give expert level user to create automation test, with possibility to use variables in requests and responses.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Extensibility.ExtensionDefinition">
            <summary>
            Hummingbird Test Framework loads automatically extensions during startup. 
            It will scan each Extensions folder, to find the file ExtensionDefinition.xml. The file content represents this class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.Name">
            <summary>
            Name of the Extension definition
            </summary>
            <remarks>
            <see cref="P:Hummingbird.TestFramework.Identifier.Id"/> contains the Unique Identifier of the extension. Same Id is considered to be the same extension. When adding an extension with the Id, upgrade or downgrade will be performed even if the name is not the same.
            This Id must be the same Guid of your Assembly defined in AssemblyInfo (for C#: AssemblyInfo.cs)
            This Id is also used to get Extension installation information using Global.GetExtensionInformation(Id).
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.Version">
            <summary>
            Version of the current extension. Users can perform Upgrade or Downgrade if Hummingbird TestFramework's version matches.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.MinFrameworkVersion">
            <summary>
            Minimum version of Hummingbird Test Framework where the extension can work. if the value is empty, the minimum version is 1.0.0
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.MaxFrameworkVersion">
            <summary>
            Maximum version of Hummingbird Test Framework where the extension can work. if the value is empty, the extension will work on the same major version as MinFrameworkVersion.
            </summary>
            <example>
            If MinFrameworkVersion is 1.1.0, and MaxFrameworkVersion is empty, the extension will supports all 1.1+ versions: 1.1.0, 1.9.9000, ... but will not support all 2.x versions.
            </example>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.Company">
            <summary>
            Your Company Name if working for an organization or your personal name
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.Description">
            <summary>
            Description of the extension: What services is can call, what service is can be simulated, Which protocol implemented, etc...
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.Copyright">
            <summary>
            Copyright information 
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.MainDllFile">
            <summary>
            Name of the main assembly of the DLL library, This is the assembly loaded.
            If there are other resources file is used, including referenced assembly (.dll), images and other resources, you should add them in AddtionalFiles
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.LicenceFile">
            <summary>
            Name of the License File. The license file can be Plain text (*.txt) or RichText file (*.rtf).
            If a license file is present, a prompt window will shown and user have to accept the license before installation.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.AddtionalFiles">
            <summary>
            Additional files, including the referred files by the extension, including Executable file, 
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.ProfessionalOnly">
            <summary>
            Indicate if this extension can be installed only on Professional and Enterprise version
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.LoadingStatus">
            <summary>
            Gets a value indicating whether this Extension is loaded.
            </summary>
            <value>
              <c>true</c> if this instance is loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.LoadedFrom">
            <summary>
            Gets or sets the Full Path where the extension definition has been loaded.
            </summary>
            <value>
            A String represents the full path of where the extension definition has been loaded.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Extensibility.ExtensionLoadingStatus">
            <summary>
            The loading status of an Extension
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Extensibility.ExtensionLoadingStatus.Loaded">
            <summary>
            The extension is loaded and working.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Extensibility.ExtensionLoadingStatus.Failed">
            <summary>
            The extension is failed to load.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Extensibility.ExtensionLoadingStatus.Disabled">
            <summary>
            User disabled the extension and it is not loaded.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Extensibility.HtmlViewExtension">
            <summary>
            HTML ViewExtention, it previews an object of type "GenericHttpResponse" in a WebBrowser, if the Content-Type of this response is HTML content.
            </summary>
            <remarks>
            This viewer looks at the "Content-Type" Http header, if the content is "text/html" or "application/xhtml+xml", This viewer is visible.
            Otherwise, the viewr is not available to use.
            </remarks>
            <summary>
            HtmlViewExtension
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.HtmlViewExtension.ExtensionName">
            <summary>
            The name of this extension, This text will be displayed on the Tab item. Do not give a name to long.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.HtmlViewExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Extensibility.HtmlViewExtension"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.HtmlViewExtension.ParseObject(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.HtmlViewExtension.IsExtensionVisible(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.HtmlViewExtension.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.HtmlViewExtension.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Extensibility.HttpServiceExtension">
            <summary>
            The base class of a Http Service Extension. Used for Restful Web Services.
            </summary>
            <remarks>
            In the Http Service Extension, it defines all REST web services to be added to Hummingbird. You must provide a list of service to simulate a client or a server.
            You can also add custom view extensions to visualize in your own way the services, instead of using default viewer: the TreeObject-Text editor
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.HttpServiceExtension.HttpRequestServices">
            <summary>
            Gets a list of HTTP Rest services to test. Commonly, these web services are developed by your organization, and you want to test this service.
            </summary>
            <value>
            The HTTP request services.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.HttpServiceExtension.HttpResponseServices">
            <summary>
            Gets a list of HTTP REST service to simulate. Commonly. these web services are developed by another organization, you application will call these services.
            </summary>
            <value>
            The HTTP response services.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.HttpServiceExtension.ServerParameters">
            <summary>
            Gets a list of parameters should be used in server parameters (your HTTP handler uses it)
            </summary>
            <value>
            The server parameters.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.HttpServiceExtension.ClientParameters">
            <summary>
            Gets the client parameters.
            </summary>
            <value>
            The client parameters.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.HttpServiceExtension.GetServerParameter(System.String)">
            <summary>
            Gets the parameter used by <see cref="T:Hummingbird.TestFramework.Services.HttpServer"/>
            </summary>
            <param name="Name">The name of the parameter.</param>
            <returns>The <see cref="T:Hummingbird.TestFramework.Services.Parameter"/> object.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.HttpServiceExtension.GetClientParameter(System.String)">
            <summary>
            Gets the parameter used by <see cref="T:Hummingbird.TestFramework.Services.HttpClient"/>
            </summary>
            <param name="Name">The name of the parameter.</param>
            <returns>The <see cref="T:Hummingbird.TestFramework.Services.Parameter"/> object.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Extensibility.MetadataIdAttribute">
            <summary>
            This <see cref="T:System.Attribute"/> is to attach on a sub class of <see cref="T:Hummingbird.TestFramework.Extensibility.CustomMessageViewer"/>,
            indicating Test Framework to show certain message by using this custom message viewer.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.MetadataIdAttribute.Id">
            <summary>
            Gets or sets a list of <see cref="P:Hummingbird.TestFramework.Identifier.Id"/> that can be viewed by the <see cref="T:Hummingbird.TestFramework.Extensibility.CustomMessageViewer"/> where this attribute attaches.
            </summary>
            <remarks>
            The Id is an array of <see cref="T:System.String"/>, but each element represents a <see cref="T:System.Guid"/>. for example: "06362f1c-586f-4f8d-bc3f-169cc11d60b5"
            </remarks>
            <value>
            An array of the Metadata Id in Guid format.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.MetadataIdAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Extensibility.MetadataIdAttribute"/> class.
            </summary>
            <param name="guidArray">An array of <see cref="T:System.String"/>, while each string element represents a guid. for example : "06362f1c-586f-4f8d-bc3f-169cc11d60b5"</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Extensibility.ObjectEditorBase">
            <summary>
            Base class of the custom object editor
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.SetXml(System.String)">
            <summary>
            Force sets the XML content and show the XML content tab.
            </summary>
            <param name="xml">The XML content</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.RequestLength">
            <summary>
            Gets or sets the length of the request in text format.
            </summary>
            <value>
            The length of the request.
            </value>
            if is recommended to apply lazy loading for large requests. Hummingbird Test Framework will apply lazy loading if the request is larger than 32KB.
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.ObjectType">
            <summary>
            The Type of the current editing object. it should be the RequestType or the ResponseType used in AbstractMetadata
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.CurrentDocumentFormat">
            <summary>
            Gets the current document format according to the given Serializer and AbstractMetadata
            </summary>
            <value>
            The current document format.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.ServiceMetadata">
            <summary>
            Gets or sets the service metadata related to current editing object.
            </summary>
            <value>
            The service metadata.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.ObjectValue">
            <summary>
            Gets or sets the object is being editing.
            </summary>
            <value>
            The object value.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.TestItem">
            <summary>
            Gets or sets the test item used for editing the object (mainly for variable token replacement)
            </summary>
            <value>
            The test item can be TestStep, TestCase, TestSuite or AutomationProject
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.ObjectStringValue">
            <summary>
            Gets or Sets the serialized object with its default serializer. 
            </summary>
            <value>
            The object in serialized value with its default serializer. For example, for the Soap web service, the value is an XML documents in SOAP Envelope
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.IsModified">
            <summary>
            Gets or sets a value indicating whether this instance is modified.
            </summary>
            <value>
              <c>true</c> if this instance is modified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the Text and object viewed by the editor is read only.
            </summary>
            <value>
              <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.Serializer">
            <summary>
            The serializer of the object.
            </summary>
            <remarks>The editing object must be serialized before it can be saved and represented as text</remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.Sync">
            <summary>
            The method to synchronize the editing object and assign it's value to ObjectValue.
            This method will be automatically called by the framework
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.Sync(System.Int32)">
            <summary>
            The method to synchronize the editing object and assign it's value to ObjectValue.
            This method will be automatically called by the framework
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.SupportedObjectTypes">
            <summary>
            The list of Types which this editor supports to edit. please set this value to <see cref="P:Hummingbird.TestFramework.Services.AbstractMetadata.RequestType"/> or <see cref="P:Hummingbird.TestFramework.Services.AbstractMetadata.ResponseType"/> of your services, this information can be found in the Metadata.
            Attention: if you set this value to [TypeOf(object)], then this editor will edit all kind of objects.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.#ctor(Hummingbird.TestFramework.Automation.AbstractTestItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Extensibility.ObjectEditorBase" /> class.
            </summary>
            <param name="testItem">The test item.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.#ctor(Hummingbird.TestFramework.Serialization.AbstractSerializer,Hummingbird.TestFramework.Automation.AbstractTestItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Extensibility.ObjectEditorBase" /> class.
            </summary>
            <param name="serializer">The Serializer used to serialize and deserialize objects.</param>
            <param name="testItem">The test item in the scope</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.#ctor(Hummingbird.TestFramework.Serialization.AbstractSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Extensibility.ObjectEditorBase"/> class.
            </summary>
            <param name="serializer">The Serializer used to serialize and deserialize objects.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.EditorMode">
            <summary>
            Gets or sets the editing mode of the object editor
            </summary>
            <value>
            The editing mode.
            </value>
        </member>
        <member name="F:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.EditorModeProperty">
            <summary>
            The editor mode property
            </summary>
        </member>
        <member name="E:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.EditorModeChanged">
            <summary>
            Occurs when the property <see cref="P:Hummingbird.TestFramework.Extensibility.ObjectEditorBase.EditorMode"/> is changed.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Extensibility.ObjectTypeAttribute">
            <summary>
            ObjectTypeAttribute is to attach on a <see cref="T:Hummingbird.TestFramework.Extensibility.CustomObjectViewer"/> to tell the test framework that which kind of object that can be viewed by the given <see cref="T:Hummingbird.TestFramework.Extensibility.CustomObjectViewer"/>.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.ObjectTypeAttribute.ObjectTypes">
            <summary>
            Gets or sets the Types of the object can be viewed by the attached <see cref="T:Hummingbird.TestFramework.Extensibility.CustomObjectViewer"/>
            </summary>
            <value>
            An array of types.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Extensibility.WebServiceExtension">
            <summary>
            WebServiceExtension class defines the content of extended SOAP Web Service. 
            In this class, You define the Web Service to test or the Web Service to simulate.
            You can also use CustomViewExtensions to build a custom view of desired services.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.WebServiceExtension.ClientServices">
            <summary>
            Gets a list of Web Services to test.
            </summary>
            <value>
            Hummingbird Test Framework is used as a client to call your target web service.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Extensibility.WebServiceExtension.ServerServices">
            <summary>
            Gets a list of Web Services to simulate
            </summary>
            <value>
            Hummingbird Test Framework is used as virtual service to simulate the web service which your application will call.
            You need to point your application to this simulated service (configuration of your application may need to change)
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.ExtensibleObjects">
            <summary>
            This class stores the instantiated Clients and Servers that can be used later.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.ExtensionMethods">
            <summary>
            The static class holds all extension methods provided by Hummingbird Test Framework
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Extends the LINQ expression to IEnumerable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.Contains(System.String,System.String,System.Boolean)">
            <summary>
            if a pattern is found in the string
            </summary>
            <param name="this">String object</param>
            <param name="pattern">pattern to be found in the string object</param>
            <param name="ignordCase">False, if the search is case sensitive, or True if the search is case insensitive</param>
            <returns>True if the pattern is found in the string, False if the pattern is not found.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.Remove``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all items matches the condition of an ObservableCollection
            </summary>
            <typeparam name="T">Type of objects in the ObservableCollection</typeparam>
            <param name="coll">The container ObservableCollection</param>
            <param name="condition">Condition where the items should be removed.</param>
            <returns>Number of items removed from the collection</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.GetDescription``1(``0)">
            <summary>
            Get the Description of an <see cref="T:System.Enum"/> value, if that enumeration value is marked by DescriptionAttribute
            </summary>
            <typeparam name="T">Type of the enumeration</typeparam>
            <param name="enumerationValue">value</param>
            <returns>The description of an Enum object.</returns>
            <example>
            public enum Versions {
            [Description("1.0")]
            Version10
            }
            </example>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.AddItem(System.Collections.Generic.IList{Hummingbird.TestFramework.Variable},Hummingbird.TestFramework.Variable)">
            <summary>
            Adds an <see cref="T:Hummingbird.TestFramework.Variable"/> in the collection. if the variable of the same Name exists already, the value of that variable will be replaced. 
            </summary>
            <param name="collection">The collection of NameValuePair.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.AddItem(System.Collections.Generic.IList{Hummingbird.TestFramework.Variable},System.String,System.String)">
            <summary>
            Adds an <see cref="T:Hummingbird.TestFramework.Variable"/> in the collection. if the variable of the same Name exists already, the value of that variable will be replaced.
            </summary>
            <param name="collection">The collection of NameValuePair.</param>
            <param name="name">The name of the variable</param>
            <param name="value">The value of the variable</param>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.AddRange(System.Collections.Generic.IList{Hummingbird.TestFramework.Variable},System.Collections.Generic.IList{Hummingbird.TestFramework.Variable})">
            <summary>
            Adds a range of variable into a collection. The variables added into the collection is a copy. its reference is independent to the original one.
            </summary>
            <param name="collection">The collection.</param>
            <param name="variables">The variables.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.GetItem(System.Collections.Generic.IEnumerable{Hummingbird.TestFramework.Variable},System.String)">
            <summary>
            Gets the item from the current List by its name
            </summary>
            <param name="collection">The collection of the NameValuePair.</param>
            <param name="name">The name of the NameValuePair</param>
            <returns>
            The <see cref="T:Hummingbird.TestFramework.Variable"/> object which its Name is specified by the name parameter.
            If the object is not found, a <see langword="null"/> value will be returned.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.GetValue(System.Collections.Generic.IList{Hummingbird.TestFramework.Variable},System.String)">
            <summary>
            Gets the value of the NameValuePair specified by its name
            </summary>
            <param name="collection">The collection of the NameValuePair</param>
            <param name="name">The name of the NameValuePair</param>
            <returns>
            The value of the <see cref="T:Hummingbird.TestFramework.Variable"/> which its Name is specified by the name parameter.
            If the NameValuePair is not found, a <see langword="null"/> value will be returned.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.MergeWith(System.Collections.Generic.IList{Hummingbird.TestFramework.Variable},System.Collections.Generic.IList{Hummingbird.TestFramework.Variable})">
            <summary>
            Merges the collection with another one, ignoring the existent element.
            </summary>
            <param name="collection">The collection to merge</param>
            <param name="newitems">Another collection to be merged </param>
            <remarks>
            If an element has already exists, it will not be added or replaced. The one exist already in the collection will be kept.
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.Copy(Hummingbird.TestFramework.Automation.TestStepBase,System.String@)">
            <summary>
            Deep copy the given TestStep from the original by using serialization.
            </summary>
            <param name="original">The original <see cref="T:Hummingbird.TestFramework.Automation.TestStepBase" /> object.</param>
            <param name="content">The content in XML of the deserialzed object representing the original </param>
            <returns>A <see cref="T:Hummingbird.TestFramework.Automation.TestStepBase"/> object, deep copied from the original test step.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.AddRange``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Adds a range of variable into a collection. The variables added into the collection is a copy. its reference is independent to the original one.
            </summary>
            <typeparam name="T">The Type of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /></typeparam>
            <param name="this">The collection where elements will be added to.</param>
            <param name="another">The collection where its elements will be added from.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionMethods.IsProfessionalOnly(System.Type)">
            <summary>
            Determines whether the test item can only be used in Professional version. 
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the test item is professional only otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.ExtensionProject.ExtensionNode">
            <summary>
            Base node of the service definitions.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.IsDeserialzing">
            <summary>
            Gets or sets a value indicating whether this instance is deserialzing.
            </summary>
            <value>
              <c>true</c> if this instance is deserialzing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.Name">
            <summary>
            Gets or sets the name of the node (represents Application, Category or Service)
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.ExtensionProject.ExtensionNode"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
            <value>
            The create date.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.LastModificationDate">
            <summary>
            Gets or sets the last modification date.
            </summary>
            <value>
            The last modification date.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.IsAnalysed">
            <summary>
            Gets or sets a value indicating whether this instance is analyzed.
            </summary>
            <value>
              <c>true</c> if this instance is analyzed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.AnalysedDate">
            <summary>
            Gets or sets the date where the extension is analyzed.
            </summary>
            <value>
            The analyzed date, this date is assigned when <see cref="M:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.Analyze"/> is called. There is no need to assign value in <see cref="M:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.InternalAnalyze"/> function in derived class.
            </value>
        </member>
        <member name="E:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.PropertyChanged">
            <summary>
            Occurs when property value changed.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies the property value has been changed.
            </summary>
            <param name="PropertyName">Name of the property which changed their value.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.InternalAnalyze">
            <summary>
            Analyze from initial file and fills service the information to different 
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.Analyze">
            <summary>
            Call the analyzer and mark IsAnalysed flag and date.
            </summary>
            <returns>
            null string if there is no errors.
            or the error messages if there is an error
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.ExtensionNode.AnalyzeAsync">
            <summary>
            Call the analyzer and mark IsAnalysed flag and date in asynchronous mode
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.ExtensionProject.OpenApiServiceCategory">
            <summary>
            A category of the services, to hold a set of web services from an OpenAPI service description.
            The supported documents are OpenAPI 2.0 (Swagger) and OpenAPI 3.0 (Yaml)
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.ExtensionProject.ServiceCategory" />
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.OpenApiServiceCategory.Options">
            <summary>
            Gets or sets the options used to analyze 
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.OpenApiServiceCategory.BaseUrl">
            <summary>
            Gets or sets the base URL.
            </summary>
            <value>
            The base URL.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.OpenApiServiceCategory.InternalAnalyze">
            <summary>
            Analyze from initial file and fills service the information to different
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.OpenApiServiceCategory.#ctor(Hummingbird.TestFramework.ExtensionProject.ServiceApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.ExtensionProject.OpenApiServiceCategory"/> class.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.OpenApiServiceCategory.DefinitionFile">
            <summary>
            The entry point of the definition file. For Swagger Services it is the swagger.json file.
            For other type of services, This property is not used.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.OpenApiServiceCategory.CodeFiles">
            <summary>
            Generated code files for reused and private Open API Schema
            </summary>
            <value>
            <see cref="T:Hummingbird.TestFramework.SerializableDictionary`2" /> where the TKey will be the name of the schema, and TValue will be the content of the source code.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.OpenApiServiceCategory.Operations">
            <summary>
            Gets the operations.
            </summary>
            <value>
            The operations.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.ExtensionProject.Project">
            <summary>
            The structure of an Extension Project, used by Extension Designer
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.Id">
            <summary>
            Gets or sets the GUID identifier of the project.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.Name">
            <summary>
            Friendly Name of the current Extension Project.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.AssemblyName">
            <summary>
            AssemblyName of the current Extension Project. It is Recommended to use Hummingbird.YourCompany.YourProject as the assembly name.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.AssemblyDescription">
            <summary>
            A brief description of this extension, it will be used as AssemblyDescription of your output.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.AssemblyVersion">
            <summary>
            Gets or sets the assembly version.
            </summary>
            <value>
            The assembly version can be like: 1.0, 1.0.0.0
            Use 1.0.* to automatically generates versions
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.AssemblyCompany">
            <summary>
            Company name or the Author of the current extension
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.AssemblyCopyright">
            <summary>
            Copyright information.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.AssemblyProduct">
            <summary>
            Product name of the current extension
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.Project.Save">
            <summary>
            Saves this instance. when the file has never been saved or loaded, the return value will be False. SaveAs(string path) should be called for the first save.
            </summary>
            <returns>Boolean value indicates if the save is successful, if not user have to choose a path and filename to save again using SaveAs</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.Project.SaveAs(System.String)">
            <summary>
            Saves this instance as another file
            </summary>
            <param name="path">The path.</param>
            <returns>Boolean value indicates if the save is successful. </returns>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.LoadedPath">
            <summary>
            Gets the Path where is Extension project is loaded or last saved.
            </summary>
            <value>
            The full path of the current extension project file.
            </value>
        </member>
        <member name="E:Hummingbird.TestFramework.ExtensionProject.Project.PropertyChanged">
            <summary>
            Occurs when property value changed.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.Applications">
            <summary>
            List of Systems (application) simulated by the extension
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.IsSaved">
            <summary>
            Flag if the extension project is saved.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.Project.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.ExtensionProject.Project"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.Project.LoadFrom(System.String)">
            <summary>
            Loads an extension project from local or UNC path
            </summary>
            <param name="path">The absolute path (local or UNC path) of the extension project.</param>
            <returns>A <see cref="T:Hummingbird.TestFramework.ExtensionProject.Project"/> object, represents an extension project loaded from the ginven path.</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.RootNamespace">
            <summary>
            Gets or sets the root namespace of the project
            </summary>
            <value>
            The root namespace.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.GeneratedCsProjectFile">
            <summary>
            Gets or sets the full path to the generated *.csproj file. 
            This value will be ignored after reloading the extension project, to ensure the project files to be regenerated.
            </summary>
            <value>
            The generated cs project file.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.OutputPath">
            <summary>
            Gets or sets the last output path used to generate Visual Studio project and build the assembly
            </summary>
            <value>
            The output path.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.LicenseFileName">
            <summary>
            Gets or sets the name of the license file.
            </summary>
            <value>
            The name of the license file.
            </value>
            <remarks>
            The license file can be any document type supported by windows, including: .txt, .rtf, .pdf, .docx, .xps, .htm, .html. for security reasons, all other file types are not allowed.</remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.LicenseFileContent">
            <summary>
            Gets or sets the content of the license file.
            </summary>
            <value>
            The content of the license file.
            </value>
            <remarks>
            The license file can be any document type supported by windows.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.ZipArchive">
            <summary>
            Gets the zip archive file that contains the extension package. 
            </summary>
            <value>
            The zip archive.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Project.BinaryFolder">
            <summary>
            Gets the binary folder where the extension has been generated. usually the Binary folder contains "ExtensionDefinition.xml" and the Dll files
            </summary>
            <value>
            The binary folder.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.ExtensionProject.Service">
            <summary>
            Service represents a simulated Web Service.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.ExtensionProject.ExtensionNode" />
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.Service.#ctor(Hummingbird.TestFramework.ExtensionProject.ServiceCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.ExtensionProject.Service"/> class.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Service.ServiceType">
            <summary>
            Gets the type of current service: SOAP, JSON, ...
            </summary>
            <returns>Text value that represents the type of the service</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Service.ReferredCategory">
            <summary>
            Gets the referred ServiceCategory where this Service belongs.
            </summary>
            <value>
            The referred category.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Service.Username">
            <summary>
            Gets or sets the user name used to initialize service description and call the web service.
            </summary>
            <value>
            The user name.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Service.Password">
            <summary>
            Gets or sets the password used to initialize service description and call the web service.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Service.ServerServiceId">
            <summary>
            Gets or sets the server service identifier, it is generated when the instance is initialized.
            </summary>
            <value>
            The server service identifier.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Service.ClientServiceId">
            <summary>
            Gets or sets the client service identifier. it is generated once when the instance is initialized.
            If the service has multiple Endpoints or Service Contracts, then the Identifier will be generated according to this ServiceId and the Contract Name
            </summary>
            <value>
            The client service identifier.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Service.DefinitionFile">
            <summary>
            The entry point of the definition file. For SOAP WebServices, it is the .WSDL file, For Swagger Services it is the swagger.json file.
            For other type of services, This property is not used.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Service.TargetNamespace">
            <summary>
            Gets or sets the target namespace for generated code
            </summary>
            <value>
            The target namespace.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Service.GeneratedProxyCode">
            <summary>
            Gets or sets the generated C# code for WCF Proxy.
            </summary>
            <value>
            The generated proxy code.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Service.ProxyCodeAssembly">
            <summary>
            Gets or sets the Assembly object (Compiled from GeneratedProxyCode).
            </summary>
            <value>
            The Assembly of the WCF Proxy code, this object is not serialized and will not be saved in the extension project.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Service.ProxyCodeAssemblyContent">
            <summary>
            Gets or sets the proxy code assembly (dll) value represented in byte[], so it can be serialized and loaded.
            </summary>
            <value>
            The content of the proxy code assembly.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.Service.GeneratedStubCode">
            <summary>
            Gets or sets the generated C# code for WCF service stub (used as simulator)
            </summary>
            <value>
            The generated stub code.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.ExtensionProject.ServiceCategory">
            <summary>
            A category of the services
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.ExtensionProject.ExtensionNode" />
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceCategory.Services">
            <summary>
            Gets or sets the services.
            </summary>
            <value>
            The services.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceCategory.ReferredApplication">
            <summary>
            Gets the referred <see cref="T:Hummingbird.TestFramework.ExtensionProject.ServiceApplication"/> of this ServiceCategory
            </summary>
            <value>
            The referred application.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.ServiceCategory.InternalAnalyze">
            <summary>
            Analyse from initial file and fills service the information to different
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.ServiceCategory.#ctor(Hummingbird.TestFramework.ExtensionProject.ServiceApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.ExtensionProject.ServiceCategory"/> class.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.ExtensionProject.ServiceApplication">
            <summary>
            System (Application) to drive (as driver) or simulate (as service simulator)
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceApplication.ServiceCategorys">
            <summary>
            Gets or sets the service categories
            </summary>
            <value>
            The service categories.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceApplication.ReferredProject">
            <summary>
            Gets the referred project where is ServiceApplication belongs.
            </summary>
            <value>
            The referred project.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.ServiceApplication.InternalAnalyze">
            <summary>
            Analyze from initial file and fills service the information to different
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.ServiceApplication.#ctor(Hummingbird.TestFramework.ExtensionProject.Project)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.ExtensionProject.ServiceApplication"/> class.
            </summary>
            <param name="project">The project.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration">
            <summary>
            This class defines the definition of an Endpoint of a WSDL Service.
            The properties of the ServiceEndpoint is initialized from WSDL, but users can define the content of the ServiceEndpoint which will be take account in the code generation.
            For example: User can raise protection level of the service or changes the Uri Template.
            </summary>
        </member>
        <member name="E:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.BindingType">
            <summary>
            Gets the type of the WCF Binding. This field is read only.
            </summary>
            <value>
            The possible values can be any of the Binding object specified in WCF: BasicHttpBinding, WSHttpBinding, CustomBinding 
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.SoapVersion">
            <summary>
            Gets the SOAP version of the current service.
            </summary>
            <value>
            The SOAP version.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.MessageEncoding">
            <summary>
            Gets a value indicating whether to send messages in MtoM].
            </summary>
            <value>
              <c>true</c> if [send mto m]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.SessionMode">
            <summary>
            Specifies the values available to indicate the support for reliable sessions that a contract requires or supports.
            </summary>
            <value>
            The session mode. default value 
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.ClientServiceId">
            <summary>
            Gets or sets the client service identifier. it is generated once when the instance is initialized.
            If the service has multiple Endpoints or Service Contracts, then the Identifier will be generated according to this ServiceId and the Contract Name
            </summary>
            <value>
            The client service identifier.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.ContractInterfaceType">
            <summary>
            Gets or sets the type of the Generated WCF Client
            </summary>
            <value>
            The type of the client.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.ClientUriTemplate">
            <summary>
            <para>Uri Template as client to call target web services. it can contains variables</para>
            <para>Uri must start with http:// or https:// </para>
            </summary>
            <remarks>
            The URI must start with <code>http://</code> or <code>https://</code>
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.FriendlyName">
            <summary>
            Gets the name of the contract. 
            </summary>
            <value>
            The name of the contract.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.IsClient">
            <summary>
            Gets or sets a value indicating whether this service is used as client (Driver).
            </summary>
            <value>
              <c>true</c> if this instance is client; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.IsServer">
            <summary>
            If the service is used as Stub, to simulate web service and to be called.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.Name">
            <summary>
            Gets or sets the name of the service Endpoint
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.ProtectionLevel">
            <summary>
            Gets or sets the protection level if the service is protected by WS-Security
            If the server side must verify the signature of the caller, assign with ProtectionLevel.Sign
            If the transmission should be encrypted, assign with ProtectionLevel.EncryptAndSign
            The default value is None. When using protection for web service, you must configure a Certificate.
            </summary>
            <value>
            The protection level: None, Sign, EncryptAndSign
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.SerializedBinding">
            <summary>
            Gets or sets the XML representation of the BindingObject. if the BindingType is BasicHttpBinding, this property is ignored.
            </summary>
            <value>
            The XML representation of a Binding object.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.ServerServiceId">
            <summary>
            Gets or sets the server service identifier, it is generated when the instance is initialized.
            </summary>
            <value>
            The server service identifier.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.ServerUriTemplate">
            <summary>
            Uri Template as Server (Service simulator), The Uri contains only absolute path, and must starts with /. Variables are allowed.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.ServerStubType">
            <summary>
            Gets the type of the Server Stub code generated by the WsdlServiceAnalyser.
            </summary>
            <value>
            The type will be used to generate code for WebServiceServerExtensions
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.ServiceConfiguration.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies the property value has been changed.
            </summary>
            <param name="PropertyName">Name of the property which changed their value.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.ExtensionProject.ServiceType">
            <summary>
            <para>Type of the service supported by extension project</para>
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.ExtensionProject.ServiceType.SOAP">
            <summary>
            The classique SOAP web services, defined by WSDL
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.ExtensionProject.ServiceType.SWAGGER">
            <summary>
            REST Web services defined with Swagger
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.ExtensionProject.ServiceType.REST_XML">
            <summary>
            REST Web services where requests/responses are based on XML document, and types are defined in XSD files
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.ExtensionProject.ServiceType.REST_JSON">
            <summary>
            REST Web Services where requests/responses are based on JSON object. and types are defined in JSON files
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.ExtensionProject.SoapService">
            <summary>
            A SOAP based web service, defined in WSDL.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.ExtensionProject.Service" />
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.SoapService.#ctor(Hummingbird.TestFramework.ExtensionProject.ServiceCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.ExtensionProject.SoapService"/> class.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.SoapService.Endpoints">
            <summary>
            Gets or sets the endpoints of this service.
            </summary>
            <value>
            The endpoints.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.SoapService.IsOrdered">
            <summary>
            Gets a value indicating whether XML tags' order is important.
            </summary>
            <value>
              <c>true</c> if XML Tags must be ordered; otherwise, <c>false</c>.
            </value>
            <remarks>
            In XML documents structures are defined in xsd:Sequence. Some service may accept structures unordered, some not. Use unordered structure lets your requests and response more compatible with other service test softwares.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.SoapService.IsDispatchByBody">
            <summary>
            Indicate when used as ServerStub, the service is dispatched by body element.
            It's value is False.
            </summary>
            <remarks>
            This flag must be true if all operation has no SoapAction defined in WSDL.
            When set to True, the code generator will add "DispatchByBodyBehavior" to the generated interface.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.ExtensionProject.SoapService.ServiceType">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.ExtensionProject.SoapService.InternalAnalyze">
            <summary>
            Analyze from initial file and fills service the information to different
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.ExtensionProject.SoapVersion">
            <summary>
            The Version of SOAP Message
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.ExtensionProject.SoapVersion.Soap11">
            <summary>
            The SOAP 1.1
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.ExtensionProject.SoapVersion.Soap12">
            <summary>
            The SOAP 1.2
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Identifier">
            <summary>
            This class provides a Identifier property for all the classes that can be identified by its Id. 
            This class is used in <see cref="T:Hummingbird.TestFramework.Services.AbstractService"/> to identify the ServiceId, it is used in <see cref="T:Hummingbird.TestFramework.Services.AbstractMetadata"/> to identify the service metadata,
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Identifier.Id">
            <summary>
            This property must be initialized in the constructor of derived class and must be given a fixed GUID.
            the GUID must be a constant in code, and should not equals to any other classes derived from AbstractService.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.ImageSourceAttribute">
            <summary>
            Provides an string containing the URI for the image source.
            </summary>
            <remarks>
            <para><see cref="P:Hummingbird.TestFramework.ImageSourceAttribute.ImageSource"/> refers an image packed in an assembly. To refer this image, you should use a Uri format that is reserved in WPF.</para>
            <para>To know more about Pack URI in WPF, please refers here <a href="https://docs.microsoft.com/en-us/dotnet/framework/wpf/app-development/pack-uris-in-wpf">Pack URIs in WPF</a></para>
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Hummingbird.TestFramework.ImageSourceAttribute.ImageSource">
            <summary>
            Gets or sets the image source.
            </summary>
            <value>
            The image source.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Log">
            <summary>
            Technical log
            </summary>
        </member>
        <member name="E:Hummingbird.TestFramework.Log.MessageAdded">
            <summary>
            Occurs when a message is added to the log. Sender of the event handler contains the added message.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Log.WriteMessage(Hummingbird.TestFramework.LogLevel,System.String)">
            <summary>
            Writes the message into log
            </summary>
            <param name="level">The level of the message.</param>
            <param name="content">The content of the message.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Log.WriteMessage(Hummingbird.TestFramework.LogMessage)">
            <summary>
            Writes the message into log
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Log.Clear">
            <summary>
            Clears the log.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Log.GetMessages">
            <summary>
            Gets the messages from the Log
            </summary>
            <returns>A array of <see cref="T:Hummingbird.TestFramework.LogMessage"/> from the current log.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.LogDestinations">
            <summary>
            Where the log will be written, By default, the log will only be written in Console and can be read via Hummingbird Test Manager
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.LogDestinations.Console">
            <summary>
            Show the log in the Console and readable via Hummingbird Test Manager
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.LogDestinations.File">
            <summary>
            Write the log in the file. A destination folder must be provided in your Settings
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.LogDestinations.Debug">
            <summary>
            Write the log in Visual Studio Debug window, useful to debug extended components
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.LogMessage">
            <summary>
            Message to log
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.LogMessage.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>
            The date.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.LogMessage.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.LogMessage.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.LogMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.LogLevel">
            <summary>
            Level of log to be written in console and log file
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.LogLevel.None">
            <summary>
            Nothing will be logged.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.LogLevel.Error">
            <summary>
            Log only Error messages;
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.LogLevel.Information">
            <summary>
            Log Information and Error messages.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.LogLevel.Debug">
            <summary>
            Log Debug, Information adn Error messages.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.LogLevel.Verbose">
            <summary>
            Log everything.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Cryptography.Aes">
            <summary>
            Encrypt and Decrypt using AES algorithm
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Cryptography.CryptographyBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Aes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Cryptography.Aes"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Aes.Encrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts the specified data by providing encryption key and other data.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The initial vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the encrypted data. For hash methods, the hashed data
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Aes.Decrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts the specified key.
            </summary>
            <param name="key">The Encryption Key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the decrypted data. For hash methods, this method will throw an Exception.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Cryptography.CryptographyBase">
            <summary>
            The base class of Cryptography algorithms
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Cryptography.CryptographyBase.HasKey">
            <summary>
            Gets or sets a value indicating whether this instance has key. Hash method does not have a key.
            </summary>
            <value>
              <c>true</c> if this instance has key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Cryptography.CryptographyBase.HasIV">
            <summary>
            Gets or sets a value indicating whether this instance has an Initial Vector.
            </summary>
            <value>
              <c>true</c> if this instance has Initial vector; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Cryptography.CryptographyBase.CanDecrypt">
            <summary>
            Gets or sets a value indicating whether this instance can decrypt.
            </summary>
            <value>
              <c>true</c> if this instance can decrypt; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Cryptography.CryptographyBase.HasOptions">
            <summary>
            Gets or sets a value indicating whether this instance has options including <see cref="T:System.Security.Cryptography.CipherMode"/> and <see cref="T:System.Security.Cryptography.PaddingMode"/>
            </summary>
            <value>
              <c>true</c> if this instance has options; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Cryptography.CryptographyBase.UseCertificate">
            <summary>
            Gets or sets a value indicating whether this algorithm need a certificate to do Encryption or Decryption (RSA algorithm for example).
            </summary>
            <value>
              <c>true</c> if user must provide a certificate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.CryptographyBase.Encrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts the specified data by providing encryption key and other data.
            </summary>
            <param name="key">The encryption key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the encrypted data. For hash methods, the hashed data
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.CryptographyBase.Decrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts the specified key.
            </summary>
            <param name="key">The Encryption Key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the decrypted data. For hash methods, this method will throw an Exception.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.CryptographyBase.SymmetricEncrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Byte[],System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            This is an internal encrypt method used to encrypt all Symmetric algorithms
            </summary>
            <param name="provider">The Symmetric Algorithm encryption provider.</param>
            <param name="key">The Encryption key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="data">The data to encrypt.</param>
            <param name="ciphermode">The <see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingmode">The <see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>Byte array containing the encrypt data.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.CryptographyBase.SymmetricDecrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Byte[],System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            This is an internal encrypt method used to decrypt all Symmetric algorithms
            </summary>
            <param name="provider">The Symmetric Algorithm encryption provider.</param>
            <param name="key">The Encryption key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="data">The data to encrypt.</param>
            <param name="ciphermode">The <see cref="T:System.Security.Cryptography.CipherMode"/>.</param>
            <param name="paddingmode">The <see cref="T:System.Security.Cryptography.PaddingMode"/>.</param>
            <returns>Byte array containing the decrypted data.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Cryptography.Des">
            <summary>
            Encrypt and Decrypt using DES algorithm
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Cryptography.CryptographyBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Des.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Cryptography.Des"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Des.Encrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts the specified data by providing encryption key and other data.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the encrypted data. For hash methods, the hashed data
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Des.Decrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the decrypted data. For hash methods, this method will throw an Exception.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Cryptography.MD5">
            <summary>
            Hash using MD5 algorithm
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Cryptography.CryptographyBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.MD5.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Cryptography.MD5"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.MD5.Encrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts the specified data by providing encryption key and other data.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the encrypted data. For hash methods, the hashed data
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.MD5.Decrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts the specified keys.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the decrypted data. For hash methods, this method will throw an Exception.
            </returns>
            <exception cref="T:System.NotImplementedException">MD5 is a hash method, data cannot be decrypted</exception>
        </member>
        <member name="T:Hummingbird.TestFramework.Cryptography.RC2">
            <summary>
            Encrypt and Decrypt using RC2 algorithm
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Cryptography.CryptographyBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.RC2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Cryptography.RC2"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.RC2.Encrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts the specified data by providing encryption key and other data.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the encrypted data. For hash methods, the hashed data
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.RC2.Decrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the decrypted data. For hash methods, this method will throw an Exception.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Cryptography.Rsa">
            <summary>
            Encrypt and Decrypt using RSA algorithm
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Cryptography.CryptographyBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Rsa.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Cryptography.Rsa"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Rsa.Encrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts the specified data by providing encryption key and other data, with a PKCS#12 certificate (*.pfx file)
            </summary>
            <param name="key">The key is not used.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the encrypted data. For hash methods, the hashed data
            </returns>
            <exception cref="T:System.ArgumentNullException">The certificate has not been provided.\nTo use RSA encryption or decryption, a valid PKCS#12 certificate (*.pfx file) must be provided.</exception>
            <remarks>
            RSA is an asymmetric encryption method. We uses the public key to encrypt data and private key to decrypt data. The key parameter is not used.
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Rsa.Decrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the decrypted data. For hash methods, this method will throw an Exception.
            </returns>
            <exception cref="T:System.ArgumentNullException">The certificate has not been provided.\nTo use RSA encryption or decryption, a valid PKCS#12 certificate (*.pfx file) must be provided.</exception>
            <remarks>
            RSA is an asymmetric encryption method. We uses the public key to encrypt data and private key to decrypt data. The key parameter is not used.
            </remarks>
        </member>
        <member name="T:Hummingbird.TestFramework.Cryptography.Sha1">
            <summary>
            The hash method using SHA-1 algorithm
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Cryptography.CryptographyBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Sha1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Cryptography.Sha1"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Sha1.Encrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts the specified data by providing encryption key and other data.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the encrypted data. For hash methods, the hashed data
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Sha1.Decrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the decrypted data. For hash methods, this method will throw an Exception.
            </returns>
            <exception cref="T:System.NotImplementedException">sha1 is a hash method, data cannot be decrypted</exception>
        </member>
        <member name="T:Hummingbird.TestFramework.Cryptography.Sha256">
            <summary>
            The hash method using SHA-256 algorithm
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Cryptography.CryptographyBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Sha256.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Cryptography.Sha256"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Sha256.Encrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts the specified data by providing encryption key and other data.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the encrypted data. For hash methods, the hashed data
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Sha256.Decrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the decrypted data. For hash methods, this method will throw an Exception.
            </returns>
            <exception cref="T:System.NotImplementedException">sha is a hash method, data cannot be decrypted</exception>
        </member>
        <member name="T:Hummingbird.TestFramework.Cryptography.Sha384">
            <summary>
            The hash method using SHA-384 algorithm
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Cryptography.CryptographyBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Sha384.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Cryptography.Sha384"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Sha384.Encrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts the specified data by providing encryption key and other data.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the encrypted data. For hash methods, the hashed data
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Sha384.Decrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the decrypted data. For hash methods, this method will throw an Exception.
            </returns>
            <exception cref="T:System.NotImplementedException">sha1 is a hash method, data cannot be decrypted</exception>
        </member>
        <member name="T:Hummingbird.TestFramework.Cryptography.Sha512">
            <summary>
            The hash method using SHA-512 algorithm
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Cryptography.CryptographyBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Sha512.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Cryptography.Sha512"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Sha512.Encrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts the specified data by providing encryption key and other data.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the encrypted data. For hash methods, the hashed data
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.Sha512.Decrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the decrypted data. For hash methods, this method will throw an Exception.
            </returns>
            <exception cref="T:System.NotImplementedException">sha1 is a hash method, data cannot be decrypted</exception>
        </member>
        <member name="T:Hummingbird.TestFramework.Cryptography.TripleDes">
            <summary>
            Encrypt and Decrypt using 3DES algorithm
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Cryptography.CryptographyBase" />
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.TripleDes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Cryptography.TripleDes"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.TripleDes.Encrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts the specified data by providing encryption key and other data.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the encrypted data. For hash methods, the hashed data
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Cryptography.TripleDes.Decrypt(System.Byte[],System.Byte[],System.Security.Cryptography.X509Certificates.X509Certificate2,System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="iv">The Initial Vector.</param>
            <param name="certificate">The X509 certificate, if the algorithm needs a certificate.</param>
            <param name="data">The data to be encrypted.</param>
            <param name="ciphermode">The cipher mode.</param>
            <param name="paddingmode">The padding mode.</param>
            <returns>
            the decrypted data. For hash methods, this method will throw an Exception.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Global">
            <summary>
            This static class holds global settings and variables used by Hummingbird Test Framework.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Global.DEFAULT_RESPONSE_NAME">
            <summary>
            The default response name
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.LoadedAssemblies">
            <summary>
            The loaded assemblies
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.FailedAssemblies">
            <summary>
            The failed assemblies
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Global.AutomationProjectTypes">
            <summary>
            Caches all the automation project types in order to help reduce time needed for <see cref="T:Hummingbird.TestFramework.Serialization.AutomationProjectSerializer"/>
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.StartUpInformation">
            <summary>
            Gets the start up information.
            </summary>
            <value>
            The start up information.
            </value>
            <remarks>
            When Hummingbird starts, you may want to show some information after everything is loaded. for example: the extensions installed, the fatal error messages, ...
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.Clients">
            <summary>
            The clients loaded and used in Hummingbird
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.Servers">
            <summary>
            The virtual servers (Agents holding virtualized services) loaded and used in Hummingbird
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.RequestMetadatas">
            <summary>
            The request metadata loaded and used in Hummingbird
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.ResponseMetadatas">
            <summary>
            The response metadata loaded.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.UsedSystemVariables">
            <summary>
            Used system variables
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.CustomObjectViewers">
            <summary>
            Gets the list of <see cref="T:Hummingbird.TestFramework.Extensibility.CustomObjectViewer"/> available to use.
            </summary>
            <value>
            A dictionary of where the Key is object type, Value is the type of <see cref="T:Hummingbird.TestFramework.Extensibility.CustomObjectViewer"/>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.CustomMessageViewers">
            <summary>
            Gets the list of <see cref="T:Hummingbird.TestFramework.Extensibility.CustomMessageViewer"/> available to use.
            </summary>
            <value>
            A dictionary of where the Key is Metadata <see cref="P:Hummingbird.TestFramework.Identifier.Id"/>, Value is the type of <see cref="T:Hummingbird.TestFramework.Extensibility.CustomMessageViewer"/>.
            </value>
        </member>
        <member name="F:Hummingbird.TestFramework.Global.RootNamespace">
            <summary>
            The root name space of XML name-spaces
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.CustomObjectEditors">
            <summary>
            Gets the custom object editors.
            </summary>
            <value>
            The custom object editors.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.TestStepEditors">
            <summary>
            Gets the test step editors from a Type
            </summary>
            <value>
            The Key of the Dictionary is a sub Type of <see cref="T:Hummingbird.TestFramework.Automation.TestStepBase"/>, the Value represents the Editor which is a sub type of <see cref="T:Hummingbird.UI.ModernContent"/>
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.AssertionEditors">
            <summary>
            Gets the assertion editors from a Type (AbstractAssertion)
            </summary>
            <value>
            The Key of the Dictionary is a sub Type of <see cref="T:Hummingbird.TestFramework.Automation.Assertions.AbstractAssertion"/>, the Value represents the Editor which is a sub type of <see cref="T:Hummingbird.UI.ModernContent"/>
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.ConditionEditors">
            <summary>
            Gets the condition editors from a Type (AbstractCondition)
            </summary>
            <value>
            The Key of the dictionary is a sub type of <see cref="T:Hummingbird.TestFramework.Automation.FunctionalConditions.AbstractCondition"/>, the Value represents the editor which is a sub type of <see cref="T:Hummingbird.UI.ModernContent"/>
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.IsAutomatedTestRunning">
            <summary>
            Gets a value indicating whether an automated test is running.
            </summary>
            <value>
              <c>true</c> if this instance is automated test running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.IsPerformanceTestRunning">
            <summary>
            Gets a value indicating whether a performance test is running.
            </summary>
            <value>
              <c>true</c> if this performance test is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.MD5">
            <summary>
            The static instance of md5 hash
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.DES">
            <summary>
            The static instance of DES encryption
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.IsInitialized">
            <summary>
            Gets or sets a value indicating whether this instance is initialized.
            </summary>
            <value>
              <c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.CurrentUserName">
            <summary>
            Gets the name of the current user logged to Windows
            </summary>
            <value>
            The name of the current user.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.AvaliableExtensions">
            <summary>
            Gets a list of available extensions. Extensions will be loaded automatically when hummingbird test framework initializes. this global variable lists all available extensions.
            If an extension is loaded, the <see cref="P:Hummingbird.TestFramework.Extensibility.ExtensionDefinition.LoadingStatus"/> property will be set to <see cref="F:Hummingbird.TestFramework.Extensibility.ExtensionLoadingStatus.Loaded"/> If Hummingbird Test Framework can not load the extension, this property will be set to other values.
            </summary>
            <value>
            The available extensions.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.CurrentAutomationProject">
            <summary>
            Gets the current automation project opening for edit or execution
            </summary>
            <value>
            The current automation project.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.Dispatcher">
            <summary>
            Gets or sets the UI Dispatcher for the current UI Thread.
            </summary>
            <value>
            The current application's UI Dispatcher, initialized only by Hummingbird.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Global.Initialize(System.String)">
            <summary>
            Initialize the Test Framework with Default Profile or a custom profile
            </summary>
            <param name="ProfilePath">the Full path of the custom profile</param>
            <returns>True if the framework is initialized, False if the framework is already initialized before.</returns>
            <remarks>
            If the test framework has already initialized, it will not be initialized again.
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Global.LoadExtension(System.IO.FileInfo)">
            <summary>
            Loads the extension from an ExtensionDefinition.XML file
            </summary>
            <param name="extensionDefinition">The extension definition.</param>
            <returns>Indicate if the extension is loaded.</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.LastExtensionLoadedDate">
            <summary>
            Gets or sets the date where the last extension has been loaded.
            </summary>
            <value>
            The last extension loaded date.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Global.TestFrameworkVersion">
            <summary>
            Gets the current version of Hummingbird Test Framework.
            </summary>
            <value>
            The Hummingbird Test Framework version in Major.Minor.Build.Revision format.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Global.LoadExtensions">
            <summary>
            Loads the extensions From Application installation folder and AppData folder
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Global.LoadExtensionFrom(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Loads the extension from a specific directory
            </summary>
            <param name="pluginDir">The directory where the extension is installed. In this folder, ExtensionDefinition.xml file must exists</param>
            <param name="generateMetadata">if set to <c>true</c> to tell the test framework to regenerate service metadata. When load an extension after initializing please set the value to True</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Messaging.Message">
            <summary>
            Message is the a basic operation of Hummingbird TestFramework. It can be a message sent to target server, or an message received by Hummingbird virtualized service.
            A Message object stores the Status of the operation, the Direction and several time tags.
            <para>If the operation is send, RequestObject contains the data sent to the server, and ResponseObject stores the response of the server</para>
            <para>If the operation is receive, RequestObject contains the data received by virtualized service, and ResponseObject stores the simulated reply</para>
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.IsSecured">
            <summary>
            An indicator to end user, if the message is handled in a Secured context : whether it is encrypted, send via HTTPS channel or digitally signed.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.IsAuthenticated">
            <summary>
            Gets the flag if the transaction is treated with authentication used: Basic Authentication, Windows integrated authentication, ...
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.IsError">
            <summary>
            Gets a value indicating whether the request/response is error.
            </summary>
            <value>
              <c>true</c> if this instance is error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.IsTerminiated">
            <summary>
            Gets the value if the current transaction is terminated.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.Status">
            <summary>
            The status of the current operation.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.StatusString">
            <summary>
            The string expression of the current status. the expression is culture dependence, it will load the key "String_Status_[Status]" from the resource.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.Direction">
            <summary>
            Direction of the current operation: Outgoing : Hummingbird as Driver; Incoming : Hummingbird as Stub
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.Title">
            <summary>
            The title of the message, a friendly message show in hummingbird user interface
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.RequestText">
            <summary>
            Text representation of the request message. This message is often serialized in XML, JSON or Text from RequestObject
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.ResponseText">
            <summary>
            Text representation of the response message. This message is often serialized in XML, JSON or Text form ResponseObject
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.ErrorMessage">
            <summary>
            Error messages are stored in this String object.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.RequestObject">
            <summary>
            An .NET object representation of the request. This member will not be saved in your Hummingbird profile.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.ResponseObject">
            <summary>
            An .NET object representation of the response. This member will not be saved in your Hummingbird profile
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.RequestDate">
            <summary>
            Gets or sets a DateTime object indicates the time where the request starts to send.
            </summary>
            <value>
            The request date.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.CreateDateString">
            <summary>
            Gets the string representation of the Creation date.
            </summary>
            <value>
            The create date string.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.ResponseDate">
            <summary>
            The DateTime object indicate the time when the operation gets response. The date is managed by the Framework itself, Never change this value in code.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.InQueueDate">
            <summary>
            The DateTime object indicate the time when the operation is placed InQueue (before sending). The date is managed by the Framework itself, Never change this value in code.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.CreateDate">
            <summary>
            The DateTime object indicate the time when the operation is created. The date is managed by the Framework itself, Never change this value in code.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.MetadataId">
            <summary>
            Unique Identifier of the AbstractMetadata, it is used to identify the meta data related to the current request or response.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.Metadata">
            <summary>
            Gets or sets the metadata related to this Message
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.Uri">
            <summary>
            Gets or Sets of the Uri used to send or receive the current message.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.IsFlagged">
            <summary>
            Gets of Sets the value indicate where this message is flagged 
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.IsAutomationMessage">
            <summary>
            Gets a value indicating whether this message is added by automation engine.
            The value is automatically set to true when the message is generated and automated test is running (Global.IsAutomatedTestRunning = True)
            </summary>
            <value>
              <c>true</c> if this instance is automation message; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Hummingbird.TestFramework.Messaging.Message.PropertyChanged">
            <summary>
            Event to be triggered when the Status property of the message changes.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.Message.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.Message.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.ElapsedTime">
            <summary>
            Gets the elapsed time.
            </summary>
            <value>
            The elapsed time.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.ResponseTime">
            <summary>
            Gets the response time of the current service. if the service does not have a response time, the value will be -1;
            </summary>
            <value>
            The response time.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.Message.Tag">
            <summary>
            The Tag can be freely used by different <see cref="T:Hummingbird.TestFramework.Services.AbstractServer"/> to store any kind of objects.
            The Tag is not serialized so it can not be recovered after restart.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.Message.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.Message.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Messaging.MessageAddedEventArgs">
            <summary>
            Event argument where a new <see cref="P:Hummingbird.TestFramework.Messaging.MessageAddedEventArgs.Message"/> is added to <see cref="T:Hummingbird.TestFramework.Messaging.MessageQueue"/>
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.MessageAddedEventArgs.#ctor(Hummingbird.TestFramework.Messaging.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Messaging.MessageAddedEventArgs"/> class.
            </summary>
            <param name="m">The m.</param>
        </member>
        <member name="P:Hummingbird.TestFramework.Messaging.MessageAddedEventArgs.Message">
            <summary>
            Gets the message that is added into the message queue.
            </summary>
            <value>
            The message added into the message queue.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Messaging.MessageDirection">
            <summary>
            The direction of the Message
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageDirection.Outgoing">
            <summary>
            The direction of the operation is outgoing (From Hummingbird to test application)
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageDirection.Incoming">
            <summary>
            The operation is incoming (From application to Hummingbird)
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageDirection.None">
            <summary>
            The operation has no direction (system message, error message, etc...)
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Messaging.MessagePart">
            <summary>
            Which part of the message is used to retrieve value from PATH
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessagePart.RequestObject">
            <summary>
            The Request Object. <see cref="P:Hummingbird.TestFramework.Messaging.Message.RequestObject"/>
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessagePart.ResponseObject">
            <summary>
            The response object. <see cref="P:Hummingbird.TestFramework.Messaging.Message.ResponseObject"/>
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Messaging.MessageQueue">
            <summary>
            Message Queue stores all transactions between Hummingbird Test Framework and the application to test. Including:
            <list type="bullet">
            <item>Requests sent to the application under test, the reply and related information</item>
            <item>When used as service simulation, requests received from application, the reply sent and related information</item>
            </list>
            <para>MessageQueue is managed by the Service Clients and Servers, To implement a 3rd party Client and Server, Messages must be inserted into the MessageQueue in order to view by users.</para>
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.MessageQueue.Add(Hummingbird.TestFramework.Messaging.Message)">
            <summary>
            Add an message in the queue. Never call this method when sending request, it will be handled by the framework. 
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.MessageQueue.Remove(Hummingbird.TestFramework.Messaging.Message)">
            <summary>
            Removes the specified message from the queue.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.MessageQueue.UpdateOutput(Hummingbird.TestFramework.Messaging.Message,System.Object,System.String,Hummingbird.TestFramework.Messaging.MessageStatus)">
            <summary>
            Updates the output object (results) of a given message.
            </summary>
            <param name="message">The referred message.</param>
            <param name="OutObject">The output object (result).</param>
            <param name="OutText">The output object in text format (serialized).</param>
            <param name="Status">The status of the message</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.MessageQueue.UpdateInput(Hummingbird.TestFramework.Messaging.Message,System.Object,System.String,Hummingbird.TestFramework.Messaging.MessageStatus)">
            <summary>
            Updates the input object (request) of a given message
            </summary>
            <param name="message">The referred message.</param>
            <param name="InObject">The input object.</param>
            <param name="InText">The input object in text format (Serialized.</param>
            <param name="Status">The status.</param>
        </member>
        <member name="E:Hummingbird.TestFramework.Messaging.MessageQueue.MessageAdded">
            <summary>
            Occurs when a message is added in the MessageQueue. Hummingbird TestManager uses this event to show the message in the list
            </summary>
            <remarks>
            The event handler is also used by Performance Test runner to collect service calls.
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.MessageQueue.Load">
            <summary>
            Loads the messages from the disk.
            </summary>
            <returns>A list of <see cref="T:Hummingbird.TestFramework.Messaging.Message"/> loaded from the disk.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.MessageQueue.LoadAsync">
            <summary>
            Loads the messages from the disk asynchronously 
            </summary>
            <returns>A list of <see cref="T:Hummingbird.TestFramework.Messaging.Message"/> loaded from the disk.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.MessageQueue.Save">
            <summary>
            Saves all messages of instance to a file (will be reloaded).
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Messaging.MessageQueue.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Messaging.MessageStatus">
            <summary>
            The status of the current operation
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageStatus.None">
            <summary>
            The operation has not yet have a status
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageStatus.Pending">
            <summary>
            The request/response is inserted in the queue and to be processed.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageStatus.Sending">
            <summary>
            The Request is being sending to the target application
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageStatus.Sent">
            <summary>
            The Request is sent to the target application, and reply is received.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageStatus.Receiving">
            <summary>
            The virtualized service receives a request from remote application, and processing the request.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageStatus.Received">
            <summary>
            The virtualized service processed the message from remote application, and a reply has been sent back.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageStatus.Timeout">
            <summary>
            The timeout occurs but the a reply has not be received. (it means often the target service is not available, you have a network issue or your request has dropped by the firewall)
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageStatus.Failed">
            <summary>
            The request failed to sent or an Error message is received from remote application
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageStatus.Abandoned">
            <summary>
            The request is abandoned. it was in a queue not could not be sent because the queue overflows. it means your remote application is not passing the performance test.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageStatus.Replied">
            <summary>
            The virtualized service received the request and a functional reply is sent back to the caller.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Messaging.MessageStatus.FaultReplied">
            <summary>
            The virtualized service received the request and according to the user settings, a Fault Message is sent back to the caller.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Messaging.NamespaceDoc">
            <summary>
            <para>Contains fundamental classes to store the transactions, including the Messages sent to application, and messages received by Service Simulation.</para>
            <para><see cref="T:Hummingbird.TestFramework.Messaging.Message"/> is also attached to <see cref="T:Hummingbird.TestFramework.Automation.SendRequestTestStep"/>, it can be used in Test Automation project</para>
            <para><see cref="T:Hummingbird.TestFramework.Messaging.MessageQueue"/> is a static class that manages the messages in a Queue. When implementing new protocols and service simulations, you should create and insert message into the queue</para>
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.NamespaceDoc">
            <summary>
            <para>Hummingbird Test Framework provides all functionalities that can be used for manual testing, service simulation, test automation and performance test. These functionalities are organized as follows:</para>
            <list>
            <item><description><see cref="N:Hummingbird.TestFramework.Services" /> provides all classes that used for service protocol definition and implementation, service simulation.To implement user driver, service simulation and extends existing protocols such as SOAP or HTTP, you need to refer classes used in this namespace.</description></item>
            <item><description><see cref="N:Hummingbird.TestFramework.Automation" /> provides classes and methods used for Test Automation, Assertions, Test Reports</description></item>
            <item><description><see cref="N:Hummingbird.TestFramework.Messaging"/> defines classes used to store each transaction such as Web Service calls and calls received by service simulation.</description></item>
            </list>
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.ProfessionalOnlyAttribute">
            <summary>
            Indicates if the class can only be used with Professional Version of Hummingbird
            </summary>
            <remarks>
            Some functionalities of Hummingbird is reserved to professional version. The class and code of these functionalities is tagged with <see cref="T:Hummingbird.TestFramework.ProfessionalOnlyAttribute"/>.
            For 3rd party extension, This attributed can be tagged to following classes:
            <list type="bullet">
            <item>Custom Tools: classes tagged with <see cref="T:Hummingbird.TestFramework.Extensibility.CustomToolAttribute"/>.
            </item>
            <item>Extended services: <see cref="T:Hummingbird.TestFramework.Services.AbstractService"/>, <see cref="T:Hummingbird.TestFramework.Services.AbstractClient"/>, <see cref="T:Hummingbird.TestFramework.Services.AbstractServer"/></item>
            <item>Extended test automation steps: <see cref="T:Hummingbird.TestFramework.Automation.TestStepBase"/></item>
            </list>
            </remarks>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Hummingbird.TestFramework.Resources.Global">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Resources.Global.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Resources.Global.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Resources.Global.LOADING_TEST_PROFILE">
            <summary>
              Looks up a localized string similar to Loading test profile..
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.AbstractSerializer">
            <summary>
            AbstractSerializer converts test object in string format or from string format to test object.
            <para>Serializer is used to serialize and visualize test objects: including requests or responses, They will be stored in history, log and automation scripts.</para>
            <para>Please note that the Serializer has nothing to do with the data sent to your target application, this will be guaranteed by Automation framework and its extensions.</para>
            <para>This is the base class of all Serializers. Hummingbird TestFramework provides XmlSerializer to convert objects to XML, JsonSerializer to convert object to Json, SoapSerializer to convert object to SoapMessage, ... </para>
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.AbstractSerializer.DocumentFormat">
            <summary>
            Gets the type of the text folding (XML, C#, ...)
            </summary>
            <value>
            The type of the text folding.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.AbstractSerializer.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <summary>
            Serialize the object "o", in type of objectType, with the metadata provided (optional)
            </summary>
            <param name="o">Object to be serialized. This object must be an instance of class (or sub-class) indicated by objectType.</param>
            <param name="objectType">Type of the object</param>
            <param name="metadata">Metadata to be considered during serialization</param>
            <returns>A string representation of the object using the selected serializing format</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.AbstractSerializer.Serialize(System.Object,System.Type)">
            <summary>
            Serialize the object "o", in type of objectType. with out using metadata;
            </summary>
            <param name="o">Object to be serialized. This object must be an instance of class (or sub-class) indicated by objectType.</param>
            <param name="objectType">Type of the object</param>
            <returns>A string representation of the object using the selected serializing format</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.AbstractSerializer.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <summary>
            Deserializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="objectType">Type of the object.</param>
            <param name="metadata">The metadata.</param>
            <param name="serializationExceptions">The serialization exceptions.</param>
            <returns>A Object deserialized from the given string.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.AbstractSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="objectType">Type of the object.</param>
            <returns>A Object deserialized from the given string.</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.AbstractSerializer.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.AbstractSerializer.GetInstance(System.Type)">
            <summary>
            Gets or sets static instance of the serializer.
            </summary>
            <value>
            The static instance of each serializer.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.AbstractSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Serialization.AbstractSerializer"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.Base64Serializer">
            <summary>
            This serializer converts between object and base64 binary. the converting type and all its attributes and types used by attributes must be marked as <see cref="T:System.SerializableAttribute"/>
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Serialization.AbstractSerializer" />
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.Base64Serializer.DocumentFormat">
            <summary>
            Gets the type of the text folding (XML, C#, ...)
            </summary>
            <value>
            The type of the text folding.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.Base64Serializer.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.Base64Serializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Serialization.Base64Serializer"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.Base64Serializer.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <inheritdoc />
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.Base64Serializer.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <summary>
            Deserializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="objectType">Type of the object.</param>
            <param name="metadata">The metadata.</param>
            <param name="serializationExceptions">The serialization exceptions.</param>
            <returns>
            A Object deserialized from the given string.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.DataContractSerializer">
            <summary>
            Serializes or Deserializes object using DataContractSerializer
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Serialization.AbstractSerializer" />
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.DataContractSerializer.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.DataContractSerializer.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <summary>
            Deserializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="objectType">Type of the object.</param>
            <param name="metadata">The metadata.</param>
            <param name="serializationExceptions">The serialization exceptions.</param>
            <returns>
            A Object deserialized from the given string.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.DataContractSerializer.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <summary>
            Serialize the object "o", in type of objectType, with the metadata provided (optional)
            </summary>
            <param name="o">Object to be serialized. This object must be an instance of class (or sub-class) indicated by objectType.</param>
            <param name="objectType">Type of the object</param>
            <param name="metadata">Metadata to be considered during serialization</param>
            <returns>
            A string representation of the object using the selected serializing format
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.DocumentFormat">
            <summary>
            Describe the document format
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Serialization.DocumentFormat.XML">
            <summary>
            The document is XML based
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Serialization.DocumentFormat.Json">
            <summary>
            The document is JSON based
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Serialization.DocumentFormat.Text">
            <summary>
            The document is Text based
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Serialization.DocumentFormat.CSharp">
            <summary>
            The document is C# code based
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Serialization.DocumentFormat.SQL">
            <summary>
            The document is SQL based
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Serialization.DocumentFormat.Other">
            <summary>
            The document is not one of above
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.FormUrlEncodedSerializer">
            <summary>
            This serializer is used to serialize Body properties into in <code>application/x-www-form-urlencoded</code> format;
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Serialization.AbstractSerializer" />
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.FormUrlEncodedSerializer.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.FormUrlEncodedSerializer.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <summary>
            Deserializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="objectType">Type of the object.</param>
            <param name="metadata">The metadata.</param>
            <param name="serializationExceptions">The serialization exceptions.</param>
            <returns>
            A Object deserialized from the given string.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.FormUrlEncodedSerializer.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <summary>
            Serialize the object "o", in type of objectType, with the metadata provided (optional)
            </summary>
            <param name="o">Object to be serialized. This object must be an instance of class (or sub-class) indicated by objectType.</param>
            <param name="objectType">Type of the object</param>
            <param name="metadata">Metadata to be considered during serialization</param>
            <returns>
            A string representation of the object using the selected serializing format
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.NamespaceDoc">
            <summary>
            <para>Contains all fundamental Classes that convert between object and Text using Serialization and Deserialization. The classes are used for different kind of services. For example SoapSerializer is used to serialize WCF DataContract object to Soap messages in XML Format, and deserialize a SOAP message to an object.</para>
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.SerializationException">
            <summary>
            Exception encountered during Serialization or Deserialzation
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.SerializationException.LineNumber">
            <summary>
            LineNumber in text where the exception encountered
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.SerializationException.LinePosition">
            <summary>
            Position in text of the indicated line where the exception encountered
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.SerializationException.Message">
            <summary>
            Message of the exception
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.SerializationException.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.SoapSerializer">
            <summary>
            This serialize Serializes and Deserializes between Soap message (XML document embedded in Soap:Envelop) and objects
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Serialization.AbstractSerializer" />
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.SoapSerializer.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.SoapSerializer.Instance">
            <summary>
            Gets the Static instance of the <see cref="T:Hummingbird.TestFramework.Serialization.SoapSerializer"/>
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.SoapSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Serialization.SoapSerializer"/> class.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Serialization.SoapSerializer.cachedConverters">
            <summary>
            The cache all the TypedMessageConverters to avoid memory leak in the internal XmlSerializer
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.SoapSerializer.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.SoapSerializer.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <inheritdoc/>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.XamlSerializer">
            <summary>
            Serializes or Deserializes Objects to XAML document
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Serialization.AbstractSerializer" />
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.XamlSerializer.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.XamlSerializer.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <summary>
            Serialize the object "o", in type of objectType, with the metadata provided (optional)
            </summary>
            <param name="o">Object to be serialized. This object must be an instance of class (or sub-class) indicated by objectType.</param>
            <param name="objectType">Type of the object</param>
            <param name="metadata">Metadata to be considered during serialization</param>
            <returns>
            A string representation of the object using the selected serializing format
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.XamlSerializer.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.XamlSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Serialization.XamlSerializer"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.XmlSerializer">
            <summary>
            This classes uses standard .NET XmlSerializer to serialize and deserialize data.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.XmlSerializer.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.XmlSerializer.Instance">
            <summary>
            Gets the Static instance of the <see cref="T:Hummingbird.TestFramework.Serialization.XmlSerializer"/>
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.XmlSerializer.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.XmlSerializer.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.XmlSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Serialization.XmlSerializer"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.XmlSerializerExtraTypes">
            <summary>
            This Serializer uses Standard .NET XmlSerializer but it passes all subclasses in order to correctly serialize derived classes defined in external codes (Extensions) 
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.XmlSerializerExtraTypes.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.XmlSerializerExtraTypes.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.XmlSerializerExtraTypes.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.XmlSerializerExtraTypes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Serialization.XmlSerializerExtraTypes"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.XmlSerializerMessageFault">
            <summary>
            Reference http://zamd.net/wcf/2008/08/15/serializing-faults-using-xmlserializer.html
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.XmlSerializerWithoutXmlns">
            <summary>
            Serialize and deserialize between object and XML document without XML Namespaces.
            it is used to work with the old DTD defined documents. the XML defined with XSD, please use XmlSerializer
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.XmlSerializerWithoutXmlns.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.XmlSerializerWithoutXmlns.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.XmlSerializerWithoutXmlns.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.XmlSerializerWithoutXmlns.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Serialization.XmlSerializerWithoutXmlns"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.AutomationProjectSerializer">
            <summary>
            This Serializer serializes Automation projects, Test Suites, and any test steps.
            To support test steps built with-in Extension, This serializer imports all sub classes used by the project and mark all AbstractTestItem classes as known types.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.AutomationProjectSerializer.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.AutomationProjectSerializer.Instance">
            <summary>
            Gets the Static instance of the <see cref="T:Hummingbird.TestFramework.Serialization.AutomationProjectSerializer"/>
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.AutomationProjectSerializer.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <summary>
            Serialize the object "o", in type of objectType, with the metadata provided (optional)
            </summary>
            <param name="o">Object to be serialized. This object must be an instance of class (or sub-class) indicated by objectType.</param>
            <param name="objectType">Type of the object</param>
            <param name="metadata">Metadata to be considered during serialization</param>
            <returns>
            A string representation of the object using the selected serializing format
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.AutomationProjectSerializer.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <summary>
            Deserializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="objectType">Type of the object.</param>
            <param name="metadata">The metadata.</param>
            <param name="serializationExceptions">The serialization exceptions.</param>
            <returns>
            A Object deserialized from the given string.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.HttpRequestSerializer">
            <summary>
            This serializer serializes an <see cref="T:Hummingbird.TestFramework.Services.GenericHttpRequest"/> objects to an Http stream.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Serialization.AbstractSerializer" />
            <remarks>
            This serialize does not hande deserialization (Http Stream to GenericHttpReponse object)
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.HttpRequestSerializer.DocumentFormat">
            <summary>
            Gets the type of the text folding (XML, C#, ...)
            </summary>
            <value>
            The type of the text folding.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.HttpRequestSerializer.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.HttpRequestSerializer.Instance">
            <summary>
            Gets the Static instance of the <see cref="T:Hummingbird.TestFramework.Serialization.HttpRequestSerializer"/>
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.HttpRequestSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Serialization.HttpRequestSerializer"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.HttpRequestSerializer.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <summary>
            Deserializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="objectType">Type of the object.</param>
            <param name="metadata">The metadata.</param>
            <param name="serializationExceptions">The serialization exceptions.</param>
            <returns>
            A Object deserialized from the given string.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.HttpRequestSerializer.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <summary>
            Serialize the object "o", in type of objectType, with the metadata provided (optional)
            </summary>
            <param name="o">Object to be serialized. This object must be an instance of class (or sub-class) indicated by objectType.</param>
            <param name="objectType">Type of the object</param>
            <param name="metadata">Metadata to be considered during serialization</param>
            <returns>
            A string representation of the object using the selected serializing format
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.HttpResponseSerializer">
            <summary>
            This serializer serializes an <see cref="T:Hummingbird.TestFramework.Services.GenericHttpResponse"/> objects to an HTTP stream. and Deserialize an HTTP stream to object.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Serialization.AbstractSerializer" />
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.HttpResponseSerializer.DocumentFormat">
            <summary>
            Gets the type of the text folding (XML, C#, ...)
            </summary>
            <value>
            The type of the text folding.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.HttpResponseSerializer.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.HttpResponseSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Serialization.HttpResponseSerializer"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.HttpResponseSerializer.Instance">
            <summary>
            Gets the Static instance of the <see cref="T:Hummingbird.TestFramework.Serialization.HttpResponseSerializer"/>
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.HttpResponseSerializer.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <inheritdoc />
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.HttpResponseSerializer.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <inheritdoc />
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.JsonFormatter">
            <summary>
            Formats a given json object to human readable indented format
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.JsonFormatter.Format(System.String)">
            <summary>
            Formats the specified input JSON object
            </summary>
            <param name="input">JSON object to be formatted.</param>
            <returns>a <see cref="T:System.String"/> object represents a formatted and indented Json document.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Serialization.JsonSerializer">
            <summary>
            This serializer uses DataContractJsonSerializer to serialize and deserialize between JSON structure and object.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Serialization.AbstractSerializer" />
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.JsonSerializer.Serialize(System.Object,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.JsonSerializer.Deserialize(System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Serialization.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Serialization.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.JsonSerializer.DocumentFormat">
            <summary>
            Gets the type of the text folding (XML, C#, ...)
            </summary>
            <value>
            The type of the text folding.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Serialization.JsonSerializer.CanDeserialize">
            <summary>
            Gets or sets a value indicating whether this instance can be deserialized.
            </summary>
            <value>
              <c>true</c> if this instance can deserialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.ServiceControlActions">
            <summary>
            Action to control the service simulation, used by <see cref="T:Hummingbird.TestFramework.Automation.StartServiceSimulationTestStep"/>
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.ServiceControlActions.Start">
            <summary>
            Starts the service simulation
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.ServiceControlActions.Stop">
            <summary>
            Stops the service simulation
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.BaseGenericHttpMessage">
            <summary>
            The base class holding common data and parse functions for both GenericHttpRequest and GenericHttpResponse
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.BaseGenericHttpMessage.Version">
            <summary>
            Gets or sets the HTTP version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.BaseGenericHttpMessage.Headers">
            <summary>
            Gets or sets the HTTP headers.
            </summary>
            <value>
            The headers.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.BaseGenericHttpMessage.Body">
            <summary>
            Gets or sets the HTTP Body (in POST or PUT).
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.BaseGenericHttpMessage.Cookies">
            <summary>
            Gets or sets a list of Cookies that will be sent to the server
            </summary>
            <value>
            The cookies are sent in HTTP Header. When this list is not empty, it will replace any Cookies set in the <see cref="P:Hummingbird.TestFramework.Services.BaseGenericHttpMessage.Headers"/> property.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.CookieAttribute">
            <summary>
            CookieAttribute specifies a property where it's name and value should be sent with the HTTP Request. The name of the cookie is set in the <see cref="P:Hummingbird.TestFramework.Services.CookieAttribute.Name"/> property of the attribute.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Hummingbird.TestFramework.Services.CookieAttribute.Name">
            <summary>
            Gets or sets the name of the cookie
            </summary>
            <value>
            The cookie value
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.CookieAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.CookieAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.CustomUserNamePasswordValidator.Validate(System.String,System.String)">
            <summary>
            Validates the specified user name.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.DefaultSoapFault">
            <summary>
            This default SoapFault message will be added automatically to the Soap Service simulation.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.DefaultSoapFault.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.DefaultSoapFault.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.FormUrlEncodedAttribute">
            <summary>
            This attribute indicates that this property should be sent with Form Data.
            This attribute must be tagged on the property that also tagged with <see cref="T:Hummingbird.TestFramework.Services.HttpBodyAttribute"/> and can only be specified once within a class.
            Body object will be serialized in format: "application/x-www-form-urlencoded", <see cref="P:Hummingbird.TestFramework.Services.HttpMetadata.BodySerializer"/> will not be used.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpBasicAuthenticationAttribute">
            <summary>
            This <see cref="T:System.Attribute"/> tags a Web service that requires HTTP Basic Authentication, described in <see cref="!:https://tools.ietf.org/html/rfc7235">HTTP/1.1: Authentication</see>
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpBearerAuthenticationAttribute">
            <summary>
            This <see cref="T:System.Attribute"/> tags a Web service that requires HTTP Bearer Token Authentication, described in <see cref="!:https://tools.ietf.org/html/rfc6750">Bearer Token Usage</see>
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpMetadata">
            <summary>
            The base metadata class that holds common values for HTTP Request or HTTP Response service description.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Services.AbstractMetadata" />
        </member>
        <member name="P:Hummingbird.TestFramework.Services.HttpMetadata.HttpMethod">
            <summary>
            Gets or set the HTTP Method: GET, POST, PUT, ... The default value is POST
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.HttpMetadata.HttpVersion">
            <summary>
            HttpVersion, Default value is HttpVersion11, that represents HTTP/1.1
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.HttpMetadata.BodySerializer">
            <summary>
            This serializer is used to serialize HTTP Body content.
            <para>For Restful Web Services, methods such as POST or PUT will sent data in HTTP Body in XML or JSON format.
            Hummingbird Test Framework defines these XML or JSON objects into C# classes and can be edited, shared, automated easily.
            This serializer converts C# object to HTTP Body Text or converts HTTP Body text back to C# objects.
            According to the type of Restful service, the serializer can be XMLSerializer for XML based WebServices or JSONSerializer for JSON based WebServices.
            </para>
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.HttpMetadata.ContentType">
            <summary>
            Gets or sets the Content-Type of the HTTP Request, Default value is "application/xml"
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpResponseAttribute">
            <summary>
            <see cref="T:Hummingbird.TestFramework.Services.HttpResponseAttribute"/> is used to describe the class that representing an HTTP response used for to simulate REST web services.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Hummingbird.TestFramework.Services.HttpResponseAttribute.StatusCode">
            <summary>
            Gets or sets the HTTP status code of the attached object representing an Response in an OpenAPI specification.
            </summary>
            <value>
            The HTTP status code (2xx, 3xx, 4xx, 5xx), or default which accept all status codes.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpResponseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.HttpResponseAttribute"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpStatusCodeAttribute">
            <summary>
            This attribute is expected to bed attach to an property of a Response Object.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Hummingbird.TestFramework.Services.NamespaceDoc">
            <summary>
            <para>Contains all fundamental classes that used for service protocol definition and implementation, service simulation. To implement user driver, service simulation and extends existing protocols such as SOAP or HTTP, you need to refer classes used in this namespace.</para>
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.OAuthAuthenticationAttribute">
            <summary>
            This attribute specifies an OAuth authentication used for an OpenAPI Web Service.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Hummingbird.TestFramework.Services.RequestOptions">
            <summary>
            Options used to send the request
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestOptions.Credential">
            <summary>
            The name of the profile used by UserName/Password based authentication.
            Or, None for Anonymous
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestOptions.UsePreemptiveAuthentication">
            <summary>
            Gets or sets a value indicating whether Preemptive authentication is used.
            </summary>
            <value>
              <c>true</c> if preemptive authentication is used; otherwise, <c>false</c>.
            </value>
            <remarks>
            It is not recommended to use Preemptive Authentication to web services. if misused or used incorrectly the preemptive authentication can lead to significant security issues, such as sending user credentials in clear text to an unauthorized third party. Therefore, users are expected to evaluate potential benefits of preemptive authentication versus security risks in the context of their specific application environment.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestOptions.UseMToM">
            <summary>
            Gets or sets a value indicating whether to send the request in MTOM format.
            </summary>
            <value>
              <c>true</c> send request using MTOM Encoding; otherwise, <c>false</c> using XML Encoding.
            </value>
            <seealso href="https://www.w3.org/Submission/soap11mtom10"/>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestOptions.AuthenticationMode">
            <summary>
            Gets or sets the authentication mode used to send request.
            </summary>
            <value>
            The authentication mode. If Authentication mode is <see cref="F:Hummingbird.TestFramework.Services.AuthenticationModes.Basic"/>, <see cref="F:Hummingbird.TestFramework.Services.AuthenticationModes.Digest"/> or <see cref="F:Hummingbird.TestFramework.Services.AuthenticationModes.UserName"/> or <see cref="F:Hummingbird.TestFramework.Services.AuthenticationModes.Bearer"/>,
            user could either choose an credential from the profile, or to use the credential specified in <see cref="P:Hummingbird.TestFramework.Services.RequestOptions.Username"/>, <see cref="P:Hummingbird.TestFramework.Services.RequestOptions.Password"/> or <see cref="P:Hummingbird.TestFramework.Services.RequestOptions.Token"/>
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestOptions.UseSoap12">
            <summary>
            Gets or sets a value indicating whether use Soap 1.2 .
            </summary>
            <value>
              <c>true</c> if send requests with Soap 1.2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestOptions.X509Certificate">
            <summary>
            The certificate profile used by Certificate based authentication.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestOptions.HttpHeaders">
            <summary>
            Gets or sets the custom HTTP headers to be sent.
            </summary>
            <value>
            The HTTP headers.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.RequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.RequestOptions"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestOptions.Username">
            <summary>
            Gets or sets the Username of the authentication if user do not want to use the <see cref="P:Hummingbird.TestFramework.Services.RequestOptions.Credential"/> from the <see cref="T:Hummingbird.TestFramework.Configuration.Profile"/>
            </summary>
            <value>
            The username
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestOptions.Password">
            <summary>
            Gets or sets the Password of the authentication if user do not want to use the <see cref="P:Hummingbird.TestFramework.Services.RequestOptions.Credential"/> from the <see cref="T:Hummingbird.TestFramework.Configuration.Profile"/>
            </summary>
            <value>
            The password
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestOptions.Token">
            <summary>
            Gets or sets the Token used for HTTP Bearer authentication if user do not want to use the <see cref="P:Hummingbird.TestFramework.Services.RequestOptions.Credential"/> from the <see cref="T:Hummingbird.TestFramework.Configuration.Profile"/>
            </summary>
            <value>
            The token to sent with HTTP Header: Authorization: Bearer [Token]
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestOptions.ProxyMode">
            <summary>
            Gets or sets the proxy settings. When <see cref="F:Hummingbird.TestFramework.Services.ProxyMode.System"/> is used, The service will try to use default proxy settings used by the system.
            </summary>
            <value>
            The proxy mode.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.SoapResponseMetadata">
            <summary>
            The <see cref="T:Hummingbird.TestFramework.Services.AbstractMetadata"/> for Soap Server Services
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Services.AbstractMetadata" />
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapResponseMetadata.SoapVersion">
            <summary>
            Gets or sets the SOAP version if the default Binding is used.
            </summary>
            <value>
            The SOAP version.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapResponseMetadata.MessageEncoding">
            <summary>
            Gets or sets the Message Encoding.
            </summary>
            <value>
            Specifies whether Message Transmission Optimization Mechanism (MTOM) or text is used to encode SOAP messages.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.UriPathAttribute">
            <summary>
            UriPathAttribute specifies a property where it's value should be used in a Uri path.
            </summary>
            <example>
            For example, considering following UriTemplate: http://user.management.com/getUser/{userId}/Name.
            Attaching the attribute [UriPathAttribute("userId")] to a property.
            The token {userId} will be replaced by the value of the property.
            </example>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Hummingbird.TestFramework.Services.UriPathAttribute.Name">
            <summary>
            Gets or sets the name of the token to replace in the Uri Path template
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.UriPathAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.UriPathAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.WcfBehaviorExtension">
            <summary>
            WcfBehaviorExtension to register WcfEndpointHehavior
            </summary>
            <seealso cref="T:System.ServiceModel.Configuration.BehaviorExtensionElement" />
        </member>
        <member name="P:Hummingbird.TestFramework.Services.WcfBehaviorExtension.BehaviorType">
            <summary>
            Gets the type of behavior.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.WcfBehaviorExtension.CreateBehavior">
            <summary>
            Creates a behavior extension based on the current configuration settings.
            </summary>
            <returns>
            The behavior extension.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.WcfServiceBehaviorAttribute">
            <summary>
            The WcfServiceBehavior to intercept incoming and outgoing message from WCF.
            </summary>
            <seealso cref="T:System.Attribute" />
            <seealso cref="T:System.ServiceModel.Description.IServiceBehavior" />
        </member>
        <member name="M:Hummingbird.TestFramework.Services.WcfServiceBehaviorAttribute.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Provides the ability to pass custom data to binding elements to support the contract implementation.
            </summary>
            <param name="serviceDescription">The service description of the service.</param>
            <param name="serviceHostBase">The host of the service.</param>
            <param name="endpoints">The service endpoints.</param>
            <param name="bindingParameters">Custom objects to which binding elements have access.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.WcfServiceBehaviorAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects.
            </summary>
            <param name="serviceDescription">The service description.</param>
            <param name="serviceHostBase">The host that is currently being built.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.WcfServiceBehaviorAttribute.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Provides the ability to inspect the service host and the service description to confirm that the service can run successfully.
            </summary>
            <param name="serviceDescription">The service description.</param>
            <param name="serviceHostBase">The service host that is currently being constructed.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.AbstractClient">
            <summary>
            The abstract client, which handles a type of Web Services requests
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Services.AbstractService" />
            <seealso cref="T:Hummingbird.TestFramework.Services.ISendRequest" />
        </member>
        <member name="M:Hummingbird.TestFramework.Services.AbstractClient.SendRequest(Hummingbird.TestFramework.Services.RequestData)">
            <summary>
            Sends the request.
            </summary>
            <param name="requestData">The request data.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.AbstractClient.SendRequestAsync(Hummingbird.TestFramework.Services.RequestData,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Sends the request in asynchronous mode.
            </summary>
            <param name="requestData">The request data.</param>
            <param name="propertyChanged">The property changed.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.AbstractClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.AbstractClient"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.AuthenticationModes">
            <summary>
            The mode of authentication when calling the target. AuthenticationMode is use only on HTTP based services. It is implemented in HttpClient and SoapClient.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.AuthenticationModes.Anonymous">
            <summary>
            Calling the web service without using a mode of authentication. 
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.AuthenticationModes.Basic">
            <summary>
            Calling the web service by using HTTP Basic Authentication. in this case, user should specify the profile when sends a request.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.AuthenticationModes.Digest">
            <summary>
            Calling the web service by using HTTP Digest Authentication. in this case, user should specify the profile when sends a request.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.AuthenticationModes.Windows">
            <summary>
            Calling the web service by using user's current Windows Credential with Windows. Hummingbird uses only current user's credential, no profile should be set.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.AuthenticationModes.UserName">
            <summary>
            Calling the web service by using UserName message security. 
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.AuthenticationModes.ClientCertificate">
            <summary>
            Calling the web service by using an X509 Certificate. In this case, user must assign a x509 certificate from the Certificate store.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.AuthenticationModes.Ntlm">
            <summary>
            Calling the web service by using user's current Windows Credential. Hummingbird uses only current user's credential, no profile should be set.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.AuthenticationModes.Bearer">
            <summary>
            Calling the web service by using the HTTP Bearer authentication. In this case, user should specify a Token
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpBodyAttribute">
            <summary>
            This attribute indicates that this property should be sent in HTTP Body in PUT/POST http requests
            This attribute can only be specified once within a class.
            Body object will be serialized with <see cref="P:Hummingbird.TestFramework.Services.HttpMetadata.BodySerializer"/>, according to REST service definition, it can be an JSON serializer or an XML serializer.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.ProxyMode">
            <summary>
            Mode authentication if a proxy server is used to call HTTP based web services
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ProxyMode.System">
            <summary>
            Uses system auto-configured proxy settings if available
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ProxyMode.Manual">
            <summary>
            Uses manually configured proxy settings. if no proxy is configured, direct call will be performed
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.QueryFieldAttribute">
            <summary>
            QueryFieldAttribute is part of Test Framework REST Service testing flags.
            <para>On the runtime, Hummingbird Test Framework will add the query field on the url template by adding fieldname={fieldValue}</para>
            </summary>
            <example>
            Considering the following UriTemplate: http://www.webserver/createUser
            By attaching this attribute to your property:
            [QueryFieldAttribute(Name="userid")]
            public string UserId {get;set;}
            Hummingbird Test framework will convert the uri as: http://www.webserver/createUser?userid=0091232534
            while 0091232534 is the value of the property UserId given by the user.
            </example>
            <remarks>
            The variable is formatted as the format defined in QueryFieldFormat, by default Hummingbird uses PlainText as format. When using this format, ToString() method will be called if the property is not string.
            For Enums, If the enum is attached with EnumMember attribute, Hummingbird Test Framework will take the value specified in EnumMember Attribute.
            If the value is DateTime or Decimal, it will be formatted as localized string according to your language settings.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.QueryFieldAttribute.Name">
            <summary>
            Field Variable Name - Name of the variable to be replaced.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.QueryFieldAttribute.QueryFieldFormat">
            <summary>
            Field Format - Describes how a QueryField variable is formatted.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.QueryFieldAttribute.#ctor(System.String,Hummingbird.TestFramework.Services.QueryFieldFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.QueryFieldAttribute" /> class.
            </summary>
            <param name="name">The name of the query field.</param>
            <param name="format">The format of the query field.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.QueryFieldAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.QueryFieldAttribute"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.QueryFieldFormat">
            <summary>
            Describes how the a Query Field variable is formatted.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.QueryFieldFormat.PlainText">
            <summary>
            The data is evaluated as plain text. (Attention, if the data type is Date/Time or numeric value type, it will be converted to local language format.)
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.QueryFieldFormat.XmlUrlEncoded">
            <summary>
            The data will be serialized to XML Format and UrlEncoded. (https://www.w3schools.com/tags/ref_urlencode.asp)
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.QueryFieldFormat.XmlUrlEncoded_NoNamespace">
            <summary>
            The data will be serialized to XML Format and UrlEncoded. All XML namespace will be removed. 
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.QueryFieldFormat.XmlBase64">
            <summary>
            The data will be serialized to XML Format and encoded in Base64 format.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.QueryFieldFormat.DateTimeIso8601">
            <summary>
            The data of DateTime type will be transformed to the ISO8601 Date Time format.
            (Attention: Make sure the attribute is attached to an DateTime value, or an acceptable DateTime string.)
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.ReadOnlyAttribute">
            <summary>
            Hummingbird Object Editor does not allow changes of the property containing such attribute.
            Use this attribute in your services for read only fields : value of Content-Type, Allow, ...
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpRequestMetadata">
            <summary>
            The request metadata for HTTP Request, it adds some additional information from standard Request Metadata. See remarks for more information.
            </summary>
            <remarks>
            This metadata is used to describes a RESTful Web Service. Hummingbird Test Framework uses advanced reflection technology to create the real web request from an given object.
            <see cref="P:Hummingbird.TestFramework.Services.AbstractMetadata.RequestType"/> specifies a class which represents the request using different Attributes to tag there the value should be appear:
            <see cref="T:Hummingbird.TestFramework.Services.QueryFieldAttribute"/> specifies a variable that appear in the Uri Template.
            <see cref="T:Hummingbird.TestFramework.Services.HttpHeaderAttribute"/> specifies a variable that appear in HTTP Headers
            <see cref="T:Hummingbird.TestFramework.Services.HttpBodyAttribute"/> specifies an object that represents the HTTP Body. In additional, when an property is tagged with HttpBodyAttribute, BodySerializer will be used to convert the Object to Text (XML or JSON)
            </remarks>
            <seealso cref="T:Hummingbird.TestFramework.Services.HttpMetadata" />
            <seealso cref="T:Hummingbird.TestFramework.Services.AbstractMetadata" />
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpRequestMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.HttpRequestMetadata"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.HttpRequestMetadata.Path">
            <summary>
            Gets or sets the Path based on <see cref="P:Hummingbird.TestFramework.Services.AbstractMetadata.UriTemplate"/> as Base Url
            </summary>
            <value>
            The path always starts with "/"
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.AbstractServer">
            <summary>
            An Abstract Server which simulates an 3rd party application which your system sends requests to.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Services.AbstractService" />
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractServer.SupportedResponses">
            <summary>
            Gets the supported responses can be handled by this Server.
            </summary>
            <value>
            The supported responses.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.AbstractServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.AbstractServer"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractServer.ReservedPort">
            <summary>
            Gets or sets the reserved TCP port used for this server.
            </summary>
            <value>
            The reserved port.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.AbstractService">
            <summary>
            Abstract server is the root abstract class for Clients (simulate the application which calls your application) and Servers (simulates the application which yours are calling to)
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractService.CanSendRequest">
            <summary>
            Indicate whether this service can send request (implements ISendRequest interface)
            </summary>
            <remarks>
            All classes inherited from AbstractClient have this flag True. All classes inherited from AbstractServer has this flag false
            The implemented service can decide where CanSendRequest is True or False according to the situation: For example: a Socket Server can only send messages to client when at least a client is connected.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractService.Parameters">
            <summary>
            the parameters for this AbstractServer instance, such as IP, Port, some path, etc...
            the key of this dictionary should equals to its ServiceParameter.Name
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractService.Instance">
            <summary>
            Get the current instance of the service.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractService.Name">
            <summary>
            Gets or sets the name of the Service
            </summary>
            <value>
            The name of the service. 
            </value>
            <remarks>
            When the service is used as Client, please name the service as XXX Client. Otherwise, name the service as XXX Server.
            For example, the build in Soap client service is called Soap Client. and virtual server of Soap is called Soap Server.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractService.Description">
            <summary>
            Gets or sets the description of the Abstract Service
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractService.Information">
            <summary>
            Gets or sets the information.
            </summary>
            <value>
            The information.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractService.ErrorMessages">
            <summary>Gets the error messages during the service startup or shutdown.</summary>
            <value>The error messages.</value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractService.IsRunning">
            <summary>
            Gets or sets a value indicating whether this instance is running.
            </summary>
            <value>
              <c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
            <remarks>
            When service is running as Server (for Virtualized Services), the Test Framework registers TCP Ports.
            You can not run more than one instance of Hummingbird Test Framework as Virtual Server because these TCP Ports are already in use.
            If Hummingbird Test Framework (or Hummingbird Test Manager) is used by different users simultaneously as Server, they should configure different TCP Ports.
            </remarks>
        </member>
        <member name="E:Hummingbird.TestFramework.Services.AbstractService.ServerStatusChanged">
            <summary>
            The server status changed
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractService.SettingPageType">
            <summary>
            Type of the settings page if a custom settings page should be displayed. If this value is null, the default Settings page will be used.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractService.ImageSource">
            <summary>
            Gets or sets the image source.
            </summary>
            <value>
            The image source.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.AbstractService.Start">
            <summary>
            Starts the virtualized service. When used as Virtual Server, the service will registers TCP port and services descriptions.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.AbstractService.Stop">
            <summary>
            Stops this virtualized service. When used as Virtual Server, it will release all services descriptions and network resources like TCP Port.
            When the service is stopped, the virtual server will not reply anymore.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.AbstractService.ApplySettings(System.Collections.Generic.IEnumerable{Hummingbird.TestFramework.Services.Parameter})">
            <summary>
            Applies the settings. used when Test Framework initializes or user changes the settings related to this service.
            When this class is inherited. make sure to call <code>base.ApplySettings(appliedParameters)</code> in derived class.
            </summary>
            <param name="appliedParameters">The parameters and values to take account by the service.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.AbstractService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.AbstractService"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractService.SupportedRequests">
            <summary>
            Gets or sets the supported requests.
            </summary>
            <value>
            The supported requests.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.AbstractService.SendRequest(Hummingbird.TestFramework.Services.RequestData)">
            <summary>
            Send the request described in requestMetadata and transform requestObject to its definitive format.
            This method is synchronized, and should ONLY be called in functional test and automated test, else the UI thread will be blocked.
            </summary>
            <param name="requestData">RequestData contains the details of the request to sent</param>
            <returns>Message object contains information of execution, this message will be shown in the main window</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.AbstractService.SendRequestAsync(Hummingbird.TestFramework.Services.RequestData,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Asynchronized version of SendRequest method.
            </summary>
            <param name="requestData">RequestData contains the details of the request to sent</param>
            <param name="propertyChanged">an event handler subscribes the event when the request status is changed.</param>
            <returns>A Message object related to the test</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.DispatchByBodyBehaviorAttribute">
            <summary>
            For some SOAP WebServices, SoapAction are not specified. To simulate these kind of Web services, you must apply this attribute to your web service proxy class.
            </summary>
            <seealso cref="T:System.Attribute" />
            <seealso cref="T:System.ServiceModel.Description.IContractBehavior" />
        </member>
        <member name="M:Hummingbird.TestFramework.Services.DispatchByBodyBehaviorAttribute.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Adds the binding parameters.
            </summary>
            <param name="contractDescription">The contract description.</param>
            <param name="endpoint">The endpoint.</param>
            <param name="bindingParameters">The binding parameters.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.DispatchByBodyBehaviorAttribute.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Applies the client behavior.
            </summary>
            <param name="contractDescription">The contract description.</param>
            <param name="endpoint">The endpoint.</param>
            <param name="clientRuntime">The client runtime.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.DispatchByBodyBehaviorAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
            <summary>
            Applies the dispatch behavior.
            </summary>
            <param name="contractDescription">The contract description.</param>
            <param name="endpoint">The endpoint.</param>
            <param name="dispatchRuntime">The dispatch runtime.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.DispatchByBodyBehaviorAttribute.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Validates the specified contract description.
            </summary>
            <param name="contractDescription">The contract description.</param>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.DispatchByBodyElementOperationSelector">
            <summary>
            Selector of the operation when using DispatchByBodyAttribute
            </summary>
            <seealso cref="T:System.ServiceModel.Dispatcher.IDispatchOperationSelector" />
        </member>
        <member name="M:Hummingbird.TestFramework.Services.DispatchByBodyElementOperationSelector.#ctor(System.Collections.Generic.Dictionary{System.Xml.XmlQualifiedName,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.DispatchByBodyElementOperationSelector"/> class.
            </summary>
            <param name="dispatchDictionary">The dispatch dictionary.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.DispatchByBodyElementOperationSelector.SelectOperation(System.ServiceModel.Channels.Message@)">
            <summary>
            Associates a local operation with the incoming method.
            </summary>
            <param name="message">The incoming <see cref="T:System.ServiceModel.Channels.Message" /> to be associated with an operation.</param>
            <returns>
            The name of the operation to be associated with the <paramref name="message" />.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.GenericHttpRequest">
            <summary>
            Defines the request data for a standard Http request
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.GenericHttpRequest.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.GenericHttpRequest.HttpMethod">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <value>
            The HTTP method.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.GenericHttpRequest.ExtendedHttpMethod">
            <summary>
            Gets or sets the extended HTTP method when no standard method is used.
            </summary>
            <value>
            The extended HTTP method.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.GenericHttpRequest.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.GenericHttpRequest.GetPath(System.String,Hummingbird.TestFramework.Services.HttpMetadata)">
            <summary>
            Gets the path value from the <see cref="P:Hummingbird.TestFramework.Services.GenericHttpRequest.Path" /> attribute descripted with the parameter <paramref name="name" />
            </summary>
            <param name="name">The name of the variable in a path.</param>
            <param name="metadata">The <see cref="T:Hummingbird.TestFramework.Services.AbstractMetadata" /> which used by the current request / response</param>
            <returns>The string value of the path from given name and metadata.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.GenericHttpRequest.FromString(System.String)">
            <summary>
            Generates a GenericHttpRequest object from the string.
            </summary>
            <param name="s">The string representation of an Http Request</param>
            <returns>An <see cref="T:Hummingbird.TestFramework.Services.GenericHttpRequest"/> object.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.GenericHttpResponse">
            <summary>
            Describes a response of a standard HTTP Request
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.GenericHttpResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.GenericHttpResponse"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.GenericHttpResponse.HttpStatusCode">
            <summary>
            Gets or sets the HTTP code.
            </summary>
            <value>
            The HTTP code.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.GenericHttpResponse.Reason">
            <summary>
            Gets or sets the reason.
            </summary>
            <value>
            The reason.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.GenericHttpResponse.FromString(System.String)">
            <summary>
            Froms the string.
            </summary>
            <param name="value">The value.</param>
            <returns>An <see cref="T:Hummingbird.TestFramework.Services.GenericHttpResponse"/> object parsed from a string.</returns>
            <exception cref="T:System.Exception">There is an error when deserializing the value at line: {lineNumber}</exception>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.GenericHttpResponse.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.GenericHttpResponse.AddHeader(System.String,System.String)">
            <summary>
            Add the Http header in response, if in the request a header of the same name is found, that header will be replaced.
            </summary>
            <param name="Name">The name of the HTTP Header</param>
            <param name="Value">The Value of the HTTP Header</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.SoapDefaultReplyBehavior">
            <summary>
            The default Soap Virtualized service reply behavior
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapDefaultReplyBehavior.Response(System.String,System.Object,System.Type,System.Type)">
            <summary>
            Responses the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="request">The request.</param>
            <param name="requestType">Type of the request.</param>
            <param name="returnType">Type of the return.</param>
            <returns>An object represents the response selected for reply. the response can be <see langword="null"/> if there is no defined reply for the current service.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapDefaultReplyBehavior.FindMetadata(System.String,System.Type,System.Type)">
            <summary>
            Finds the metadata from method name, request type and return type
            </summary>
            <param name="methodName">Name of the method or the operation</param>
            <param name="requestType">Type of the request message</param>
            <param name="returnType">Type of the return message</param>
            <returns>The <see cref="T:Hummingbird.TestFramework.Services.AbstractMetadata"/> from the given method name, request type and response type.</returns>
            <remarks>
            This function may return <see langword="null"/> if there is no correspondence service metadata.
            </remarks>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpClient">
            <summary>
            The Standard HTTP Client handles RESTful Web Service requests
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Services.AbstractClient" />
        </member>
        <member name="P:Hummingbird.TestFramework.Services.HttpClient.GenericRequestMetadata">
            <summary>
            The internal metadata to send Generic HTTP Request. Other services can use this service to send standard HTTP Request.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpClient.SendRequest(Hummingbird.TestFramework.Services.RequestData)">
            <summary>
            Sends the request.
            </summary>
            <param name="requestData">The request data.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpClient.SendRequestAsync(Hummingbird.TestFramework.Services.RequestData,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Sends the request in asynchronous mode.
            </summary>
            <param name="requestData">The request data.</param>
            <param name="propertyChanged">The property changed.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpClient.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpClient.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.HttpClient"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpClient.ApplySettings(System.Collections.Generic.IEnumerable{Hummingbird.TestFramework.Services.Parameter})">
            <summary>
            Applies the settings.
            </summary>
            <param name="appliedParameters">The applied parameters.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpClientHandler.TryDeserializeResponse(Hummingbird.TestFramework.Services.GenericHttpResponse,System.String,Hummingbird.TestFramework.Services.HttpMetadata,Hummingbird.TestFramework.Messaging.Message)">
            <summary>
            Try to find an response object type that the status code is the same as defined.
            </summary>
            <param name="responseObject">The response object.</param>
            <param name="responseText">The response text.</param>
            <param name="metadata">The metadata.</param>
            <param name="referencedMessage">The referenced message.</param>
            <returns>An <see cref="T:System.Boolean"/> value indicates if the deserialization of succeeded. </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpHeaderAttribute">
            <summary>
            HttpHeaderAttribute is used to describe an HTTP Header within an RESTful WebService.
            All properties has this attribute will be sent in HttpHeader
            </summary>
            <remarks>
            HttpHeader name is specified in Name Property of HttpHeaderAttribute.
            The value is the attached property's string value. 
            For Enums, If the enum is attached with EnumMember attribute, Hummingbird Test Framework will take the value specified in EnumMember Attribute.
            </remarks>
            <example>
            <code>
            [HttpHeader("Content-Type")]
            </code>
            </example>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.HttpHeaderAttribute.Name">
            <summary>
            The name of HTTPHeader
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpHeaderAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.HttpHeaderAttribute"/> class.
            </summary>
            <param name="Name">The name.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpMethod">
            <summary>
            Standard HTTP Method
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpMethod.OPTIONS">
            <summary>
            OPTIONS
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpMethod.GET">
            <summary>
            GET
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpMethod.HEAD">
            <summary>
            HEAD
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpMethod.POST">
            <summary>
            POST
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpMethod.PUT">
            <summary>
            PUT
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpMethod.DELETE">
            <summary>
            DELETE
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpMethod.TRACE">
            <summary>
            TRACE
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpMethod.CONNECT">
            <summary>
            CONNECT
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpMethod.PATCH">
            <summary>
            PATCH
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpMethod.EXTENDED">
            <summary>
            Indicate EXTENDED when non standard HTTP method should be used.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpMethod.ANY">
            <summary>
            Indicate any http method is accepted, This value cannot be used during the test, it is only used for set service simulation for HTTP
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpResponseEditor">
            <summary>
            Interaction logic for GenericHttpResponseEditor.xaml
            </summary>
            <summary>
            HttpResponseEditor
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpResponseEditor.#ctor(Hummingbird.TestFramework.Automation.AbstractTestItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.HttpResponseEditor"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpResponseEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.HttpResponseEditor"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.HttpResponseEditor.ObjectStringValue">
            <summary>
            Gets the serialized object with its default Serializer.
            </summary>
            <value>
            The object string value.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpResponseEditor.Sync">
            <summary>
            The method to synchronize the editing object and assign it's value to ObjectValue.
            This method will be automatically called by the framework
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.HttpResponseEditor.SupportedObjectTypes">
            <summary>
            The list of Types which this editor supports to edit. please set this value to <see cref="P:Hummingbird.TestFramework.Services.AbstractMetadata.RequestType"/> or <see cref="P:Hummingbird.TestFramework.Services.AbstractMetadata.ResponseType"/> of your services, this information can be found in the Metadata.
            Attention: if you set this value to [TypeOf(object)], then this editor will edit all kind of objects.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpResponseEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpResponseMetadata">
            <summary>
            Metadata for HTTP Responses, it specifies the Handler to process the received http message by the stub.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Services.AbstractMetadata" />
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpResponseMetadata.MessageHandler">
            <summary>
            Defines a delegate method to process the http request
            </summary>
            <param name="request">The request.</param>
            <param name="metadata">The metadata.</param>
            <param name="isSecured">if set to <c>true</c> the request is sent through secured connection.</param>
            <param name="relatedMessage">The related message.</param>
            <returns>A <see cref="T:Hummingbird.TestFramework.Services.GenericHttpResponse"/> object represents the HTTP Response to reply</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.HttpResponseMetadata.Handler">
            <summary>
            Gets or sets the handler.
            </summary>
            <value>
            The handler.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpResponseMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.HttpResponseMetadata"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpServer">
            <summary>
            A Basic HTTP Server to handles the Restful Web services running on HTTP protocols. it can also handles other protocols based on HTTP.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Services.AbstractServer" />
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.HttpServer"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpServer.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpServer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.HttpServer.ApplySettings(System.Collections.Generic.IEnumerable{Hummingbird.TestFramework.Services.Parameter})">
            <summary>
            Applies the settings.
            </summary>
            <param name="appliedParameters">The applied parameters.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.DefaultHttpRequestHandlers">
            <summary>
            This class use generic handler to handle the incoming HTTP request received by <see cref="T:Hummingbird.TestFramework.Services.HttpServer"/>. When developing an Extension that based on HTTP, you can use this handler to process requests.
            User can configure the response by using the standard or customized object editor.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.DefaultHttpRequestHandlers.GenericHttpMessageHandler(System.Net.HttpListenerRequest,Hummingbird.TestFramework.Services.HttpResponseMetadata,System.Boolean,Hummingbird.TestFramework.Messaging.Message@)">
            <summary>
            Generic handler for basic http requests, If <see cref="P:Hummingbird.TestFramework.Services.HttpResponseMetadata.Handler"/> is not set, this handler will be used to process the incoming HTTP Message.
            </summary>
            <param name="Request">The original Http Request hold in an object of type <see cref="T:System.Net.HttpListenerRequest"/>request.</param>
            <param name="metadata">The service metadata of type <see cref="T:Hummingbird.TestFramework.Services.HttpResponseMetadata"/></param>
            <param name="isSecured"><see langword="true"/>, if this request is secured by HTTPS, otherwise, <see langword="false"/></param>
            <param name="relatedMessage">The related message object. You must create an object using current condition. This message will be logged and seen by the users.</param>
            <returns>An GenericHttpResponse object representing the response of the given request.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.HttpVersion">
            <summary>
            The version of the HTTP 
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpVersion.Version10">
            <summary>
            HTTP/1.0
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpVersion.Version11">
            <summary>
            HTTP/1.1
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.HttpVersion.Version20">
            <summary>
            HTTP/2 (Space holder, not supported yet)
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.ISendRequest">
            <summary>
            Interface defines the ability to send a request to other systems
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.ISendRequest.SendRequest(Hummingbird.TestFramework.Services.RequestData)">
            <summary>
            Sends the request.
            </summary>
            <param name="requestData">The request data.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.ISendRequest.SendRequestAsync(Hummingbird.TestFramework.Services.RequestData,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Sends the request in asynchronous mode.
            </summary>
            <param name="requestData">The request data.</param>
            <param name="propertyChanged">The property changed.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.RequestData">
            <summary>
            Request data for request handlers to send current request.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestData.Metadata">
            <summary>
            Metadata of the client services sending the request
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestData.Data">
            <summary>
            The data itself to be send in object mode, which it's type must be Metadata.RequestType
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestData.UriTemplate">
            <summary>
            UriTemplate of this request (it is an instance of the service UriTemplate, and may be modified by the user)
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestData.ReferencedMessage">
            <summary>
            Message object of this request for history
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestData.ThreadId">
            <summary>
            Thread Id, used for automation to isolate test data and variables if multiple test scenario are running on the same time.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestData.RequestOptions">
            <summary>
            Gets or sets the request options.
            </summary>
            <value>
            The request options.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.RequestData.Profile">
            <summary>
            Gets the profile used for the request data
            </summary>
            <value>
            The profile
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.SingletonServiceAttribute">
            <summary>
            This attribute marks that a service is in singleton mode. so only one instance can be added into service list.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.SoapClient">
            <summary>
            Soap Client service, all SOAP requests will be handled by this service.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Services.AbstractClient" />
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapClient.SoapServices">
            <summary>
            The SOAP services
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.SoapClient"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapClient.Start">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapClient.Stop">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapClient.SendRequest(Hummingbird.TestFramework.Services.RequestData)">
            <summary>
            Sends the request.
            </summary>
            <param name="requestData">The request data.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapClient.SendRequestAsync(Hummingbird.TestFramework.Services.RequestData,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Sends the request in asynchronous mode.
            </summary>
            <param name="requestData">The request data.</param>
            <param name="propertyChanged">The property changed.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.SoapClientService">
            <summary>
            This structure declares a Soap Client service which simulates a service to call.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapClientService.ApplicationName">
            <summary>
            Gets or sets the name of the application.
            </summary>
            <value>
            The name of the application.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapClientService.ServiceCategory">
            <summary>
            Gets or sets the service category.
            </summary>
            <value>
            The service category.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapClientService.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>
            The name of the service.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapClientService.ServiceBinding">
            <summary>
            Binding used to expose the current service.
            The default value is null, this uses automatic method.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapClientService.SoapVersion">
            <summary>
            Gets or sets the SOAP version.
            </summary>
            <value>
            The SOAP version.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapClientService.UriTemplate">
            <summary>
            Gets or sets the URI template.
            </summary>
            <value>
            The URI template.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapClientService.ClientType">
            <summary>
            Gets or sets the type of the client. it is a type of object which implmentes service description and System.ServiceModel.ClientBase
            </summary>
            <value>
            The type of the client.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapClientService.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapClientService.MessageEncoding">
            <summary>
            Gets or sets the Message Encoding.
            </summary>
            <value>
            Specifies whether Message Transmission Optimization Mechanism (MTOM) or text is used to encode SOAP messages.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapClientService.RequiredExtension">
            <summary>
            Gets the required extension for this Soap client service
            </summary>
            <value>
            The required extension object is initialized during Global.Initializing.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapClientService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.SoapClientService"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.SoapRequestMetadata">
            <summary>
            Request Metadata for Soap WebServices.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Services.AbstractMetadata" />
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapRequestMetadata.ServiceBinding">
            <summary>
            The <see cref="T:System.ServiceModel.Channels.Binding"/> used to send the soap request. Used only for non-standard bindings.
            </summary>
            <value>
            The <see cref="T:System.ServiceModel.Channels.Binding"/> object. Null value to apply automatic generated BasicHttpBinding according to Uri, Service Definition and Configuration.
            Assign only if your web service uses very special transport method other than BasicHttpBinding.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapRequestMetadata.ClientType">
            <summary>
            Gets or Sets the WCF ClientType for the web service, the Type must be a derived class of <see cref="T:System.ServiceModel.Channels.ChannelBase"/> This type is automatically assigned.
            </summary>
            <value>
            The type of the client.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapRequestMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.SoapRequestMetadata"/> class.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapRequestMetadata.ClientInterfaceType">
            <summary>
            Gets or sets the type of the Interface type which defines the web service skeleton. This type is marked with <see cref="T:System.ServiceModel.ServiceContractAttribute"/>.
            </summary>
            <value>
            The type of the interface.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapRequestMetadata.SoapFaults">
            <summary>
            Gets or Set the list of designated Soap Fault types, If these types are defined in the WSDL
            </summary>
            <remarks>
            In generated code, the Fault types are defined in <see cref="T:System.ServiceModel.FaultContractAttribute"/>
            </remarks>
            <value>
            The fault types.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapRequestMetadata.SoapVersion">
            <summary>
            Gets or sets the SOAP version if the default Binding is used.
            </summary>
            <value>
            The SOAP version.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapRequestMetadata.MessageEncoding">
            <summary>
            Gets or sets the Message Encoding.
            </summary>
            <value>
            Specifies whether Message Transmission Optimization Mechanism (MTOM) or text is used to encode SOAP messages.
            </value>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.AbstractMetadata">
            <summary>
            The base level of a Service metadata. A metadata describes a Service simulated as a Client (Driver) or Server (Mock)
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.UriTemplate">
            <summary>
            <para>When used as Server to simulate responses, UriTemplate is the absolute path of the service, starts always by /. 
            If the service is HTTP based, the HTTP service handler will route the received http message by it's URL. 
            if the Uri matches the UriTemplate, then such handler is chosen.
            </para>
            <para>When used as drivers, The Uri template there the request will be send. </para>
            <para>UriTemplate supports variables and processing functions in order make the extension reusable to different test environments and configurations</para>
            </summary>
            <example>
            <para>As Client</para>
            <code>http://{serviceip}/contract/create?id={id}</code>
            <para>Above Uri template contains 2 variables: server ip and id, which is between { and }. In the runtime, Hummingbird Test Framework will retrieve the value from Request itself, or by the environment variables (Profile)</para>
            <para>As Server</para>
            <code>/contract/create/*</code>
            <para>Above Uri template matches all URIs under the path /contract/. such as /contract/create/200012 and /contract/create/200000</para>
            </example>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.FriendlyUriTemplate">
            <summary>
            This is a friendly version of Uri displayed to the users, taken account the binding ip, parameters and variables. so the user can understand better where is service is.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.RequiredExtension">
            <summary>
            Gets the required extension about this AbstractMetadata
            </summary>
            <value>
            The required extension definition object, it will be assigned after initializing.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.ApplicationName">
            <summary>
            Level 1 description of a service, in which the application/system it belongs
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.ServiceCategory">
            <summary>
            Level 2 description of a service, in which the category/module it belongs
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.ServiceName">
            <summary>
            Level 3 description of a service, in which the service/workflow it belongs
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.OperationName">
            <summary>
            An additional Level 4 description of a service, for a subservice or a subworkflow.
            Example: for a SOAP web service, it may contains more soap action for a single endpoint
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.RequestType">
            <summary>
            Type of the object which the request will be in .NET framework.
            The injector service will convert this object to real request (such as Soap or HTTP request).
            
            For a service stub, this is the type of object RECEIVED by the service stub.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.ResponseType">
            <summary>
            Type of the object which the reply will be received from the server.
            For a mocking service, this is the type of object which will be sent to the caller.
            </summary>
            <remarks>
            For REST web service may have more than one type of response, <see cref="P:Hummingbird.TestFramework.Services.AbstractMetadata.ResponseType"/> should be a response with have a 2XX HTTP Status Code. All other type of replies should be stored in <see cref="P:Hummingbird.TestFramework.Services.AbstractMetadata.ErrorTypes"/>
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.RequestSerializer">
            <summary>
            Gets or sets the serializer used to serialize and deserialize request objects.
            </summary>
            <value>
            The request serializer. default value is XmlSerializer
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.ResponseSerializer">
            <summary>
            Gets or sets the serializer used to serialize and deserialize response objects..
            </summary>
            <value>
            The response serializer. default value is XmlSerializer
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.RequestEditorType">
            <summary>
            Type of a CustomObjectEditor to edit the request data (used as Driver). If the value is not provided, Hummingbird default editor will be used.
            the request data is type of RequestType.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.ResponseEditorType">
            <summary>
            Type of a CustomObjectEditor to edit the response data (used as Stub). If the value is not provided, Hummingbird default editor will be used.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.ErrorTypes">
            <summary>
            Type of the object which an error could be received from the server.
            </summary>
            <remarks>
            <para>For an Soap Web Service, which has multiple SoapFault definitions, the type of SoapFault can listed in this property, and can be edited with Hummingbird Default Editor.</para>
            <para>For Rest web service, All error replies or replies with 4XX or 5XX status code should be listed in this property.</para>
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.VisualizerType">
            <summary>
            The type of WPF control which shows the result of 
            the type must be derived from Hummingbird.TestFramework.DataVisualizer
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.ReferencedService">
            <summary>
            Gets or Sets referenced <see cref="T:Hummingbird.TestFramework.Services.AbstractService"/> (Client of Server) which the current request/response is used.
            For services that based on HTTP Client, HTTP Server, SOAP Client and SOAP Server, this value can be assigned automatically,
            When creating an extension that implements a new <see cref="T:Hummingbird.TestFramework.Services.AbstractService"/>, you must assign all request / responses with the service.
            </summary>
            <value>
            The referenced service.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.IsUniqueMethodOfService">
            <summary>
            If there are no different Method (MethodName) in the same Service (ServiceName) => true,
            Else false;
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.AbstractMetadata.Description">
            <summary>
            An description of the functionality of the current service. This description will be shown as Tool-tip on service selector user interface.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.AbstractMetadata.ToString">
            <summary>
            the string presentation of the current service
            </summary>
            <returns>A string representation of the current service</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.Parameter">
            <summary>
            Parameter of your Clients and Servers
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.Parameter.Name">
            <summary>
            Gets or sets the name of the parameter
            </summary>
            <value>
            The name of the parameter.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.Parameter.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.Parameter.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.Parameter.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.Parameter.ParameterType">
            <summary>
            Gets or sets the type of the parameter.
            </summary>
            <value>
            The type of the parameter.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.Parameter.EnumerationType">
            <summary>
            Used only if ParameterType is Enumeration
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.Parameter.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A deep copied <see cref="T:Hummingbird.TestFramework.Services.Parameter"/> object from the current instance.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.ParameterType">
            <summary>
            Type of the Parameter used by a Service
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ParameterType.Integer">
            <summary>
            The integer
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ParameterType.Boolean">
            <summary>
            The boolean
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ParameterType.Float">
            <summary>
            The float
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ParameterType.Double">
            <summary>
            The double
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ParameterType.DateTime">
            <summary>
            The date time
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ParameterType.String">
            <summary>
            The string
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ParameterType.Password">
            <summary>
            The password - an encrypted character sequences. for example, the protection password for private key of a SSL Certificate.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ParameterType.IpAddress">
            <summary>
            The ip address - when a parameter is type of IpAddress, Hummingbird Test Framework will populate all available IP Address of the current machine.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ParameterType.Path">
            <summary>
            The path - represents a path of a directory.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ParameterType.File">
            <summary>
            The file - Represents a absolute path of a file
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.Services.ParameterType.Enumeration">
            <summary>
            The enumeration
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.SoapBindings">
            <summary>
            Provide commonly used Http binding for Soap based WebService.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapBindings.HTTP_SOAP11_ANONYMOUS">
            <summary>
            For traditional SOAP 1.1 Web Services, it uses BasicHttpBinding, without authentication and proxy. 
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapBindings.HTTPS_SOAP11_ANONYMOUS">
            <summary>
            For traditional SOAP 1.1 Web Services, it uses BasicHttpBinding, without authentication and proxy. connection is secured by HTTPS.
            Maximum response message size is set to 2MB, if the message is larger than 2MB, you must specifies appropriate binding to use.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapBindings.GetBasicHttpBinding(Hummingbird.TestFramework.Services.RequestOptions,System.Boolean)">
            <summary>
            Get a custom Binding object for SOAP 1.1 WebServices.
            </summary>
            <param name="options">The <see cref="T:Hummingbird.TestFramework.Services.RequestOptions"/>.</param>
            <param name="Https">Indicate if the service is secured by HTTPS</param>
            <returns>
            The BasicHttpBinding object for given parameters
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapBindings.GetSoap12HttpBinding(Hummingbird.TestFramework.Services.RequestOptions,System.Boolean)">
            <summary>
            Get a custom Binding object for SOAP 1.2 WebServices.
            </summary>
            <param name="options">The <see cref="T:Hummingbird.TestFramework.Services.RequestOptions"/>.</param>
            <param name="Https">Indicate if the service is secured by HTTPS</param>
            <returns>
            The CustomBinding object for given parameters
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapBindings.GetBasicHttpBinding(Hummingbird.TestFramework.Services.RequestOptions,System.Boolean,System.ServiceModel.WSMessageEncoding)">
            <summary>
            Get a custom Binding object for SOAP 1.1 WebServices.
            </summary>
            <param name="options">The <see cref="T:Hummingbird.TestFramework.Services.RequestOptions"/> options.</param>
            <param name="https">Indicate if the service is secured by HTTPS</param>
            <param name="messageEncoding">MessageEncoding of your WebServices: Text or <see href="http://www.w3.org/Submission/soap11mtom10/">MTOM</see></param>
            <returns>
            The BasicHttpBinding object for given parameters
            </returns>
            <remarks>
            <para>If the service returns file attachments, such as Images, PDF files or Excel documents, properly it uses MTOM. Please in this case specify MTOM in messageEncoding argument</para>
            <para>Fore more information, please check the WSDL definition of your service.</para>
            </remarks>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.SoapServer">
            <summary>
            Soap Server is a build in Virtual Service Host. All virtualized SOAP services are hosted by this SoapServer.
            </summary>
            <seealso cref="T:Hummingbird.TestFramework.Services.AbstractServer" />
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.SoapServer"/> class.
            By default, SOAP Server uses TCP 8080 for HTTP transport and 8443 for HTTPS transport.
            Make sure the HTTPS transport works, you should configure a valid HTTPS certificate.
            User may changes this setting.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapServer.Start">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapServer.BindWebServices">
            <summary>
            Binds all the web services.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapServer.Stop">
            <inheritdoc/>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapServer.ApplySettings(System.Collections.Generic.IEnumerable{Hummingbird.TestFramework.Services.Parameter})">
            <inheritdoc/>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.SoapServerService">
            <summary>
            Definition of a Soap Web Service used for Service Virtualization.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapServerService.ApplicationName">
            <summary>
            Gets or sets the name of the application. 
            </summary>
            <value>
            The name of the application.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapServerService.ServiceCategory">
            <summary>
            Gets or sets the service category.
            </summary>
            <value>
            The service category.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapServerService.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>
            The name of the service.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapServerService.ServiceBinding">
            <summary>
            Binding used to expose the current service.
            The default value is BasicHttpBinding, that is Soap 1.1 message over HTTP transport.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapServerService.UriTemplate">
            <summary>
            Gets or sets the URI template. As a virtualized service, the Uri template must start with slash /
            </summary>
            <value>
            The URI template.
            </value>
            <remarks>
            The virtualized services are hosted on where Hummingbird Test Framework is running. For example, you are running a service where:
            UriTemplate is /myservices/myservice 
            on the Machine 192.168.1.110, you should configure your application to call this service to http://192.168.1.110:8080/myservices/myservice
            The port 8080 is the default port for virtualized SOAP Services, but you can change the port number in settings.
            For more information about Soap Vitualized service, please refer to <see cref="T:Hummingbird.TestFramework.Services.SoapServer"/>
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapServerService.ServiceHostType">
            <summary>
            Gets or sets the type of the Virtual Service implementation. 
            </summary>
            <value>
            The type of the service host.
            </value>
            <remarks>
            This type of class implements a WCF Service defined by an interface, and this interface has a <see cref="T:System.ServiceModel.ServiceContractAttribute"/>.
            The implementation searches the SOAP reply configured by the user and reply the calling application
            Please be aware that you don not need to implement the Virtualized Service by yourself, instead, use the Extension Builder provided by Hummingbird Test Manager.
            </remarks>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapServerService.KnownFaultTypes">
            <summary>
            Gets or Sets the SOAP Fault declared in the WSDL. with the default editor, users can simulate these kinds of Fault replies.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapServerService.Description">
            <summary>
            Gets or sets the description of this SOAP Service
            </summary>
            <value>
            The description of the Service.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapServerService.RequiredExtension">
            <summary>
            Gets the required extension for this Soap client service
            </summary>
            <value>
            The required extension object is initialized during Global.Initializing.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapServerService.SoapVersion">
            <summary>
            Gets or sets the SOAP version if the default Binding is used.
            </summary>
            <value>
            The SOAP version.
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Services.SoapServerService.MessageEncoding">
            <summary>
            Gets or sets the Message Encoding.
            </summary>
            <value>
            Specifies whether Message Transmission Optimization Mechanism (MTOM) or text is used to encode SOAP messages.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.SoapServerService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Services.SoapServerService"/> class.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.WcfEndpointBehavior">
            <summary>
            Adds the WCFEndPointBehavior to intercept the WebService calls and implementations.
            </summary>
            <seealso cref="T:System.ServiceModel.Description.IEndpointBehavior" />
        </member>
        <member name="M:Hummingbird.TestFramework.Services.WcfEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="endpoint">The endpoint to modify.</param>
            <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.WcfEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Implements a modification or extension of the client across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that is to be customized.</param>
            <param name="clientRuntime">The client runtime to be customized.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.WcfEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            Implements a modification or extension of the service across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that exposes the contract.</param>
            <param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.WcfEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Implement to confirm that the endpoint meets some intended criteria.
            </summary>
            <param name="endpoint">The endpoint to validate.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Services.WcfMessageInspector">
            <summary>
            The Inspector to intercept the WCF web Service calls.
            </summary>
            <seealso cref="T:System.ServiceModel.Dispatcher.IClientMessageInspector" />
            <seealso cref="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
        </member>
        <member name="P:Hummingbird.TestFramework.Services.WcfMessageInspector.Instance">
            <summary>
            The current instance of the <see cref="T:Hummingbird.TestFramework.Services.WcfMessageInspector"/>
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.WcfMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.
            </summary>
            <param name="reply">The message to be transformed into types and handed back to the client application.</param>
            <param name="correlationState">Correlation state data.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.WcfMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            Enables inspection or modification of a message before a request message is sent to a service.
            </summary>
            <param name="request">The message to be sent to the service.</param>
            <param name="channel">The WCF client object channel.</param>
            <returns>
            The object that is returned as the CorrelationState argument of the <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> method. This is null if no correlation state is used.The best practice is to make this a <see cref="T:System.Guid" /> to ensure that no two CorrelationState objects are the same.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.WcfMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
            <summary>
            Called after an inbound message has been received but before the message is dispatched to the intended operation.
            </summary>
            <param name="request">The request message.</param>
            <param name="channel">The incoming channel.</param>
            <param name="instanceContext">The current service instance.</param>
            <returns>
            The object used to correlate state. This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Services.WcfMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Called after the operation has returned but before the reply message is sent.
            </summary>
            <param name="reply">The reply message. This value is null if the operation is one way.</param>
            <param name="correlationState">The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> method.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.TextAddedEventArgs">
            <summary>
            The event argument contains newly added text, this EventArgs is used by <see cref="E:Hummingbird.TestFramework.ConsoleMessage.LogWritten"/> event.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Hummingbird.TestFramework.TextAddedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.TextAddedEventArgs"/> class.
            </summary>
            <param name="text">The text added to the Console stream</param>
        </member>
        <member name="P:Hummingbird.TestFramework.TextAddedEventArgs.Text">
            <summary>
            Gets the text added to the Console stream
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Util.GenericHttpRequestUtil.GetObject(Hummingbird.TestFramework.Services.GenericHttpResponse,System.String,System.Type,Hummingbird.TestFramework.Services.AbstractMetadata,Hummingbird.TestFramework.Serialization.AbstractSerializer,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <summary>
            Gets the representative object from a GenericHttpResponse object
            </summary>
            <param name="response">The HTTP response pared into an GenericHttpResponse</param>
            <param name="originalResponse">The original response.</param>
            <param name="objectType">Type of the object to be parsed from GenericHttpResponse</param>
            <param name="metadata">The metadata.</param>
            <param name="abstractSerializer">The BodySerializer from HttpMetadata</param>
            <param name="serializationExceptions">The serialization exceptions.</param>
            <returns>An object deserialized from the given response.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Util.GenericHttpRequestUtil.GetObject(Hummingbird.TestFramework.Services.GenericHttpRequest,System.String,System.Type,Hummingbird.TestFramework.Services.HttpMetadata,System.Collections.Generic.List{Hummingbird.TestFramework.Serialization.SerializationException})">
            <summary>
            Gets the object of type <paramref name="objectType"/> from an GenericHttpRequest object.
            </summary>
            <param name="request">The HTTP request parsed into an <see cref="T:Hummingbird.TestFramework.Services.GenericHttpRequest"/> object</param>
            <param name="value">The RAW Http Request.</param>
            <param name="objectType">Type of the object.</param>
            <param name="metadata">The metadata used to parse the object</param>
            <param name="serializationExceptions">The serialization exceptions.</param>
            <returns>An object of type <paramref name="objectType"/> parsed from the request</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Util.GenericHttpRequestUtil.GetContents(Hummingbird.TestFramework.Services.AbstractMetadata,System.Reflection.PropertyInfo[],System.Object,System.Collections.Generic.List{Hummingbird.TestFramework.Variable}@,System.Collections.Generic.List{Hummingbird.TestFramework.Variable}@,System.Collections.Generic.List{Hummingbird.TestFramework.Variable}@,System.Collections.Generic.List{Hummingbird.TestFramework.Variable}@,System.String@)">
            <summary>
            Gets Headers, Queries, Paths and Body from a given Object representing an HTTP Request, where the object is tagged with different <see cref="T:System.Attribute" />, such as <see cref="T:Hummingbird.TestFramework.Services.UriPathAttribute" />, <see cref="T:Hummingbird.TestFramework.Services.HttpHeaderAttribute" />, <see cref="T:Hummingbird.TestFramework.Services.QueryFieldAttribute" /> and <see cref="T:Hummingbird.TestFramework.Services.HttpBodyAttribute" />
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="properties">The properties</param>
            <param name="o">The object to be parsed.</param>
            <param name="Headers">The headers.</param>
            <param name="Queries">The queries.</param>
            <param name="Paths">The paths.</param>
            <param name="Cookies">The cookies.</param>
            <param name="body">The body.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.Util.FastReplacer">
            <summary>
            FastReplacer is a utility class similar to StringBuilder, with fast Replace function.
            FastReplacer is limited to replacing only properly formatted tokens.
            Use ToString() function to get the final text.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Util.FastReplacer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            All tokens that will be replaced must have same opening and closing delimiters, such as "{" and "}".
            </summary>
            <param name="tokenOpen">Opening delimiter for tokens.</param>
            <param name="tokenClose">Closing delimiter for tokens.</param>
            <param name="caseSensitive">Set caseSensitive to false to use case-insensitive search when replacing tokens.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Util.FastReplacer.Append(System.String,System.String@)">
            <summary>
            Appends the specified text.
            </summary>
            <param name="text">The text to append.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Util.FastReplacer.Replace(System.String,System.String,System.String@)">
            <returns>Returns true if the token was found, false if nothing was replaced.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Util.FastReplacer.InsertBefore(System.String,System.String,System.String@)">
            <returns>Returns true if the token was found, false if nothing was replaced.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Util.FastReplacer.InsertAfter(System.String,System.String,System.String@)">
            <returns>Returns true if the token was found, false if nothing was replaced.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Util.FastReplacer.Contains(System.String)">
            <summary>
            Determines whether the FastReokacer contains the specified token.
            </summary>
            <param name="token">The token.</param>
            <returns>
              <c>true</c> if the specified token occurred in this FastReplacer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Util.FastReplacer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Variable`1">
            <summary>
            Template version of Name-Value pair, which can contain any type of object as Value.
            </summary>
            <typeparam name="T">Type of object stored in Value</typeparam>
        </member>
        <member name="P:Hummingbird.TestFramework.Variable`1.Name">
            <summary>
            Name of the variable
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Variable`1.Value">
            <summary>
            Value of the variable
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Variable`1.Clone">
            <summary>
            Create a new instance of the current Name-Value pair
            </summary>
            <returns>new instance of current Name-Value pair</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Variable`1.CompareTo(Hummingbird.TestFramework.Variable{`0})">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Variable`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Variable">
            <summary>
            Name-Value pair, contains a name and its value.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Variable.Name">
            <summary>
            Name of the variable
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Variable.Value">
            <summary>
            Value of the variable
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Variable.Clone">
            <summary>
            Create a new instance of the current Name-Value pair
            </summary>
            <returns>new instance of current Name-Value pair</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Variable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Variable"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Variable.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Variable"/> class.
            </summary>
            <param name="_name">The name of the variable</param>
            <param name="_value">The value of the variable.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Variable.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.ParsingFunctions">
            <summary>
            Parsing functions are the functions can be used to make requests/responses variable
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.ParsingFunctions.CurrentDate(System.String)">
            <summary>
            Currents date in given format.
            </summary>
            <param name="format">DateTime Format. please refer to MSDN doc for DateTime format strings. </param>
            <returns>A string representation of the current date.</returns>
        </member>
        <member name="T:Hummingbird.TestFramework.SerializableDictionary`2">
            <summary>
            An dictionary object which can be serialized with XML Serializer.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:System.Collections.Generic.Dictionary`2" />
            <seealso cref="T:System.Xml.Serialization.IXmlSerializable" />
        </member>
        <member name="M:Hummingbird.TestFramework.SerializableDictionary`2.GetSchema">
            <summary>
            Gets the XML schema.
            </summary>
            <returns>XmlSchema object</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the XML element from XmlReader
            </summary>
            <param name="reader">The XmlReader.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the Xml elements to XmlWriter.
            </summary>
            <param name="writer">The XmlWriter.</param>
        </member>
        <member name="T:Hummingbird.TestFramework.TestStatus">
            <summary>
            Representing the status of a Test, Test Step or a Test Suite
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.TestStatus.NoRun">
            <summary>
            The TestCase or TestStep is no started.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.TestStatus.Pending">
            <summary>
            The TestCase or TestStep is inserted to the running queue and will be executed.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.TestStatus.Running">
            <summary>
            The TestCase or TestStep is running.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.TestStatus.Ignored">
            <summary>
            The current test case or test step is ignored.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.TestStatus.Passed">
            <summary>
            The TestCase is executed with no technical error.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.TestStatus.Warning">
            <summary>
            The test has some predefined rules telling something wrong, but the test can be continue.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.TestStatus.Abandoned">
            <summary>
            Current test case or test step is abandoned because there are some critical errors happen in previous test/test step.
            Normally, if one test case or step is abandoned, all following test case or test steps will also be marked as abandoned.
            </summary>
        </member>
        <member name="F:Hummingbird.TestFramework.TestStatus.Failed">
            <summary>
            Current test case or test step is Failed. a failed Test Step will fail a test case.
            </summary>
        </member>
        <member name="T:Hummingbird.TestFramework.Utilities">
            <summary>
            Utilities class contains tool functions
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.LocalIPAddresses">
            <summary>
            Get available IP address for the current machine.
            </summary>
            <returns>A list of IP Address in string array</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.FindMetadata(System.Guid)">
            <summary>
            Finds the metadata object from the Identifier.
            </summary>
            <param name="id">The identifier of the metadata</param>
            <returns>The <see cref="T:Hummingbird.TestFramework.Services.AbstractMetadata"/> object where its Identifier is specified ID. If there is no metadata contains this ID, a <see langword="null"/> object will be returned.</returns>
        </member>
        <member name="P:Hummingbird.TestFramework.Utilities.NULL">
            <summary>
            This string represent a <see langword="null"/> object used by the object string representation.
            </summary>
            <value>
             NULL
            </value>
        </member>
        <member name="P:Hummingbird.TestFramework.Utilities.EMPTY">
            <summary>
            This string represent an empty object used by the object string representation. Empty means the an Element does not exist.
            </summary>
            <value>
             &lt;EMPTY&gt;
            </value>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.ObjectFromString(System.String,System.Type)">
            <summary>
            The create an object which can be initialized by String.
            The object must have a Public Static Method Parse, with a String as parameter.
            </summary>
            <param name="text">String, the text value of the object</param>
            <param name="objectType">Type, the type of object</param>
            <returns>An object of type descripted in <paramref name="objectType"/> represented by the <paramref name="text"/></returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.ArrayFromString(System.String,System.Type,System.Char)">
            <summary>
            Converts an Array from string.
            </summary>
            <param name="text">The text represents an Array</param>
            <param name="objectType">Type of the Array</param>
            <param name="separator">The separator which separates different array items.</param>
            <returns>Array object from the given string and with the help of given object type and separator.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.ExtractResource(System.String)">
            <summary>
            Extracts the resource from its name to an byte array
            </summary>
            <param name="filename">The filename.</param>
            <returns>An byte array represents the binary content of a given assembly</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.WriteLog(System.String)">
            <summary>
            Writes the an message to the console, usually used by command line tool
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.WriteError(System.String,System.Boolean)">
            <summary>
            Writes the error message to the console
            </summary>
            <param name="error">The error message.</param>
            <param name="ErrorConsole">if set to <c>true</c> error message will be written in Error Stream</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.GenerateId(System.Guid,System.String)">
            <summary>
            Generates the GUID from a given id and another string.
            </summary>
            <param name="id">The source identifier.</param>
            <param name="from">A string value</param>
            <returns>A <see cref="T:System.Guid"/> represents the generated identifier from given parameters</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.UninstallExtension(Hummingbird.TestFramework.Extensibility.ExtensionDefinition)">
            <summary>
            Uninstall the extension defined by ExtensionDefinition
            </summary>
            <param name="definition">The definition of the extension to be uninstalled.</param>
            <returns>True if the extension is already loaded and will be deleted after next start. False if the extension is uninstalled.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.InstallExtension(System.String,System.Guid,System.String@)">
            <summary>
            Installs an extension from given zip archive
            </summary>
            <param name="extensionArchive">The full path of extension archive (*.zip)</param>
            <param name="extensionId">The Id of the extension.</param>
            <param name="InstallDir">The directory where the extension is or will be installed.</param>
            <returns>True if the extension is installed, False if the extension can not be installed.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.CopyExtensionToInstall(System.String)">
            <summary>
            Copies the extension package to install folder and it will be installed next time application restarts.
            </summary>
            <param name="extensionArchive">The full path of the extension archive file.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicates if the extension package has been successfully copied to installation folder.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.GetDefinition(System.String)">
            <summary>
            Gets the ExtensionDefinition from an Extension Package File (*.zip)
            </summary>
            <param name="filename">The full name of the extension package, the package file must contain ExtensionDefinition.xml.</param>
            <returns>An <see cref="T:Hummingbird.TestFramework.Extensibility.ExtensionDefinition"/> object represents the Extension from the given file name</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.ParseObject(System.String,Hummingbird.TestFramework.Automation.AbstractTestItem,System.String@)">
            <summary>
            Parses the object with the variables provided in the current scope.
            </summary>
            <param name="template">The template text where the variables will be parsed. the variables in the templates is in form of ${VARIABLE_NAME}, if an variable exists in the test scope, it will be replaced by its value.</param>
            <param name="testitem">The <see cref="T:Hummingbird.TestFramework.Automation.AbstractTestItem" /> which may a an <see cref="T:Hummingbird.TestFramework.Automation.AutomationProject" />, a <see cref="T:Hummingbird.TestFramework.Automation.TestSuite" />, a <see cref="T:Hummingbird.TestFramework.Automation.TestCase" /> or a <see cref="T:Hummingbird.TestFramework.Automation.TestStepBase" /></param>
            <param name="errorMessage">The error message.</param>
            <returns>
            Returns the parsed object from template, where the variables are replaced by the values.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.GetImageSourceFromString(System.String)">
            <summary>
            Gets the image source from string.
            </summary>
            <param name="uri">The URI pointing the Image Resource.</param>
            <returns>An <see cref="T:System.Windows.Media.Imaging.BitmapImage"/> object represents an Image loaded from the given <paramref name="uri"/></returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.RegisterPortWcf(System.Int32,System.String,System.String)">
            <summary>
            Registers the port used for HTTP and WebService Server (WCF). For SSL supports, Certificate Thumbprint mus be specified in <paramref name="certhash"/>
            </summary>
            <param name="port">The port number.</param>
            <param name="certhash">The Certificate Hash (Thumbprint) of the certificate to use for register SSL</param>
            <param name="appid">The Application ID, The value specified in <see cref="T:System.Runtime.InteropServices.GuidAttribute"/> of AssemblyInfo.cs </param>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.InstallCertificates(System.Boolean)">
            <summary>
            This method imports stock certificates that is used Installs the certificates. 
            </summary>
            <param name="forAllUsers">if set to <c>true</c> installs the certificate for all users, this actions requires administrator user rights</param>
            <remarks>
            Install for all users will install the certificate to LocalMachine certificate store, that requires administrator rights. By default, install the certificate for CurrentUser
            </remarks>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.IsSimpleType(System.Type)">
            <summary>
            Determines whether the specified Type is simple type.
            </summary>
            <param name="t">The t.</param>
            <returns>
              <c>true</c> if the given type is Simple type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:Hummingbird.TestFramework.Utilities.SimpleTypes">
            <summary>
            Defines a list of Types which are considered as simple types.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.ToEnum``1(System.String)">
            <summary>
            Concerts a string to its enum value
            </summary>
            <typeparam name="T">Enum Type</typeparam>
            <param name="str">The string value.</param>
            <returns>Converted enumeration value from the given string.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.GetType(System.String)">
            <summary>
            Get the Type object from it's FullName, This function scans the type that defined in the Test Framework and also all loaded assemblies from Extension.
            </summary>
            <param name="fullName">the full name of the type</param>
            <returns>The Type object where <see cref="P:System.Type.FullName"/> is the given full name.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.GetDerivedClasses(System.Type[])">
            <summary>
            Gets the derived classes from a list of given class from TestFramework assembly and all dynamically loaded assemblies from <see cref="P:Hummingbird.TestFramework.Global.LoadedAssemblies"/>
            </summary>
            <param name="baseClasses">The base classes.</param>
            <returns>An array of derived class types from the given base classes.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.GetFile(System.String)">
            <summary>
            Universal method to get file contents locally, on UNC path or on the web using HTTP/HTTPS protocol
            </summary>
            <param name="path"></param>
            <returns>The file content stored in a string object.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.GetFile(System.String,System.String)">
            <summary>
            Universal method to get file content locally, on UNC path or on the web using HTTP protocol. from relative path 
            </summary>
            <param name="path">The absolute or relative path</param>
            <param name="relativeTo">If the path is relative, the path will be calculated relatively </param>
            <returns>The file content represent in a string object.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.GetFileName(System.String,System.String)">
            <summary>
            Universal method to get file name locally, on UNC path or on the web using HTTP protocol. from relative path 
            </summary>
            <param name="path">The absolute or relative path</param>
            <param name="relativeTo">If the path is relative, the path will be calculated relatively </param>
            <returns>The absolute filename in a string object.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.GetAbsolutePath(System.String,System.String)">
            <summary>
            Calculate absolute path from relative path and base path
            </summary>
            <param name="basePath">An absolute Uri used as base Path</param>
            <param name="relativePath">the path relative to base path</param>
            <returns>The absolute path</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.GetRelativePath(System.String,System.String)">
            <summary>
            Calculate relative path from absolute path
            </summary>
            <param name="basePath">The base path.</param>
            <param name="absolutePath">The absolute path.</param>
            <returns>the relative path to <paramref name="basePath"/></returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.Escape(System.String[],System.Int32)">
            <summary>
            Escape string array for writing in CSV files
            </summary>
            <param name="array">the string array which represents a data line.</param>
            <param name="maxLength">Maximum length of a field in the array, default value is 32767 (Maximum length can be held in an Excel cell)</param>
            <returns>False if the value of cell is trimmed, True if the value is not trimmed</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.CompressString(System.String)">
            <summary>
            Compresses the string.
            </summary>
            <param name="str">The string.</param>
            <returns>A byte array containing the compressed string</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.UncompressString(System.Byte[])">
            <summary>
            Uncompresses the string from byte array
            </summary>
            <param name="bytes">The byte array (binary stream of the zipped string)</param>
            <returns>The uncompressed string from a gzip stream.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.EvaluateXPath(System.String,System.String)">
            <summary>
            Evaluates the XPath expression in a given XML Document.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <param name="xpath">The <a href="http://www.hummingbirdalm.com/xpathexpression">XPath Expression</a></param>
            <returns>
            The value extracted from the XML document and an given XPath
            </returns>
            <exception cref="T:System.Xml.XmlException">The XML document used for XPath evaluation is empty. If you are using Assertions or Value Extraction, make sure the target test step is executed.</exception>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.AesEncryption(System.String)">
            <summary>
            Encrypt a value
            </summary>
            <param name="clearText">the text to be encrypted.</param>
            <returns>The encrypted data encoded in Base64 format.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.AesDecryption(System.String)">
            <summary>
            Decrypt a text from base64 string.
            </summary>
            <param name="cipherText">Encrypted text encoded in Base 64</param>
            <returns>The clear text.</returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.ToString(System.TimeSpan)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents an TimeSpan.
            </summary>
            <param name="ts">The ts.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Utilities.ToString(System.Double)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents an double in seconds.
            </summary>
            <param name="seconds">The total number of seconds.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Hummingbird.TestFramework.Version">
            <summary>
            The object represents a Version. The reason to create a new Version class is because System.Versionis not serializable.
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Version.Major">
            <summary>
            The Major version 1.0, 2.0
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Version.Minor">
            <summary>
            The Minor version 1.1, 2,1, ...
            </summary>
        </member>
        <member name="P:Hummingbird.TestFramework.Version.Build">
            <summary>
            The Revision, 1.0.193
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Version.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Hummingbird.TestFramework.Version.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Version"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Version.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Version"/> class.
            </summary>
        </member>
        <member name="M:Hummingbird.TestFramework.Version.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Version"/> class.
            </summary>
            <param name="major">Major version.</param>
            <param name="minor">Minor version.</param>
        </member>
        <member name="M:Hummingbird.TestFramework.Version.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Hummingbird.TestFramework.Version"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build number.</param>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
